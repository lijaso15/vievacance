{"ast":null,"code":"/**\r\n * A collection of GeoJSON format-related utility functions.\r\n */\nimport * as tslib_1 from \"tslib\";\nimport * as $math from \"../../core/utils/Math\";\n/**\r\n * Normalizes a geo-point.\r\n *\r\n * @ignore Exclude from docs\r\n * @param geoPoint  Source geo-point\r\n * @return Normalized geo-point\r\n */\n\nexport function normalizePoint(geoPoint) {\n  var longitude = wrapAngleTo180(geoPoint.longitude);\n  var latitude = Math.asin(Math.sin(geoPoint.latitude * $math.RADIANS)) * $math.DEGREES;\n  var latitude180 = wrapAngleTo180(geoPoint.latitude);\n\n  if (Math.abs(latitude180) > 90) {\n    longitude = wrapAngleTo180(longitude + 180);\n  }\n\n  geoPoint.longitude = longitude;\n  geoPoint.latitude = latitude;\n  return geoPoint;\n}\n/**\r\n * Normalizes all points of a geo-line.\r\n *\r\n * @ignore Exclude from docs\r\n * @param multiline  Source geo-line\r\n * @return Normalized geo-line\r\n */\n\nexport function normalizeMultiline(multiline) {\n  try {\n    for (var multiline_1 = tslib_1.__values(multiline), multiline_1_1 = multiline_1.next(); !multiline_1_1.done; multiline_1_1 = multiline_1.next()) {\n      var segment = multiline_1_1.value;\n\n      try {\n        for (var segment_1 = tslib_1.__values(segment), segment_1_1 = segment_1.next(); !segment_1_1.done; segment_1_1 = segment_1.next()) {\n          var point = segment_1_1.value;\n          point = normalizePoint(point);\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (segment_1_1 && !segment_1_1.done && (_a = segment_1.return)) _a.call(segment_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    }\n  } catch (e_2_1) {\n    e_2 = {\n      error: e_2_1\n    };\n  } finally {\n    try {\n      if (multiline_1_1 && !multiline_1_1.done && (_b = multiline_1.return)) _b.call(multiline_1);\n    } finally {\n      if (e_2) throw e_2.error;\n    }\n  }\n\n  return multiline;\n\n  var e_2, _b, e_1, _a;\n}\n/**\r\n * [wrapAngleTo180 description]\r\n *\r\n * @todo Description\r\n * @ignore Exclude from docs\r\n * @param angle  Angle\r\n * @return Angle\r\n */\n\nexport function wrapAngleTo180(angle) {\n  angle = angle % 360;\n\n  if (angle > 180) {\n    angle -= 360;\n  }\n\n  if (angle < -180) {\n    angle += 360;\n  }\n\n  return angle;\n}\n/**\r\n * Converts a geo point to a regular point object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param geoPoint  Source geo point\r\n * @return Point\r\n */\n\nexport function geoToPoint(geoPoint) {\n  return {\n    x: geoPoint.longitude,\n    y: geoPoint.latitude\n  };\n}","map":null,"metadata":{},"sourceType":"module"}