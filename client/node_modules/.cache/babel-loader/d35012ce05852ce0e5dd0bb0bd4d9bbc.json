{"ast":null,"code":"/**\r\n * Base class for all Axis\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Component } from \"../../core/Component\";\nimport { Container } from \"../../core/Container\";\nimport { DataItem } from \"../../core/DataItem\";\nimport { AxisBreak } from \"./AxisBreak\";\nimport { Label } from \"../../core/elements/Label\";\nimport { Tooltip } from \"../../core/elements/Tooltip\";\nimport { SortedListTemplate } from \"../../core/utils/SortedList\";\nimport { List, ListTemplate, ListDisposer } from \"../../core/utils/List\";\nimport { Disposer, MultiDisposer } from \"../../core/utils/Disposer\";\nimport { registry } from \"../../core/Registry\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport * as $number from \"../../core/utils/Number\";\nimport * as $array from \"../../core/utils/Array\";\nimport * as $type from \"../../core/utils/Type\";\nimport { defaultRules, ResponsiveBreakpoints } from \"../../core/utils/Responsive\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines a [[DataItem]] for [[Axis]].\r\n *\r\n * @see {@link DataItem}\r\n */\n\nvar AxisDataItem =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(AxisDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function AxisDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"AxisDataItem\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  Object.defineProperty(AxisDataItem.prototype, \"grid\", {\n    /**\r\n     * @return Grid element\r\n     */\n    get: function get() {\n      if (!this._grid) {\n        var component_1 = this.component;\n\n        if (component_1) {\n          var template = void 0;\n          var grid_1;\n\n          if (this.isRange) {\n            template = component_1.axisRanges.template.grid;\n\n            if (template.disabled) {\n              return;\n            } else {\n              grid_1 = template.clone();\n            }\n          } else {\n            template = component_1.renderer.grid.template;\n\n            if (template.disabled) {\n              return;\n            } else {\n              grid_1 = component_1.renderer.grid.create();\n\n              this._disposers.push(new Disposer(function () {\n                component_1.renderer.grid.removeValue(grid_1);\n              }));\n            }\n          }\n\n          this.grid = grid_1;\n          grid_1.shouldClone = false;\n\n          this._disposers.push(grid_1);\n\n          grid_1.axis = this.component;\n        }\n      }\n\n      return this._grid;\n    },\n\n    /**\r\n     * A [[Grid]] element associated with this data item.\r\n     *\r\n     * If there is no grid element associated with data item, a new one is\r\n     * created and returned.\r\n     *\r\n     * @param grid  Grid element\r\n     */\n    set: function set(grid) {\n      if (this._grid && this._grid != grid) {\n        $array.remove(this.sprites, this._grid);\n        this._grid.dataItem = undefined;\n      }\n\n      if (grid) {\n        if (grid.dataItem && grid.dataItem != this) {\n          $array.remove(grid.dataItem.sprites, grid);\n          grid.dataItem.grid = undefined;\n        }\n\n        this.addSprite(grid);\n      }\n\n      this._grid = grid;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisDataItem.prototype, \"tick\", {\n    /**\r\n     * @return Tick element\r\n     */\n    get: function get() {\n      if (!this._tick) {\n        var component_2 = this.component;\n\n        if (component_2) {\n          var template = void 0;\n          var tick_1;\n\n          if (this.isRange) {\n            template = component_2.axisRanges.template.tick;\n\n            if (template.disabled) {\n              return;\n            } else {\n              tick_1 = template.clone();\n            }\n          } else {\n            template = component_2.renderer.ticks.template;\n\n            if (template.disabled) {\n              return;\n            } else {\n              tick_1 = component_2.renderer.ticks.create();\n\n              this._disposers.push(new Disposer(function () {\n                component_2.renderer.ticks.removeValue(tick_1);\n              }));\n            }\n          }\n\n          this.tick = tick_1;\n          tick_1.axis = this.component;\n          tick_1.shouldClone = false;\n\n          this._disposers.push(tick_1);\n        }\n      }\n\n      return this._tick;\n    },\n\n    /**\r\n     * An [[AxisTick]] element associated with this data item.\r\n     *\r\n     * If there is no tick element associated with data item, a new one is\r\n     * created and returned.\r\n     *\r\n     * @param tick  Tick element\r\n     */\n    set: function set(tick) {\n      if (this._tick && this._tick != tick) {\n        $array.remove(this.sprites, this._tick);\n        this._tick.dataItem = undefined;\n      }\n\n      if (tick) {\n        if (tick.dataItem && tick.dataItem != this) {\n          $array.remove(tick.dataItem.sprites, tick);\n          tick.dataItem.tick = undefined;\n        }\n\n        this.addSprite(tick);\n      }\n\n      this._tick = tick;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisDataItem.prototype, \"label\", {\n    /**\r\n     * @return Label element\r\n     */\n    get: function get() {\n      if (!this._label) {\n        var component_3 = this.component;\n\n        if (component_3) {\n          var template = void 0;\n          var label_1;\n\n          if (this.isRange) {\n            template = component_3.axisRanges.template.label;\n\n            if (template.disabled) {\n              return;\n            } else {\n              label_1 = template.clone();\n            }\n          } else {\n            template = component_3.renderer.labels.template;\n\n            if (template.disabled) {\n              return;\n            } else {\n              label_1 = component_3.renderer.labels.create();\n\n              this._disposers.push(new Disposer(function () {\n                component_3.renderer.labels.removeValue(label_1);\n              }));\n            }\n          }\n\n          this._disposers.push(label_1);\n\n          this.label = label_1;\n          label_1.shouldClone = false;\n          label_1.axis = this.component;\n          label_1.virtualParent = component_3;\n        }\n      }\n\n      return this._label;\n    },\n\n    /**\r\n     * An [[AxisLabel]] element associated with this data item.\r\n     *\r\n     * If there is no label element associated with data item, a new one is\r\n     * created and returned.\r\n     *\r\n     * @param label Label element\r\n     */\n    set: function set(label) {\n      if (this._label && this._label != label) {\n        $array.remove(this.sprites, this._label);\n        this._label.dataItem = undefined;\n      }\n\n      if (label) {\n        if (label.dataItem && label.dataItem != this) {\n          $array.remove(label.dataItem.sprites, label);\n          label.dataItem.label = undefined;\n        }\n\n        this.addSprite(label);\n      }\n\n      this._label = label;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisDataItem.prototype, \"axisFill\", {\n    /**\r\n     * @return Label element\r\n     */\n    get: function get() {\n      if (!this._axisFill) {\n        var component_4 = this.component;\n\n        if (component_4) {\n          var template = void 0;\n          var axisFill_1;\n\n          if (this.isRange) {\n            template = component_4.axisRanges.template.axisFill;\n\n            if (!this.isTemplate && template.disabled) {\n              return;\n            } else {\n              axisFill_1 = template.clone();\n            }\n          } else {\n            template = component_4.renderer.axisFills.template;\n\n            if (template.disabled) {\n              return;\n            } else {\n              axisFill_1 = component_4.renderer.axisFills.create();\n\n              this._disposers.push(new Disposer(function () {\n                component_4.renderer.axisFills.removeValue(axisFill_1);\n              }));\n            }\n          }\n\n          this.axisFill = axisFill_1;\n          axisFill_1.shouldClone = false;\n\n          this._disposers.push(axisFill_1);\n        }\n      }\n\n      return this._axisFill;\n    },\n\n    /**\r\n     * An [[AxisFill]] associated element with this data item.\r\n     *\r\n     * If there is no fill element associated with data item, a new one is\r\n     * created and returned.\r\n     *\r\n     * @param label Label element\r\n     */\n    set: function set(axisFill) {\n      if (this._axisFill && this._axisFill != axisFill) {\n        $array.remove(this.sprites, this._axisFill);\n        this._axisFill.dataItem = undefined;\n      }\n\n      if (axisFill) {\n        if (axisFill.dataItem && axisFill.dataItem != this) {\n          $array.remove(axisFill.dataItem.sprites, axisFill);\n          axisFill.dataItem.axisFill = undefined;\n        }\n\n        axisFill.axis = this.component;\n        this.addSprite(axisFill);\n      }\n\n      this._axisFill = axisFill;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisDataItem.prototype, \"text\", {\n    /**\r\n     * @return Text label\r\n     */\n    get: function get() {\n      return this._text;\n    },\n\n    /**\r\n     * Text to be used as data item's label.\r\n     *\r\n     * @param text Text label\r\n     */\n    set: function set(text) {\n      this._text = text;\n\n      if (this._label) {\n        // do not use getter, it will create unwanted instances!\n        this._label.text = text;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisDataItem.prototype, \"mask\", {\n    /**\r\n     * Data item's mask.\r\n     *\r\n     * @return Mask\r\n     */\n    get: function get() {\n      return this._mask;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisDataItem.prototype, \"contents\", {\n    /**\r\n     * Returns a [[Container]] to place all visual elements, related to data item\r\n     * in.\r\n     *\r\n     * If there is no Container, a new one is created.\r\n     *\r\n     * @return Contents container\r\n     */\n    get: function get() {\n      if (!this._contents) {\n        var contents = new Container();\n        this.addSprite(contents);\n        contents.isMeasured = false;\n        this._contents = contents;\n        var component = this.component;\n\n        if (component) {\n          var mask = component.renderer.createFill(this.component);\n          mask.disabled = false;\n          mask.axis = component;\n          this.addSprite(mask);\n          this._mask = mask;\n          contents.mask = mask;\n        }\n      }\n\n      return this._contents;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisDataItem.prototype, \"axisBreak\", {\n    /**\r\n     * @return Axis break\r\n     */\n    get: function get() {\n      return this._axisBreak;\n    },\n\n    /**\r\n     * An [[AxisBreak]] this data item falls within.\r\n     *\r\n     * @param axisBreak Axis break\r\n     */\n    set: function set(axisBreak) {\n      if (this._axisBreak) {\n        this._axisBreak.dataItems.removeValue(this);\n      }\n\n      if (axisBreak) {\n        axisBreak.dataItems.push(this);\n      }\n\n      this._axisBreak = axisBreak;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Re-draws the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  AxisDataItem.prototype.validate = function () {\n    if (this.component) {\n      this.component.validateDataElement(this);\n    }\n  };\n  /**\r\n   * Appends data item's elements to the parent [[Container]].\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  AxisDataItem.prototype.appendChildren = function () {\n    if (this.component) {\n      this.component.appendDataItem(this);\n    }\n  };\n  /**\r\n   * Ordering function used in JSON setup.\r\n   *\r\n   * @param a  Item A\r\n   * @param b  Item B\r\n   * @return Order\r\n   */\n\n\n  AxisDataItem.prototype.configOrder = function (a, b) {\n    if (a == b) {\n      return 0;\n    } else if (a == \"language\") {\n      return -1;\n    } else if (b == \"language\") {\n      return 1;\n    } else if (a == \"component\") {\n      return -1;\n    } else if (b == \"component\") {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n  /**\r\n   * Checks if data item has particular property set.\r\n   *\r\n   * @param prop  Property name\r\n   * @return Property set?\r\n   */\n\n\n  AxisDataItem.prototype.hasProperty = function (prop) {\n    return prop == \"component\" ? true : _super.prototype.hasProperty.call(this, prop);\n  };\n  /**\r\n   * Copies all parameters from another [[AxisDataItem]].\r\n   *\r\n   * @param source Source AxisDataItem\r\n   */\n\n\n  AxisDataItem.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n\n    this.text = source.text;\n  };\n\n  return AxisDataItem;\n}(DataItem);\n\nexport { AxisDataItem };\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines named positions for data item's location within [[Axis]].\r\n */\n\nexport var AxisItemLocation;\n\n(function (AxisItemLocation) {\n  AxisItemLocation[AxisItemLocation[\"Start\"] = 0] = \"Start\";\n  AxisItemLocation[AxisItemLocation[\"Middle\"] = 0.5] = \"Middle\";\n  AxisItemLocation[AxisItemLocation[\"End\"] = 1] = \"End\";\n})(AxisItemLocation || (AxisItemLocation = {}));\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * A base class for all Axis elements.\r\n *\r\n * @see {@link IAxisEvents} for a list of available Events\r\n * @see {@link IAxisAdapters} for a list of available Adapters\r\n */\n\n\nvar Axis =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Axis, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function Axis() {\n    var _this = // Init\n    _super.call(this) || this;\n    /**\r\n     * Number of Grid elements on the axis.\r\n     */\n\n\n    _this._gridCount = 10;\n    /**\r\n     * A list of [[XYSeries]] that are using this Axis.\r\n     */\n\n    _this._series = new List();\n    /**\r\n     * Specifies if axis should be automatically disposed when removing from\r\n     * chart's axis list.\r\n     *\r\n     * @default true\r\n     */\n\n    _this.autoDispose = true;\n    _this.className = \"Axis\";\n    _this.shouldClone = false;\n\n    _this.setPropertyValue(\"cursorTooltipEnabled\", true);\n\n    var interfaceColors = new InterfaceColorSet(); // Create title\n\n    _this.title = new Label();\n    _this.title.shouldClone = false;\n\n    _this._disposers.push(_this.title);\n\n    _this.setPropertyValue(\"startLocation\", 0);\n\n    _this.setPropertyValue(\"endLocation\", 1); // Data item iterator\n\n\n    _this._dataItemsIterator = new $iter.ListIterator(_this.dataItems, function () {\n      return _this.dataItems.create();\n    });\n    _this._dataItemsIterator.createNewItems = true; // Create tooltip\n\n    var tooltip = new Tooltip();\n\n    _this._disposers.push(tooltip);\n\n    tooltip.label.padding(5, 10, 5, 10);\n    tooltip.background.pointerLength = 5;\n    tooltip.fitPointerToBounds = true;\n    tooltip.background.filters.clear(); // Set virtual parentfor the tooltip so that it can properly inheirt\n    // formatters from the axis.\n\n    tooltip.virtualParent = _this; // Create background element for the tooltip\n\n    var background = tooltip.background;\n    background.cornerRadius = 0;\n    background.fill = interfaceColors.getFor(\"alternativeBackground\");\n    background.stroke = background.fill;\n    background.strokeWidth = 1;\n    background.fillOpacity = 1;\n    tooltip.label.fill = interfaceColors.getFor(\"alternativeText\");\n    _this.tooltip = tooltip;\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Holds reference to a function that accepts a DataItem and its index as\r\n   * parameters.\r\n   *\r\n   * It can either return a fill opacity for a fill, or manipulate data item\r\n   * directly, to create various highlighting scenarios.\r\n   *\r\n   * For example, you can set it up to highlight only weekends on a\r\n   * [[DateAxis]].\r\n   */\n\n\n  Axis.prototype.fillRule = function (dataItem, index) {\n    if (!$type.isNumber(index)) {\n      index = dataItem.index;\n    }\n\n    if (index / 2 == Math.round(index / 2)) {\n      dataItem.axisFill.__disabled = true;\n      dataItem.axisFill.opacity = 0;\n    } else {\n      dataItem.axisFill.opacity = 1;\n      dataItem.axisFill.__disabled = false;\n    }\n  };\n  /**\r\n   * Returns a new/empty DataItem of the type appropriate for this object.\r\n   *\r\n   * @see {@link DataItem}\r\n   * @return Data Item\r\n   */\n\n\n  Axis.prototype.createDataItem = function () {\n    return new AxisDataItem();\n  };\n  /**\r\n   * Invalidates layout.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Axis.prototype.invalidateLayout = function () {\n    _super.prototype.invalidateLayout.call(this); // this puts series after axis in invalidation order also makes series update it's data items in case widht/height of a series is not 100%\n\n\n    $iter.each(this.series.iterator(), function (series) {\n      series.invalidateLayout();\n    });\n  };\n  /**\r\n   * Invalidates series of this axis.\r\n   */\n\n\n  Axis.prototype.invalidateSeries = function () {\n    // this puts series after axis in invalidation order also makes series update it's data items in case widht/height of a series is not 100%\n    $iter.each(this.series.iterator(), function (series) {\n      series.invalidate();\n    });\n  };\n  /**\r\n   * Override to cancel super call for data element validation.\r\n   * @ignore\r\n   */\n\n\n  Axis.prototype.validateDataElements = function () {\n    if (this.ghostLabel) {\n      this.renderer.updateLabelElement(this.ghostLabel, this.start, this.end);\n      this.ghostLabel.validate();\n    }\n  };\n  /**\r\n   * Recalculates the number of grid items on the axis.\r\n   */\n\n\n  Axis.prototype.updateGridCount = function () {\n    if (this.renderer) {\n      this._gridCount = this.axisLength / this.renderer.minGridDistance;\n    }\n  };\n  /**\r\n   * Redraws the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Axis.prototype.validateLayout = function () {\n    this.axisFullLength = this.axisLength / (this.end - this.start);\n\n    _super.prototype.validateLayout.call(this);\n\n    this.updateGridCount();\n    this.renderer.updateAxisLine();\n    this.renderer.updateTooltip();\n    this.renderer.updateBaseGridElement();\n\n    if (this._prevLength != this.axisLength) {\n      this.dispatchImmediately(\"lengthchanged\");\n      this._prevLength = this.axisLength;\n    }\n  };\n  /**\r\n   * Initializes Axis' renderer.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Axis.prototype.initRenderer = function () {};\n  /**\r\n   * Adds a data item to the Axis.\r\n   *\r\n   * @param dataItem Data item\r\n   */\n\n\n  Axis.prototype.appendDataItem = function (dataItem) {\n    var renderer = this.renderer;\n\n    if (dataItem.tick) {\n      dataItem.tick.parent = renderer.gridContainer;\n    }\n\n    if (dataItem.label) {\n      dataItem.label.parent = renderer;\n    }\n\n    if (dataItem.grid) {\n      dataItem.grid.parent = renderer.gridContainer;\n    }\n\n    if (dataItem.axisFill) {\n      dataItem.axisFill.parent = renderer.gridContainer;\n    }\n  };\n  /**\r\n   * Redraws Axis' related items.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Axis.prototype.validate = function () {\n    _super.prototype.validate.call(this);\n\n    this.validateLayout();\n    this.renderer.updateGridContainer();\n  };\n  /**\r\n   * Redars Axis ranges.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Axis.prototype.validateAxisRanges = function () {\n    var _this = this;\n\n    $iter.each(this.axisRanges.iterator(), function (axisRange) {\n      _this.appendDataItem(axisRange);\n\n      _this.validateDataElement(axisRange);\n\n      if (axisRange.grid) {\n        axisRange.grid.validate();\n      }\n\n      if (axisRange.tick) {\n        axisRange.tick.validate();\n      }\n\n      if (axisRange.axisFill) {\n        axisRange.axisFill.validate();\n      }\n\n      if (axisRange.label) {\n        axisRange.label.validate();\n      }\n    });\n  };\n  /**\r\n   * Invalidates all axis breaks, so they are redrawn.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Axis.prototype.validateBreaks = function () {\n    $iter.each(this.axisBreaks.iterator(), function (axisBreak) {\n      axisBreak.invalidate();\n    });\n  };\n  /**\r\n   * Associates an Axis break with this Axis, after it is inserted into\r\n   * `axisBreaks`.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event Event\r\n   */\n\n\n  Axis.prototype.processBreak = function (event) {\n    var axisBreak = event.newValue;\n    axisBreak.parent = this.renderer.breakContainer;\n    axisBreak.axis = this;\n  };\n  /**\r\n   * Registers a [[XYSeries]] element with this Axis.\r\n   *\r\n   * Returns a [[Disposer]] for all events, added to Series for watching\r\n   * changes in Axis, and vice versa.\r\n   * @ignore\r\n   * @param series  Series\r\n   * @return Event disposer\r\n   */\n\n\n  Axis.prototype.registerSeries = function (series) {\n    var _this = this;\n\n    this.series.moveValue(series);\n    return new MultiDisposer([new Disposer(function () {\n      _this.series.removeValue(series);\n    }), this.events.on(\"lengthchanged\", series.invalidate, series, false), this.events.on(\"startchanged\", series.invalidate, series, false), this.events.on(\"endchanged\", series.invalidate, series, false) // TODO should these be disposed of ?\n    //series.events.on(\"datavalidated\", this.processSeriesDataItems, this),\n    //series.events.on(\"visibilitychanged\", this.processSeriesDataItems, this),\n    //series.events.on(\"hidden\", this.processSeriesDataItems, this)\n    ]);\n  };\n\n  Object.defineProperty(Axis.prototype, \"renderer\", {\n    /**\r\n     * @return Renderer\r\n     */\n    get: function get() {\n      return this._renderer;\n    },\n\n    /**\r\n     * An [[AxisRenderer]] to be used to render this Axis.\r\n     *\r\n     * Please note that most of the settings, related to Axis' appearance are set\r\n     * via its renderer. Not directly on the Axis.\r\n     *\r\n     * E.g.:\r\n     *\r\n     * ```TypeScript\r\n     * axis.renderer.inside = true;\r\n     * axis.renderer.minLabelPosition = 0.1;\r\n     * axis.renderer.maxLabelPosition = 0.9;\r\n     * ```\r\n     * ```JavaScript\r\n     * axis.renderer.inside = true;\r\n     * axis.renderer.minLabelPosition = 0.1;\r\n     * axis.renderer.maxLabelPosition = 0.9;\r\n     * ```\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/} for more info\r\n     * @param renderer  Renderer\r\n     */\n    set: function set(renderer) {\n      if (renderer != this._renderer) {\n        this._renderer = renderer;\n        renderer.chart = this.chart;\n        renderer.axis = this;\n        renderer.parent = this;\n        this.title.parent = this; // we add title to axis and set layout in renderer to avoid one extra container, as otherwise axis container would be used for holding renderer only\n\n        this.initRenderer();\n\n        this._disposers.push(renderer.gridContainer.events.on(\"maxsizechanged\", this.invalidate, this, false));\n\n        var ghostLabel_1 = this.renderer.labels.create();\n\n        this._disposers.push(ghostLabel_1);\n\n        ghostLabel_1.dataItem = this.dataItems.template.clone(); // just for the adapters not to fail\n\n        ghostLabel_1.text = \"L\";\n        ghostLabel_1.parent = this.renderer;\n        ghostLabel_1.shouldClone = false;\n        ghostLabel_1.fillOpacity = 0;\n        ghostLabel_1.opacity = 0;\n        ghostLabel_1.strokeOpacity = 0;\n        ghostLabel_1.interactionsEnabled = false;\n        ghostLabel_1.validate();\n        this.ghostLabel = ghostLabel_1;\n        this.events.on(\"beforedatavalidated\", function () {\n          ghostLabel_1.text = \"L\";\n        }, undefined, false);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Converts a relative position to angle. (for circular axes)\r\n   *\r\n   * @param position Position (0-1)\r\n   * @return Angle\r\n   */\n\n  Axis.prototype.positionToAngle = function (position) {\n    return this.renderer.positionToAngle(position);\n  };\n  /**\r\n   * Converts pixel coordinates to a relative position. (0-1)\r\n   *\r\n   * @param point  Coorinates (px)\r\n   * @return Position (0-1)\r\n   */\n\n\n  Axis.prototype.pointToPosition = function (point) {\n    return this.renderer.pointToPosition(point);\n  };\n  /**\r\n   * [getAnyRangePath description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   * @param start  [description]\r\n   * @param end    [description]\r\n   * @return [description]\r\n   */\n\n\n  Axis.prototype.getAnyRangePath = function (start, end) {\n    return this.renderer.getPositionRangePath(start, end);\n  };\n  /**\r\n   * Converts any positional parameter to a relative position on axis.\r\n   *\r\n   * @todo Description (review)\r\n   * @param value  Pisition\r\n   * @return Position (0-1)\r\n   */\n\n\n  Axis.prototype.anyToPosition = function (value) {\n    return 0;\n  };\n  /**\r\n   * Converts any positional parameter to a relative position on axis.\r\n   *\r\n   * @todo Description (review)\r\n   * @param value  Pisition\r\n   * @return Orientation point\r\n   */\n\n\n  Axis.prototype.anyToPoint = function (value) {\n    return {\n      x: 0,\n      y: 0,\n      angle: 0\n    };\n  };\n  /**\r\n   * [getPositionRangePath description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   * @param startPosition [description]\r\n   * @param endPosition   [description]\r\n   * @return [description]\r\n   */\n\n\n  Axis.prototype.getPositionRangePath = function (startPosition, endPosition) {\n    return this.renderer.getPositionRangePath(startPosition, endPosition);\n  };\n\n  Object.defineProperty(Axis.prototype, \"axisLength\", {\n    /**\r\n     * Actual axis length in pixels.\r\n     *\r\n     * @return Axis length (px)\r\n     */\n    get: function get() {\n      return this.renderer.axisLength;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Axis.prototype, \"cursorTooltipEnabled\", {\n    /**\r\n     * @return Display tooltip?\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"cursorTooltipEnabled\");\n    },\n\n    /**\r\n     * Indicates if axis should display a tooltip for chart's cursor.\r\n     *\r\n     * @param value Display tooltip?\r\n     */\n    set: function set(value) {\n      if (this.setPropertyValue(\"cursorTooltipEnabled\", value)) {\n        if (value && this.renderer) {\n          this.renderer.updateTooltip();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Shows Axis tooltip at specific relative position within Axis. (0-1)\r\n   *\r\n   * @param position Position (0-1)\r\n   * @param local or global position\r\n   */\n\n  Axis.prototype.showTooltipAtPosition = function (position, local) {\n    var tooltip = this._tooltip;\n\n    if (!local) {\n      position = this.toAxisPosition(position);\n    }\n\n    if (!$type.isNumber(position) || position < 0 || position > 1) {\n      tooltip.hide(0);\n      return;\n    }\n\n    var renderer = this.renderer;\n\n    if (tooltip && this.dataItems.length > 0) {\n      //@todo: think of how to solve this better\n      if (tooltip && !tooltip.parent) {\n        tooltip.parent = this.tooltipContainer;\n      }\n\n      var tooltipLocation = renderer.tooltipLocation;\n      var startPosition = this.getCellStartPosition(position);\n      var endPosition = this.getCellEndPosition(position);\n\n      if (this.tooltipPosition == \"fixed\") {\n        position = startPosition + (endPosition - startPosition) * tooltipLocation;\n      }\n\n      position = $math.fitToRange(position, this.start, this.end);\n      var startPoint = renderer.positionToPoint(startPosition);\n      var endPoint = renderer.positionToPoint(endPosition); // save values so cursor could use them\n\n      this.currentItemStartPoint = startPoint;\n      this.currentItemEndPoint = endPoint;\n\n      if (renderer.fullWidthTooltip) {\n        tooltip.width = endPoint.x - startPoint.x;\n        tooltip.height = endPoint.y - startPoint.y;\n      }\n\n      var point = renderer.positionToPoint(position);\n      var globalPoint = $utils.spritePointToSvg(point, this.renderer.line);\n      tooltip.text = this.getTooltipText(position);\n\n      if (tooltip.text) {\n        tooltip.pointTo(globalPoint);\n        tooltip.show();\n      }\n\n      if (!this.cursorTooltipEnabled) {\n        tooltip.hide(0);\n      }\n    }\n  };\n  /**\r\n   * Converts relative position (0-1) to Axis position with zoom level and\r\n   * inversed taken into account.\r\n   *\r\n   * @param position Global position (0-1)\r\n   * @return Position within Axis (0-1)\r\n   */\n\n\n  Axis.prototype.toAxisPosition = function (position) {\n    position = this.renderer.toAxisPosition(position);\n\n    if (position == undefined) {\n      return;\n    }\n\n    position = position * (this.end - this.start);\n\n    if (this.renderer.inversed) {\n      position = this.end - position;\n    } else {\n      position = this.start + position;\n    }\n\n    return position;\n  };\n  /**\r\n   * Converts position on the axis with zoom level and\r\n   * inversed taken into account to global position.\r\n   *\r\n   * @param position Axis position (0-1)\r\n   * @return Global position (0-1)\r\n   */\n\n\n  Axis.prototype.toGlobalPosition = function (position) {\n    if (this.renderer.inversed) {\n      position = this.end - position;\n    } else {\n      position = position - this.start;\n    }\n\n    return position / (this.end - this.start);\n  };\n  /**\r\n   * Returns text to be used for cursor's Axis tooltip.\r\n   *\r\n   * This is a placeholder to override for extending classes.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param position  Position coordinate (px)\r\n   * @return Label text\r\n   */\n\n\n  Axis.prototype.getTooltipText = function (position) {\n    return;\n  };\n  /**\r\n   * Updates Axis' tooltip's position and possibly size, and pointer (stem)\r\n   * place.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param pointerOrientation  Pointer (stem) orientation\r\n   * @param boundingRectangle   A rectangle for tooltip to fit within\r\n   */\n\n\n  Axis.prototype.updateTooltip = function (pointerOrientation, boundingRectangle) {\n    var tooltip = this._tooltip;\n\n    if (tooltip) {\n      tooltip.pointerOrientation = pointerOrientation;\n      tooltip.setBounds($utils.spriteRectToSvg(boundingRectangle, this.renderer.line));\n    }\n  };\n  /**\r\n   * [roundPosition description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   * @param position  Relative position\r\n   * @param location  Location on axis\r\n   * @return Rounded position\r\n   */\n\n\n  Axis.prototype.roundPosition = function (position, location) {\n    return position;\n  };\n  /**\r\n   * [getCellStartPosition description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   * @param position [description]\r\n   * @return [description]\r\n   */\n\n\n  Axis.prototype.getCellStartPosition = function (position) {\n    return position;\n  };\n  /**\r\n   * [getCellEndPosition description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   * @param position [description]\r\n   * @return [description]\r\n   */\n\n\n  Axis.prototype.getCellEndPosition = function (position) {\n    return position;\n  };\n\n  Object.defineProperty(Axis.prototype, \"axisRanges\", {\n    /**\r\n     * A list of axis ranges for this Axis.\r\n     *\r\n     * @return Axis ranges\r\n     */\n    get: function get() {\n      if (!this._axisRanges) {\n        var dataItem = this.createDataItem();\n        dataItem.isRange = true;\n        dataItem.axisFill = this.renderer.axisFills.template.clone();\n        dataItem.grid = this.renderer.grid.template.clone();\n        dataItem.tick = this.renderer.ticks.template.clone();\n        dataItem.label = this.renderer.labels.template.clone();\n        dataItem.isTemplate = true;\n        dataItem.component = this;\n        dataItem.axisFill.disabled = false;\n        dataItem.tick.disabled = false;\n        dataItem.grid.disabled = false;\n        dataItem.label.disabled = false;\n        this._axisRanges = new ListTemplate(dataItem);\n\n        this._axisRanges.events.on(\"inserted\", this.processAxisRange, this, false);\n\n        this._disposers.push(new ListDisposer(this._axisRanges));\n\n        this._disposers.push(this._axisRanges.template);\n      }\n\n      return this._axisRanges;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Decorates an axis range after it has been added to the axis range list.\r\n   *\r\n   * @param event Event\r\n   */\n\n  Axis.prototype.processAxisRange = function (event) {\n    var axisRange = event.newValue;\n    axisRange.component = this;\n    axisRange.isRange = true;\n  };\n\n  Object.defineProperty(Axis.prototype, \"axisBreaks\", {\n    /**\r\n     * A list of axis breaks on this Axis.\r\n     *\r\n     * @return Axis breaks.\r\n     */\n    get: function get() {\n      if (!this._axisBreaks) {\n        this._axisBreaks = new SortedListTemplate(this.createAxisBreak(), function (a, b) {\n          return $number.order(a.adjustedStartValue, b.adjustedStartValue);\n        });\n\n        this._axisBreaks.events.on(\"inserted\", this.processBreak, this, false);\n\n        this._disposers.push(new ListDisposer(this._axisBreaks));\n\n        this._disposers.push(this._axisBreaks.template);\n      }\n\n      return this._axisBreaks;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Creates a new axis break.\r\n   *\r\n   * @return Axis break\r\n   */\n\n  Axis.prototype.createAxisBreak = function () {\n    return new AxisBreak();\n  };\n\n  Object.defineProperty(Axis.prototype, \"series\", {\n    /**\r\n     * A list of Series currently associated with this Axis.\r\n     *\r\n     * @return Series\r\n     */\n    get: function get() {\n      if (!this._series) {\n        this._series = new List();\n      }\n\n      return this._series;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Processes Series' data items.\r\n   *\r\n   * This is a placeholder to override for extending classes.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  Axis.prototype.processSeriesDataItems = function () {};\n  /**\r\n   * Processes Series' single data item.\r\n   *\r\n   * This is a placeholder to override for extending classes.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param dataItem Data item\r\n   */\n\n\n  Axis.prototype.processSeriesDataItem = function (dataItem, axisLetter) {};\n  /**\r\n   * Post-processes Serie's data items.\r\n   *\r\n   * This is a placeholder to override for extending classes.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Axis.prototype.postProcessSeriesDataItems = function () {};\n  /**\r\n   * Post-processes Serie's single data item.\r\n   *\r\n   * This is a placeholder to override for extending classes.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param dataItem Data item\r\n   */\n\n\n  Axis.prototype.postProcessSeriesDataItem = function (dataItem) {}; //\n\n  /**\r\n   * Updates Axis based on all Series that might influence it.\r\n   *\r\n   * Called by Series after Series data is validated.\r\n   *\r\n   * This is a placeholder to override for extending classes.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Axis.prototype.updateAxisBySeries = function () {};\n  /**\r\n   * Hides unused data items.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Axis.prototype.hideUnusedDataItems = function () {\n    var _this = this; // hide all unused\n\n\n    var dataItemsIterator = this._dataItemsIterator;\n    dataItemsIterator.createNewItems = false;\n    $iter.each(dataItemsIterator.iterator(), function (dataItem) {\n      _this.validateDataElement(dataItem); // solves shrinking\n\n\n      dataItem.__disabled = true;\n    });\n    dataItemsIterator.clear();\n    dataItemsIterator.createNewItems = true;\n  };\n  /**\r\n   * Returns a Series' data item that corresponds to specific position on Axis.\r\n   *\r\n   * This is a placeholder to override for extending classes.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param series    Series\r\n   * @param position  Position (0-1)\r\n   * @param findNearest  Should axis try to find nearest tooltip if there is no data item at exact position\r\n   * @return Data item\r\n   */\n\n\n  Axis.prototype.getSeriesDataItem = function (series, position, findNearest) {\n    return;\n  };\n  /**\r\n   * Returns an angle that corresponds to specific position on axis.\r\n   *\r\n   * This is a placeholder to override for extending classes.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description (review)\r\n   * @param dataItem  Data item\r\n   * @param key       ???\r\n   * @param location  Location\r\n   * @param stackKey  ???\r\n   * @return Angle\r\n   */\n\n\n  Axis.prototype.getAngle = function (dataItem, key, location, stackKey) {\n    return;\n  };\n  /**\r\n   * [getX description]\r\n   *\r\n   * This is a placeholder to override for extending classes.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description (review)\r\n   * @param dataItem [description]\r\n   * @param key      [description]\r\n   * @param location [description]\r\n   * @param stackKey [description]\r\n   * @return [description]\r\n   */\n\n\n  Axis.prototype.getX = function (dataItem, key, location, stackKey) {\n    return;\n  };\n  /**\r\n   * [getY description]\r\n   *\r\n   * This is a placeholder to override for extending classes.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description (review)\r\n   * @param dataItem [description]\r\n   * @param key      [description]\r\n   * @param location [description]\r\n   * @param stackKey [description]\r\n   * @return [description]\r\n   */\n\n\n  Axis.prototype.getY = function (dataItem, key, location, stackKey) {\n    return;\n  };\n\n  Object.defineProperty(Axis.prototype, \"basePoint\", {\n    /**\r\n     * Coordinates of the actual axis start.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return Base point coordinates\r\n     */\n    get: function get() {\n      return {\n        x: 0,\n        y: 0\n      };\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * [dataChangeUpdate description]\r\n   *\r\n   * This is a placeholder to override for extending classes.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   */\n\n  Axis.prototype.dataChangeUpdate = function () {};\n  /**\r\n   * [dataChangeUpdate description]\r\n   *\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   */\n\n\n  Axis.prototype.seriesDataChangeUpdate = function (series) {};\n  /**\r\n   * Removes axis breaks that fall between `min` and `max` (???)\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description (review)\r\n   * @param min  Start value\r\n   * @param max  End value\r\n   * @return Spread o\r\n   */\n\n\n  Axis.prototype.adjustDifference = function (min, max) {\n    var difference = max - min;\n\n    if ($type.isNumber(difference)) {\n      $iter.eachContinue(this.axisBreaks.iterator(), function (axisBreak) {\n        var startValue = axisBreak.adjustedStartValue;\n        var endValue = axisBreak.adjustedEndValue;\n\n        if ($type.isNumber(startValue) && $type.isNumber(endValue)) {\n          // breaks are sorted, we don't need go further anymore\n          if (startValue > max) {\n            return false;\n          }\n\n          if (endValue >= min) {\n            if ($type.isNumber(startValue) && $type.isNumber(endValue)) {\n              var breakSize = axisBreak.breakSize;\n              var intersection = $math.intersection({\n                start: startValue,\n                end: endValue\n              }, {\n                start: min,\n                end: max\n              });\n\n              if (intersection) {\n                difference -= (intersection.end - intersection.start) * (1 - breakSize);\n              }\n            }\n          }\n\n          return true;\n        }\n      });\n      return difference;\n    }\n  };\n  /**\r\n   * Checks if specific value falls within a break.\r\n   *\r\n   * Returns [[AxisBreak]] the value falls into.\r\n   *\r\n   * @param value  Value to check\r\n   * @return Axis break\r\n   */\n\n\n  Axis.prototype.isInBreak = function (value) {\n    return $iter.find(this.axisBreaks.iterator(), function (axisBreak) {\n      return value >= axisBreak.adjustedStartValue && value <= axisBreak.adjustedEndValue;\n    });\n  };\n  /**\r\n   * [fixAxisBreaks description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   */\n\n\n  Axis.prototype.fixAxisBreaks = function () {\n    var _this = this;\n\n    var axisBreaks = this.axisBreaks;\n\n    if (axisBreaks.length > 0) {\n      // first make sure that startValue is <= end value\n      // This needs to make a copy of axisBreaks because it mutates the list while traversing\n      // TODO very inefficient\n      $array.each($iter.toArray(axisBreaks.iterator()), function (axisBreak) {\n        var startValue = $math.min(axisBreak.startValue, axisBreak.endValue);\n        var endValue = $math.max(axisBreak.startValue, axisBreak.endValue);\n        axisBreak.adjustedStartValue = startValue;\n        axisBreak.adjustedEndValue = endValue;\n\n        _this.axisBreaks.update(axisBreak);\n      });\n      var firstAxisBreak = axisBreaks.first;\n      var previousEndValue_1 = Math.min(firstAxisBreak.startValue, firstAxisBreak.endValue); // process breaks\n      // TODO does this need to call axisBreaks.update ?\n\n      $iter.each(this.axisBreaks.iterator(), function (axisBreak) {\n        var startValue = axisBreak.adjustedStartValue;\n        var endValue = axisBreak.adjustedEndValue; // breaks can't overlap\n        // if break starts before previous break ends\n\n        if (startValue < previousEndValue_1) {\n          startValue = previousEndValue_1;\n\n          if (endValue < previousEndValue_1) {\n            endValue = previousEndValue_1;\n          }\n        }\n\n        axisBreak.adjustedStartValue = startValue;\n        axisBreak.adjustedEndValue = endValue;\n      });\n    }\n  };\n\n  Object.defineProperty(Axis.prototype, \"startIndex\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return [description]\r\n     */\n    get: function get() {\n      return 0;\n    },\n\n    /**\r\n     * We need start/end indexes of axes to be 0 - `dataItems.length`.\r\n     *\r\n     * Yes, also for category axis, this helps to avoid jumping of categories\r\n     * while scrolling and does not do a lot of extra work as we use\r\n     * protected `_startIndex` and `_endIndex` when working with items.\r\n     *\r\n     * @hidden\r\n     */\n\n    /**\r\n     * [startIndex description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @param value [description]\r\n     */\n    set: function set(value) {},\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Axis.prototype, \"endIndex\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return [description]\r\n     */\n    get: function get() {\n      return this.dataItems.length;\n    },\n\n    /**\r\n     * [endIndex description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @param value [description]\r\n     */\n    set: function set(value) {},\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns a formatted label based on position.\r\n   *\r\n   * Individual axis types should override this method to generate a label\r\n   * that is relevant to axis type.\r\n   *\r\n   * Please note that `position` represents position within axis which may be\r\n   * zoomed and not correspond to Cursor's `position`.\r\n   *\r\n   * To convert Cursor's `position` to Axis' `position` use `toAxisPosition()` method.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v4/tutorials/tracking-cursors-position-via-api/#Tracking_Cursor_s_position} For more information about cursor tracking.\r\n   * @param position  Relative position on axis (0-1)\r\n   * @return Position label\r\n   */\n\n  Axis.prototype.getPositionLabel = function (position) {\n    return Math.round(position * 100) + \"%x\";\n  };\n\n  Object.defineProperty(Axis.prototype, \"chart\", {\n    /**\r\n     * @return Chart\r\n     */\n    get: function get() {\n      return this._chart;\n    },\n\n    /**\r\n     * A Chart this Axis belongs to.\r\n     *\r\n     * @param value  Chart\r\n     */\n    set: function set(value) {\n      this._chart = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Creates a data item for a Series range.\r\n   *\r\n   * @param series  Target Series\r\n   * @return Range data item\r\n   */\n\n  Axis.prototype.createSeriesRange = function (series) {\n    var range = this.axisRanges.create();\n    range.component = this;\n    range.axisFill = this.renderer.axisFills.template.clone();\n    range.axisFill.disabled = false;\n    range.axisFill.fillOpacity = 0;\n    range.grid = this.renderer.grid.template.clone();\n    range.grid.disabled = true;\n    range.tick = this.renderer.ticks.template.clone();\n    range.tick.disabled = true;\n    range.label = this.renderer.labels.template.clone();\n    range.label.disabled = true;\n    series.axisRanges.push(range);\n    return range;\n  };\n  /**\r\n   * Copies all properties and related data from a different instance of Axis.\r\n   *\r\n   * @param source Source Axis\r\n   */\n\n\n  Axis.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n\n    if (this.renderer) {\n      this.renderer.copyFrom(source.renderer);\n    } else {\n      if (source.renderer) {\n        this.renderer = source.renderer.clone();\n      }\n    }\n\n    if (source.title) {\n      this.title = source.title.clone();\n    }\n  };\n  /**\r\n   * Resets internal iterator.\r\n   */\n\n\n  Axis.prototype.resetIterators = function () {\n    this._dataItemsIterator.reset();\n  };\n  /**\r\n   * Processes JSON-based config before it is applied to the object.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param config  Config\r\n   */\n\n\n  Axis.prototype.processConfig = function (config) {\n    if (config) {\n      // Set up axis ranges\n      if ($type.hasValue(config.axisRanges) && $type.isArray(config.axisRanges)) {\n        for (var i = 0, len = config.axisRanges.length; i < len; i++) {\n          var range = config.axisRanges[i]; // If `series` is set, we know it's a series range\n\n          if ($type.hasValue(range[\"series\"])) {\n            if ($type.isString(range[\"series\"])) {\n              if (this.map.hasKey(range[\"series\"])) {\n                //range[\"series\"] = this.map.getKey(range[\"series\"]);\n                config.axisRanges[i] = this.createSeriesRange(this.map.getKey(range[\"series\"]));\n                delete range[\"series\"];\n                config.axisRanges[i].config = range;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    _super.prototype.processConfig.call(this, config);\n  };\n\n  Object.defineProperty(Axis.prototype, \"startLocation\", {\n    /**\r\n     * @return Location (0-1)\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"startLocation\");\n    },\n\n    /**\r\n     * Axis start location. Works on Date/Category axis, doesn't work on Value axis.\r\n     *\r\n     * * 0 - Full first cell is shown.\r\n     * * 0.5 - Half of first cell is shown.\r\n     * * 1 - None of the first cell is visible. (you probably don't want that)\r\n     *\r\n     * @param value Location (0-1)\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"startLocation\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Axis.prototype, \"endLocation\", {\n    /**\r\n     * @return Location (0-1)\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"endLocation\");\n    },\n\n    /**\r\n     * Axis end location. Works on Date/Category axis, doesn't work on Value axis.\r\n     *\r\n     * * 0 - None of the last cell is shown. (don't do that)\r\n     * * 0.5 - Half of the last cell is shown.\r\n     * * 1 - Full last cell is shown.\r\n     *\r\n     * @param value Location (0-1)\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"endLocation\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Axis;\n}(Component);\n\nexport { Axis };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"Axis\"] = Axis;\nregistry.registeredClasses[\"AxisDataItem\"] = AxisDataItem;\n/**\r\n * Add default responsive rules\r\n */\n\n/**\r\n * Disable axis tooltips.\r\n */\n\ndefaultRules.push({\n  relevant: ResponsiveBreakpoints.maybeXS,\n  state: function state(target, stateId) {\n    if (target instanceof Axis && target.tooltip) {\n      var state = target.states.create(stateId);\n      state.properties.cursorTooltipEnabled = false;\n      return state;\n    }\n\n    return null;\n  }\n});","map":null,"metadata":{},"sourceType":"module"}