{"ast":null,"code":"/**\r\n * FlowDiagramNode module\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Container } from \"../../core/Container\";\nimport { visualProperties } from \"../../core/Sprite\";\nimport { List } from \"../../core/utils/List\";\nimport { registry } from \"../../core/Registry\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $string from \"../../core/utils/String\";\nimport * as $order from \"../../core/utils/Order\";\nimport * as $number from \"../../core/utils/Number\";\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\nimport * as $object from \"../../core/utils/Object\";\nimport { LegendSettings } from \"../Legend\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Creates a node in a Flow Diagram.\r\n *\r\n * A Flow node is a block with a value, which represents its size on the\r\n * diagram.\r\n *\r\n * Nodes are connected via [[FlowLink]] elements.\r\n *\r\n * @see {@link IFlowDiagramNodeEvents} for a list of available events\r\n * @see {@link IFlowDiagramNodeAdapters} for a list of available Adapters\r\n * @important\r\n */\n\nvar FlowDiagramNode =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(FlowDiagramNode, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function FlowDiagramNode() {\n    var _this = _super.call(this) || this;\n    /**\r\n     * Settings for the appearance of the related legend items.\r\n     */\n\n\n    _this.legendSettings = new LegendSettings();\n    _this.className = \"FlowDiagramNode\";\n    _this.isMeasured = false; // TODO can this be removed ?\n\n    new InterfaceColorSet();\n    _this.draggable = true;\n    _this.inert = true;\n    _this.setStateOnChildren = true;\n\n    _this.events.on(\"positionchanged\", _this.invalidateLinks, _this, false);\n\n    _this.events.on(\"sizechanged\", _this.invalidateLinks, _this, false);\n\n    return _this; //this.events.on(\"hit\", this.handleHit, this, false);\n  }\n  /**\r\n   * @ignore\r\n   */\n\n\n  FlowDiagramNode.prototype.handleHit = function (event) {\n    if (this.isHidden || this.isHiding) {\n      this.show();\n    } else {\n      this.hide();\n    }\n  };\n  /**\r\n   * Shows hidden node.\r\n   *\r\n   * @param duration  Duration of reveal animation (ms)\r\n   * @return Animation\r\n   */\n\n\n  FlowDiagramNode.prototype.show = function (duration) {\n    var animation = _super.prototype.show.call(this, duration);\n\n    this.outgoingDataItems.each(function (dataItem) {\n      if (!dataItem.toNode || dataItem.toNode && !dataItem.toNode.isHidden) {\n        dataItem.setWorkingValue(\"value\", dataItem.getValue(\"value\"), duration);\n      }\n    });\n    this.incomingDataItems.each(function (dataItem) {\n      if (!dataItem.fromNode || dataItem.fromNode && !dataItem.fromNode.isHidden) {\n        dataItem.setWorkingValue(\"value\", dataItem.getValue(\"value\"), duration);\n      }\n    });\n    return animation;\n  };\n  /**\r\n   * Hides node.\r\n   *\r\n   * @param duration  Duration of hiding animation (ms)\r\n   * @return Animation\r\n   */\n\n\n  FlowDiagramNode.prototype.hide = function (duration) {\n    var animation = _super.prototype.hide.call(this, duration);\n\n    this.outgoingDataItems.each(function (dataItem) {\n      dataItem.setWorkingValue(\"value\", 0, duration);\n    });\n    this.incomingDataItems.each(function (dataItem) {\n      dataItem.setWorkingValue(\"value\", 0, duration);\n    });\n    return animation;\n  };\n  /**\r\n   * Marks node as invalid, for redrawal in the next update cycle.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  FlowDiagramNode.prototype.validate = function () {\n    if (!this.isDisposed()) {\n      _super.prototype.validate.call(this);\n\n      this.invalidateLinks();\n    }\n  };\n  /**\r\n   * Invalidates all links, attached to this node.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  FlowDiagramNode.prototype.invalidateLinks = function () {\n    var _this = this;\n\n    this.outgoingDataItems.each(function (dataItem) {\n      var link = dataItem.link;\n\n      if (link.colorMode == \"fromNode\") {\n        link.fill = link.dataItem.fromNode.color;\n      }\n\n      if (link.colorMode == \"gradient\") {\n        link.fill = link.gradient;\n        link.stroke = link.gradient;\n        var stop_1 = link.gradient.stops.getIndex(0);\n\n        if (stop_1) {\n          stop_1.color = _this.color;\n          link.gradient.validate();\n        }\n      }\n    });\n    this.incomingDataItems.each(function (dataItem) {\n      var link = dataItem.link;\n\n      if (link.colorMode == \"toNode\") {\n        link.fill = link.dataItem.toNode.color;\n      }\n\n      if (link.colorMode == \"gradient\") {\n        link.fill = link.gradient;\n        link.stroke = link.gradient;\n        var stop_2 = link.gradient.stops.getIndex(1);\n\n        if (stop_2) {\n          stop_2.color = _this.color;\n          link.gradient.validate();\n        }\n      }\n    });\n  };\n\n  Object.defineProperty(FlowDiagramNode.prototype, \"incomingDataItems\", {\n    /**\r\n     * List of incoming items (links).\r\n     *\r\n     * @readonly\r\n     * @return Incoming items\r\n     */\n    get: function () {\n      var _this = this;\n\n      if (!this._incomingDataItems) {\n        var incomingDataItems = new List();\n        incomingDataItems.events.on(\"inserted\", function () {\n          if (_this.chart.sortBy == \"name\") {\n            _this._incomingSorted = $iter.sort(_this._incomingDataItems.iterator(), function (x, y) {\n              return $string.order(x.fromName, y.fromName);\n            });\n          } else if (_this.chart.sortBy == \"value\") {\n            _this._incomingSorted = $iter.sort(_this._incomingDataItems.iterator(), function (x, y) {\n              return $order.reverse($number.order(x.value, y.value));\n            });\n          } else {\n            _this._incomingSorted = _this._incomingDataItems.iterator();\n          }\n        }, undefined, false);\n        this._incomingDataItems = incomingDataItems;\n      }\n\n      return this._incomingDataItems;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FlowDiagramNode.prototype, \"outgoingDataItems\", {\n    /**\r\n     * List of outgoing items (links).\r\n     *\r\n     * @readonly\r\n     * @return Outgoing items\r\n     */\n    get: function () {\n      var _this = this;\n\n      if (!this._outgoingDataItems) {\n        var outgoingDataItems = new List();\n        outgoingDataItems.events.on(\"inserted\", function () {\n          if (_this.chart.sortBy == \"name\") {\n            _this._outgoingSorted = $iter.sort(_this._outgoingDataItems.iterator(), function (x, y) {\n              return $string.order(x.fromName, y.fromName);\n            });\n          } else if (_this.chart.sortBy == \"value\") {\n            _this._outgoingSorted = $iter.sort(_this._outgoingDataItems.iterator(), function (x, y) {\n              return $order.reverse($number.order(x.value, y.value));\n            });\n          } else {\n            _this._outgoingSorted = _this._outgoingDataItems.iterator();\n          }\n        }, undefined, false);\n        this._outgoingDataItems = outgoingDataItems;\n      }\n\n      return this._outgoingDataItems;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FlowDiagramNode.prototype, \"name\", {\n    /**\r\n     * @return Name\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"name\");\n    },\n\n    /**\r\n     * A name of the node.\r\n     *\r\n     * @param value  Name\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"name\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FlowDiagramNode.prototype, \"total\", {\n    /**\r\n     * @return Value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"total\");\n    },\n\n    /**\r\n     * Sum of all incoming+outgoing link values\r\n     *\r\n     * @param value  Value\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"total\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FlowDiagramNode.prototype, \"totalIncoming\", {\n    /**\r\n     * @return Value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"totalIncoming\");\n    },\n\n    /**\r\n     * Sum of all incomming link values.\r\n     *\r\n     * @param value  Value\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"totalIncoming\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FlowDiagramNode.prototype, \"totalOutgoing\", {\n    /**\r\n     * @return Value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"totalOutgoing\");\n    },\n\n    /**\r\n     * Sum of all outgoing link values.\r\n     *\r\n     * @param value  Value\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"totalOutgoing\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FlowDiagramNode.prototype, \"color\", {\n    /**\r\n     * @return Color\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"color\");\n    },\n\n    /**\r\n     * Node's color.\r\n     *\r\n     * @param value  Color\r\n     */\n    set: function (value) {\n      this.setColorProperty(\"color\", value);\n\n      if (this._background) {\n        this._background.fill = value;\n      }\n\n      this.fill = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Creates elements in related legend container, that mimics the look of this\r\n   * Series.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param marker  Legend item container\r\n   */\n\n  FlowDiagramNode.prototype.createLegendMarker = function (marker) {\n    var w = marker.pixelWidth;\n    var h = marker.pixelHeight;\n    marker.removeChildren();\n    var column = marker.createChild(RoundedRectangle);\n    column.shouldClone = false;\n    $object.copyProperties(this, column, visualProperties);\n    column.stroke = this.fill;\n    column.copyFrom(this);\n    column.padding(0, 0, 0, 0); // if columns will have padding (which is often), legend marker will be very narrow\n\n    column.width = w;\n    column.height = h;\n    var legendDataItem = marker.dataItem;\n    legendDataItem.color = column.fill;\n    legendDataItem.colorOrig = column.fill;\n  };\n\n  Object.defineProperty(FlowDiagramNode.prototype, \"legendDataItem\", {\n    /**\r\n     * @return Data item\r\n     */\n    get: function () {\n      return this._legendDataItem;\n    },\n\n    /**\r\n     * Legend data item that corresponds to this series.\r\n     *\r\n     * @param value  Data item\r\n     */\n    set: function (value) {\n      this._legendDataItem = value;\n\n      this._legendDataItem.itemContainer.deepInvalidate();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return FlowDiagramNode;\n}(Container);\n\nexport { FlowDiagramNode };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"FlowDiagramNode\"] = FlowDiagramNode;","map":null,"metadata":{},"sourceType":"module"}