{"ast":null,"code":"/**\r\n * Handles formatting of pseudo-markup in text.\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { BaseObject } from \"../Base\";\nimport { AMElement } from \"../rendering/AMElement\";\nimport { Adapter } from \"../utils/Adapter\";\nimport { registry } from \"../Registry\";\nimport * as $strings from \"../utils/Strings\";\nimport * as $type from \"../utils/Type\";\n/**\r\n * Handles formatting of pseudo-markdown in text.\r\n *\r\n * @todo Encode < > in output\r\n * @todo Add more adapters\r\n * @important\r\n */\n\nvar TextFormatter =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(TextFormatter, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function TextFormatter() {\n    var _this = _super.call(this) || this;\n    /**\r\n     * Adapter.\r\n     */\n\n\n    _this.adapter = new Adapter(_this);\n    _this.className = \"TextFormatter\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  TextFormatter.prototype.debug = function () {};\n  /**\r\n   * Formats the text according to specifications passed in.\r\n   *\r\n   * @param text    Text to format\r\n   * @param output  Output format (svg, html)\r\n   * @return Formatted text\r\n   */\n\n\n  TextFormatter.prototype.format = function (text, output) {\n    // Apply default\n    if (!$type.hasValue(output)) {\n      output = \"svg\";\n    } // Init return value\n\n\n    var formatted = \"\"; // Replace double (escaped) square spaces with remporary codes\n\n    text = this.escape(text); // Divvy up the string by style tags\n\n    var styles = text.match(/\\[([^\\]]*?)\\]/gm);\n\n    if (!styles) {\n      // Nothing to do here - no formatting elements\n      return this.wrap(text, \"\", output);\n    } // Get pure text - no style tags\n\n\n    var texts = text.split(/\\[[^\\[\\]]*\\]/); // Go through each of the texts and wrap it in style tags\n\n    for (var i = 0, len = texts.length; i < len; i++) {\n      // Get text bit\n      var t = texts[i]; // Check if string is empty\n\n      if (t === \"\") {\n        continue;\n      } // Run through an adapter\n\n\n      t = this.adapter.apply(\"chunk\", t); // Get related style\n\n      var s = \"\";\n\n      if (i > 0) {\n        s = styles[i - 1].replace('[', '').replace(']', '');\n      } // Wrap text in tag\n\n\n      formatted += this.wrap(t, s, output);\n    } // Replace placeholders back\n\n\n    formatted = this.unescape(formatted); // Return result\n\n    return this.cleanUp(formatted);\n  };\n  /**\r\n   * Replaces brackets with temporary placeholders.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param text  Input text\r\n   * @return Escaped text\r\n   */\n\n\n  TextFormatter.prototype.escape = function (text) {\n    return text.replace(/\\[\\[/g, registry.getPlaceholder(\"1\")).replace(/([^\\/]{1})\\]\\]/g, \"$1\" + registry.getPlaceholder(\"2\")).replace(/\\{\\{/g, registry.getPlaceholder(\"3\")).replace(/\\}\\}/g, registry.getPlaceholder(\"4\")).replace(/\\'\\'/g, registry.getPlaceholder(\"5\"));\n  };\n  /**\r\n   * Replaces placeholders back to brackets.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param text  Escaped text\r\n   * @return Unescaped text\r\n   */\n\n\n  TextFormatter.prototype.unescape = function (text) {\n    return text.replace(new RegExp(registry.getPlaceholder(\"1\"), \"g\"), \"[[\").replace(new RegExp(registry.getPlaceholder(\"2\"), \"g\"), \"]]\").replace(new RegExp(registry.getPlaceholder(\"3\"), \"g\"), \"{{\").replace(new RegExp(registry.getPlaceholder(\"4\"), \"g\"), \"}}\").replace(new RegExp(registry.getPlaceholder(\"5\"), \"g\"), \"'\");\n  };\n  /**\r\n   * Cleans up the text text for leftover double square brackets.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param text  Input text\r\n   * @return Cleaned up text\r\n   */\n\n\n  TextFormatter.prototype.cleanUp = function (text) {\n    return text.replace(/\\[\\[/g, \"[\").replace(/\\]\\]/g, \"]\").replace(/\\{\\{/g, \"{\").replace(/\\}\\}/g, \"}\").replace(/\\'\\'/g, \"'\");\n  };\n  /**\r\n   * Wraps text into corresponding tags.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param text   Text to wrap\r\n   * @param style  Styles\r\n   * @param output  Format to output in (svg, html)\r\n   * @return Formatted string\r\n   */\n\n\n  TextFormatter.prototype.wrap = function (text, style, output) {\n    if (style === \"\" || style === \"/\") {\n      //return text;\n      style = \"\";\n    }\n\n    switch (output) {\n      case \"html\":\n        return this.wrapHtml(text, this.translateStyleShortcuts(style));\n\n      default:\n        return this.wrapSvg(text, this.translateStyleShortcuts(style));\n    }\n  };\n  /**\r\n   * Wraps text in styled SVG tag.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param text   Text to wrap\r\n   * @param style  Style property\r\n   * @return Formatted tag\r\n   */\n\n\n  TextFormatter.prototype.wrapSvg = function (text, style) {\n    if (style === \"\") {\n      return \"<tspan>\" + text + \"</tspan>\";\n    } else {\n      return \"<tspan style='\" + style + \"'>\" + text + \"</tspan>\";\n    }\n  };\n  /**\r\n   * Returns an SVG `<tspan>` element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param text   Text\r\n   * @param style  Style\r\n   * @return Element\r\n   */\n\n\n  TextFormatter.prototype.getSvgElement = function (text, style) {\n    var element = new AMElement(\"tspan\");\n    element.textContent = text;\n\n    if (style) {\n      element.node.setAttribute(\"style\", style);\n    }\n\n    return element;\n  };\n  /**\r\n   * Wraps text in HTML <span> tag.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param text   Text to wrap\r\n   * @param style  Style property\r\n   * @return Formatted tag\r\n   * @todo Translate SVG styles into HTML ones\r\n   */\n\n\n  TextFormatter.prototype.wrapHtml = function (text, style) {\n    if (style === \"\") {\n      return \"<span>\" + text + \"</span>\";\n    } else {\n      return \"<span style='\" + this.styleSvgToHtml(style) + \"'>\" + text + \"</span>\";\n    }\n  };\n  /**\r\n   * Returns an HTML `<span>` element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param text   Text/HTML\r\n   * @param style  Style definition\r\n   * @return HTML element\r\n   */\n\n\n  TextFormatter.prototype.getHtmlElement = function (text, style) {\n    var element = document.createElement(\"span\");\n    element.innerHTML = text;\n\n    if (style) {\n      element.setAttribute(\"style\", style);\n    }\n\n    return element;\n  };\n  /**\r\n   * Trabslates SVG CSS into HTML CSS.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param style  SVG CSS\r\n   * @return HTML CSS\r\n   * @todo Implement actual translation\r\n   */\n\n\n  TextFormatter.prototype.styleSvgToHtml = function (style) {\n    style = style.replace(/fill:/, \"color:\");\n    return style;\n  };\n  /**\r\n   * Translates style shortcuts into full styles, i.e.:\r\n   * \"bold\" => \"font-weight: bold\"\r\n   * \"#f00\" => \"fill: #f00\"\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param style  Untranslated style\r\n   * @return Translated style\r\n   * @todo Implement actual translation\r\n   */\n\n\n  TextFormatter.prototype.translateStyleShortcuts = function (style) {\n    if (style == \"\" || style == \"[ ]\") {\n      return \"\";\n    }\n\n    var cached = registry.getCache(\"translateStyleShortcuts_\" + style);\n\n    if (cached) {\n      return cached;\n    } // Get style parts\n\n\n    var b = style.match(/([\\w\\-]*:[\\s]?[^;\\s\\]]*)|(\\#[\\w]{1,6})|([\\w]+)|(\\/)/gi); // Empty?\n\n    if (!b) {\n      return style;\n    } // Check each part\n\n\n    for (var i = 0; i < b.length; i++) {\n      if (b[i].match(/^bold$/i)) {\n        // Bold\n        b[i] = \"font-weight:\" + b[i];\n      } else if (b[i] == \"/\") {\n        // Just closing tag\n        // Do nothing\n        b[i] = \"\";\n      } else if (!b[i].match(/:/)) {\n        // Color\n        b[i] = \"fill:\" + b[i];\n      }\n    }\n\n    var res = b.join(';');\n    registry.setCache(\"translateStyleShortcuts_\" + style, res);\n    return res;\n  };\n  /**\r\n   * Splits string into chunks. (style blocks, quoted blocks, regular blocks)\r\n   *\r\n   * If the second parameter `quotedBlocks` is set to `true` this method will\r\n   * also single out text blocks enclosed within single quotes that no\r\n   * formatting should be applied to, and they should be displayed as is.\r\n   *\r\n   * Default for the above is `false`, so that you can use single quote in text\r\n   * without escaping it.\r\n   *\r\n   * If enabled, single quotes can be escaped by doubling it - adding two\r\n   * single quotes, which will be replaced by a one single quote in the final\r\n   * output.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param text          Text to chunk\r\n   * @param quotedBlocks  Use quoted blocks\r\n   * @param noFormatting  Formatting blocks will be treated as regular text\r\n   * @return Array of string chunks\r\n   */\n\n\n  TextFormatter.prototype.chunk = function (text, quotedBlocks, noFormatting) {\n    if (quotedBlocks === void 0) {\n      quotedBlocks = false;\n    }\n\n    if (noFormatting === void 0) {\n      noFormatting = false;\n    } // Init result\n\n\n    var res = []; // Replace double (escaped) square spaces and quotes with temporary codes\n\n    text = this.escape(text); // Deal with style blocks\n\n    var chunks = quotedBlocks ? text.split(\"'\") : [text];\n\n    for (var i = 0; i < chunks.length; i++) {\n      var chunk = chunks[i]; // Empty?\n\n      if (chunk === \"\") {\n        continue;\n      }\n\n      if (i % 2 === 0) {\n        // Text outside quotes\n        // Parse for style blocks which are \"text\" chunks, the rest chunks are\n        // \"value\"\n        chunk = chunk.replace(/\\]\\[/g, \"]\" + $strings.PLACEHOLDER + \"[\");\n        chunk = chunk.replace(/\\[\\]/g, \"[ ]\");\n        var chunks2 = chunk.split(/[\\[\\]]+/);\n\n        for (var i2 = 0; i2 < chunks2.length; i2++) {\n          var chunk2 = this.cleanUp(this.unescape(chunks2[i2])); // Placeholder?\n\n          if (chunk2 === $strings.PLACEHOLDER) {\n            continue;\n          } // Empty?\n\n\n          if (chunk2 === \"\") {\n            continue;\n          } // Block or value\n\n\n          if (i2 % 2 === 0) {\n            res.push({\n              \"type\": \"value\",\n              \"text\": this.adapter.apply(\"chunk\", chunk2)\n            });\n          } else {\n            res.push({\n              \"type\": noFormatting ? \"value\" : \"format\",\n              \"text\": \"[\" + chunk2 + \"]\"\n            });\n          }\n        }\n      } else {\n        // A text within doublequotes\n        // All chunks are \"text\"\n        var chunks2 = chunk.split(/[\\[\\]]+/);\n\n        for (var i2 = 0; i2 < chunks2.length; i2++) {\n          var chunk2 = this.cleanUp(this.unescape(chunks2[i2])); // Empty?\n\n          if (chunk2 === \"\") {\n            continue;\n          } // Block or text\n\n\n          if (i2 % 2 === 0) {\n            res.push({\n              \"type\": \"text\",\n              \"text\": chunk2\n            });\n          } else if (this.isImage(chunk2)) {\n            res.push({\n              \"type\": \"image\",\n              \"text\": \"[\" + chunk2 + \"]\"\n            });\n          } else {\n            res.push({\n              \"type\": \"format\",\n              \"text\": \"[\" + chunk2 + \"]\"\n            });\n          }\n        }\n      }\n    }\n\n    return res;\n  };\n  /**\r\n   * Checks if supplied format contains image information and should be\r\n   * formatted as such.\r\n   * I.e.: `[img: myImage.png]`\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param text  Format\r\n   * @return `true` if it is an image\r\n   */\n\n\n  TextFormatter.prototype.isImage = function (text) {\n    return text.match(/img[ ]?:/) ? true : false;\n  };\n\n  return TextFormatter;\n}(BaseObject);\n\nexport { TextFormatter };\nvar formatter;\n/**\r\n * Returns the global instance of [[TextFormatter]].\r\n *\r\n * All classes and instances should reuse this universal text formatter,\r\n * rather than create their own instance of it.\r\n */\n\nexport function getTextFormatter() {\n  if (formatter == null) {\n    formatter = new TextFormatter();\n  }\n\n  return formatter;\n}\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"TextFormatter\"] = TextFormatter;","map":null,"metadata":{},"sourceType":"module"}