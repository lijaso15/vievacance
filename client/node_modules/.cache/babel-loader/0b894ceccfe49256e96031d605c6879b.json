{"ast":null,"code":"/**\r\n * FlowDiagram module.\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Chart, ChartDataItem } from \"../Chart\";\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\nimport { DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\nimport { Container } from \"../../core/Container\";\nimport { registry } from \"../../core/Registry\";\nimport { FlowDiagramNode } from \"../elements/FlowDiagramNode\";\nimport { FlowDiagramLink } from \"../elements/FlowDiagramLink\";\nimport { LinearGradientModifier } from \"../../core/rendering/fills/LinearGradientModifier\";\nimport { ColorSet } from \"../../core/utils/ColorSet\";\nimport { toColor, Color } from \"../../core/utils/Color\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $number from \"../../core/utils/Number\";\nimport * as $order from \"../../core/utils/Order\";\nimport { Disposer } from \"../../core/utils/Disposer\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n//@todo rearange notes after dragged\n\n/**\r\n * Defines a [[DataItem]] for [[FlowDiagram]].\r\n *\r\n * @see {@link DataItem}\r\n */\n\nvar FlowDiagramDataItem =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(FlowDiagramDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function FlowDiagramDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"FlowDiagramDataItem\";\n    _this.values.value = {};\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  Object.defineProperty(FlowDiagramDataItem.prototype, \"fromName\", {\n    /**\r\n     * @return name\r\n     */\n    get: function () {\n      return this.properties.fromName;\n    },\n\n    /**\r\n     * Source node's name.\r\n     *\r\n     * @param value  Name\r\n     */\n    set: function (value) {\n      this.setProperty(\"fromName\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FlowDiagramDataItem.prototype, \"toName\", {\n    /**\r\n     * @return name\r\n     */\n    get: function () {\n      return this.properties.toName;\n    },\n\n    /**\r\n     * Destination node's name.\r\n     *\r\n     * @param value  Name\r\n     */\n    set: function (value) {\n      this.setProperty(\"toName\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FlowDiagramDataItem.prototype, \"color\", {\n    /**\r\n     * @return color\r\n     */\n    get: function () {\n      return this.properties.color;\n    },\n\n    /**\r\n     * Node color\r\n     *\r\n     * @param value  Name\r\n     */\n    set: function (value) {\n      this.setProperty(\"color\", toColor(value));\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FlowDiagramDataItem.prototype, \"value\", {\n    /**\r\n     * @return Value\r\n     */\n    get: function () {\n      return this.values.value.value;\n    },\n\n    /**\r\n     * Link's value.\r\n     *\r\n     * @param value  Value\r\n     */\n    set: function (value) {\n      this.setValue(\"value\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FlowDiagramDataItem.prototype, \"link\", {\n    /**\r\n     * A visual element, representing link between the source and target nodes.\r\n     *\r\n     * Link's actual thickness will be determined by `value` of this link and\r\n     * `value` of the source node.\r\n     *\r\n     * @readonly\r\n     * @return Link element\r\n     */\n    get: function () {\n      var _this = this;\n\n      if (!this._link) {\n        var link_1 = this.component.links.create();\n        this._link = link_1;\n        this.addSprite(link_1);\n\n        this._disposers.push(new Disposer(function () {\n          if (_this.component) {\n            _this.component.links.removeValue(link_1);\n          }\n        }));\n      }\n\n      return this._link;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return FlowDiagramDataItem;\n}(ChartDataItem);\n\nexport { FlowDiagramDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Creates a Pie chart\r\n * @see {@link IFlowDiagramEvents} for a list of available Events\r\n * @see {@link IFlowDiagramAdapters} for a list of available Adapters\r\n * @important\r\n */\n\nvar FlowDiagram =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(FlowDiagram, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function FlowDiagram() {\n    var _this = // Init\n    _super.call(this) || this;\n    /**\r\n     * A Color Set to use when applying/generating colors for each subsequent\r\n     * node.\r\n     */\n\n\n    _this.colors = new ColorSet();\n    _this.className = \"FlowDiagram\";\n    _this.nodePadding = 20;\n    _this.sortBy = \"none\";\n    _this.sequencedInterpolation = true;\n    _this.colors.step = 2;\n    _this.minNodeSize = 0.02;\n\n    var linksContainer = _this.chartContainer.createChild(Container);\n\n    linksContainer.shouldClone = false;\n    linksContainer.layout = \"none\";\n    linksContainer.isMeasured = false;\n    _this.linksContainer = linksContainer;\n\n    var nodesContainer = _this.chartContainer.createChild(Container);\n\n    nodesContainer.shouldClone = false;\n    nodesContainer.layout = \"none\";\n    nodesContainer.isMeasured = false;\n    _this.nodesContainer = nodesContainer; // this data item holds sums, averages, etc\n\n    _this.dataItem = _this.createDataItem();\n    _this.dataItem.component = _this; // Apply theme\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  FlowDiagram.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this.dataItem.dispose();\n  };\n  /**\r\n   * (Re)validates chart's data, effectively causing the chart to redraw.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  FlowDiagram.prototype.validateData = function () {\n    var _this = this;\n\n    if (this._parseDataFrom == 0) {\n      this.nodes.clear();\n    }\n\n    this.sortNodes();\n    this.colors.reset();\n\n    _super.prototype.validateData.call(this);\n\n    var sum = 0;\n    var count = 0;\n    var low;\n    var high; // build blocks\n\n    $iter.each(this.dataItems.iterator(), function (dataItem) {\n      var fromName = dataItem.fromName;\n\n      if (fromName) {\n        var node = _this.nodes.getKey(fromName);\n\n        if (!node) {\n          node = _this.nodes.create(fromName);\n          node.name = fromName;\n          node.chart = _this;\n          node.dataItem = dataItem;\n        }\n\n        dataItem.fromNode = node;\n        dataItem.fromNode.outgoingDataItems.push(dataItem);\n      }\n\n      var toName = dataItem.toName;\n\n      if (toName) {\n        var node = _this.nodes.getKey(toName);\n\n        if (!node) {\n          node = _this.nodes.create(toName);\n          node.name = toName;\n          node.chart = _this;\n          node.dataItem = dataItem;\n        }\n\n        dataItem.toNode = node;\n        dataItem.toNode.incomingDataItems.push(dataItem);\n      }\n\n      if (!dataItem.fromNode) {\n        var strokeModifier = new LinearGradientModifier();\n        strokeModifier.opacities = [0, 1];\n        dataItem.link.strokeModifier = strokeModifier;\n      }\n\n      if (!dataItem.toNode) {\n        var fillModifier = new LinearGradientModifier();\n        fillModifier.opacities = [1, 0];\n        dataItem.link.strokeModifier = fillModifier;\n      }\n\n      var value = dataItem.value;\n\n      if ($type.isNumber(value)) {\n        sum += value;\n        count++;\n\n        if (low > value || !$type.isNumber(low)) {\n          low = value;\n        }\n\n        if (high < value || !$type.isNumber(high)) {\n          high = value;\n        }\n      }\n    });\n    var key = \"value\";\n    this.dataItem.setCalculatedValue(key, high, \"high\");\n    this.dataItem.setCalculatedValue(key, low, \"low\");\n    this.dataItem.setCalculatedValue(key, sum, \"sum\");\n    this.dataItem.setCalculatedValue(key, sum / count, \"average\");\n    this.dataItem.setCalculatedValue(key, count, \"count\");\n    $iter.each(this.nodes.iterator(), function (strNode) {\n      var node = strNode[1];\n\n      if (node.fill instanceof Color) {\n        node.color = node.fill;\n      }\n\n      if (node.color == undefined) {\n        node.color = _this.colors.next();\n      }\n\n      if (node.dataItem.color != undefined) {\n        node.color = node.dataItem.color;\n      }\n\n      if (!node.dataItem.visible) {\n        node.hide(0);\n      }\n\n      _this.getNodeValue(node);\n    });\n    this.sortNodes();\n    this.feedLegend();\n  };\n  /**\r\n   * [handleDataItemWorkingValueChange description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  FlowDiagram.prototype.handleDataItemWorkingValueChange = function (dataItem, name) {\n    this.invalidate();\n  };\n  /**\r\n   * Sorts nodes by either their values or names, based on `sortBy` setting.\r\n   */\n\n\n  FlowDiagram.prototype.sortNodes = function () {\n    if (this.sortBy == \"name\") {\n      this._sorted = this.nodes.sortedIterator();\n    } else if (this.sortBy == \"value\") {\n      this._sorted = $iter.sort(this.nodes.iterator(), function (x, y) {\n        return $order.reverse($number.order(x[1].total, y[1].total));\n      });\n    } else {\n      this._sorted = this.nodes.iterator();\n    }\n  };\n  /**\r\n   * Updates a cummulative value of the node.\r\n   *\r\n   * A node's value is determined by summing values of all of the incoming\r\n   * links or all of the outgoing links, whichever results in bigger number.\r\n   *\r\n   * @param node  Node value\r\n   */\n\n\n  FlowDiagram.prototype.getNodeValue = function (node) {\n    // todo: totalIncomming totalOutgoing, total\n    var incomingTotal = 0;\n    var outgoingTotal = 0;\n    $iter.each(node.incomingDataItems.iterator(), function (dataItem) {\n      var value = dataItem.getWorkingValue(\"value\");\n\n      if ($type.isNumber(value)) {\n        incomingTotal += value;\n      }\n    });\n    $iter.each(node.outgoingDataItems.iterator(), function (dataItem) {\n      var value = dataItem.getWorkingValue(\"value\");\n\n      if ($type.isNumber(value)) {\n        outgoingTotal += value;\n      }\n    });\n    node.total = incomingTotal + outgoingTotal;\n    node.totalIncoming = incomingTotal;\n    node.totalOutgoing = outgoingTotal;\n  };\n\n  ;\n  /**\r\n   * Changes the sort type of the nodes.\r\n   *\r\n   * This will actually reshuffle nodes using nice animation.\r\n   */\n\n  FlowDiagram.prototype.changeSorting = function () {\n    this.sortNodes();\n  };\n  /**\r\n   * Sets defaults that instantiate some objects that rely on parent, so they\r\n   * cannot be set in constructor.\r\n   */\n\n\n  FlowDiagram.prototype.applyInternalDefaults = function () {\n    _super.prototype.applyInternalDefaults.call(this); // Add a default screen reader title for accessibility\n    // This will be overridden in screen reader if there are any `titles` set\n\n\n    if (!$type.hasValue(this.readerTitle)) {\n      this.readerTitle = this.language.translate(\"Flow diagram\");\n    }\n  };\n  /**\r\n   * Creates and returns a new data item.\r\n   *\r\n   * @return Data item\r\n   */\n\n\n  FlowDiagram.prototype.createDataItem = function () {\n    return new FlowDiagramDataItem();\n  };\n\n  Object.defineProperty(FlowDiagram.prototype, \"nodePadding\", {\n    /**\r\n     * @return Padding (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"nodePadding\");\n    },\n\n    /**\r\n     * Padding for node square in pixels.\r\n     *\r\n     * Padding will add extra space around node's name label.\r\n     *\r\n     * @param value Padding (px)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"nodePadding\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FlowDiagram.prototype, \"sortBy\", {\n    /**\r\n     * @returns Node sorting\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"sortBy\");\n    },\n\n    /**\r\n     * Sort nodes by \"name\" or \"value\" or do not sort at all. If not sorted, nodes will appear in the same order as they are in the data.\r\n     * @default \"none\"\r\n     * @param value  Node sorting\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"sortBy\", value);\n      this.changeSorting();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FlowDiagram.prototype, \"minNodeSize\", {\n    /**\r\n     * @returns min node size\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"minNodeSize\");\n    },\n\n    /**\r\n     * Sometimes nodes can get very small if their value is little. With this setting you\r\n     * can set min size of a node (this is relative value from the total size of all nodes)\r\n     * @default 0.02\r\n     * @param value  Node sorting\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"minNodeSize\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FlowDiagram.prototype, \"nodes\", {\n    /**\r\n     * A list of chart's nodes.\r\n     *\r\n     * @param {DictionaryTemplate<string, this[\"_node\"]>}\r\n     */\n    get: function () {\n      if (!this._nodes) {\n        var template = this.createNode();\n        template.events.on(\"hit\", function (event) {\n          event.target.handleHit(event);\n        });\n        this._nodes = new DictionaryTemplate(template);\n\n        this._disposers.push(new DictionaryDisposer(this._nodes));\n      }\n\n      return this._nodes;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  FlowDiagram.prototype.createNode = function () {\n    var node = new FlowDiagramNode();\n\n    this._disposers.push(node);\n\n    return node;\n  };\n\n  Object.defineProperty(FlowDiagram.prototype, \"links\", {\n    /**\r\n     * A list of chart's links.\r\n     *\r\n     * @param {ListTemplate<this[\"_link\"]>}\r\n     */\n    get: function () {\n      if (!this._links) {\n        this._links = new ListTemplate(this.createLink());\n\n        this._disposers.push(new ListDisposer(this._links));\n      }\n\n      return this._links;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  FlowDiagram.prototype.createLink = function () {\n    var link = new FlowDiagramLink();\n\n    this._disposers.push(link);\n\n    return link;\n  };\n  /**\r\n   * Setups the legend to use the chart's data.\r\n   * @ignore\r\n   */\n\n\n  FlowDiagram.prototype.feedLegend = function () {\n    var legend = this.legend;\n\n    if (legend) {\n      var legendData_1 = [];\n      this.nodes.each(function (key, node) {\n        legendData_1.push(node);\n      });\n      legend.data = legendData_1;\n      legend.dataFields.name = \"name\";\n    }\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  FlowDiagram.prototype.disposeData = function () {\n    _super.prototype.disposeData.call(this);\n\n    this.nodes.clear();\n  };\n\n  return FlowDiagram;\n}(Chart);\n\nexport { FlowDiagram };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"FlowDiagram\"] = FlowDiagram;","map":null,"metadata":{},"sourceType":"module"}