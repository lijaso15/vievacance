{"ast":null,"code":"/**\r\n * Module contains functionality related to [[Sprite]] states.\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { BaseObject } from \"./Base\";\nimport { registry } from \"./Registry\";\nimport { Adapter } from \"./utils/Adapter\";\nimport { List, ListDisposer } from \"./utils/List\";\nimport { toColor } from \"./utils/Color\";\nimport { percent } from \"./utils/Percent\";\nimport * as $utils from \"./utils/Utils\";\nimport * as $ease from \"./utils/Ease\";\nimport * as $object from \"./utils/Object\";\nimport * as $type from \"./utils/Type\";\n/**\r\n * Defines a state for [[Sprite]].\r\n *\r\n * A \"state\" is a special object that has all the same properties as the\r\n * [[Sprite]] of the same type, and which can be used to quickly apply a set\r\n * of property values. (set state)\r\n *\r\n * When [[Sprite]] (or any object that extends Sprite) is created it creates a\r\n * \"default\" state. You can modify the \"default\" state so that when the Sprite\r\n * returns to default state certain properties are added.\r\n *\r\n * Default state can be accessed using Sprite's `defaultState` getter.\r\n *\r\n * ```TypeScript\r\n * sprite.defaultState.properties.fillOpacity = 0.5;\r\n * ```\r\n * ```JavaScript\r\n * sprite.defaultState.properties.fillOpacity = 0.5;\r\n * ```\r\n * ```JSON\r\n * {\r\n *   // ...\r\n *   \"defaultState\": {\r\n *     \"properties\": {\r\n *       \"fillOpacity\": 0.5\r\n *     }\r\n *   }\r\n * }\r\n * ```\r\n *\r\n * If Sprite is \"hoverable\", it automatically adds a \"hover\" state, which is\r\n * applied when it has a cursor over it.\r\n *\r\n * ```TypeScript\r\n * let hoverstate = sprite.states.create(\"hover\");\r\n * hoverstate.properties.fillOpacity = 1;\r\n * ```\r\n * ```JavaScript\r\n * var hoverstate = sprite.states.create(\"hover\");\r\n * hoverstate.properties.fillOpacity = 1;\r\n * ```\r\n * ```JSON\r\n * {\r\n *   // ...\r\n *   \"states\": {\r\n *     \"hover\": {\r\n *       \"properties\": {\r\n *         \"fillOpacity\": 0.5\r\n *       }\r\n *     }\r\n *   }\r\n * }\r\n * ```\r\n *\r\n * The above will automatically apply \"hover\" state when the Sprite is hovered,\r\n * thus will set its `fillOpacity` property to 1, and will reset it to 0.5 when\r\n * it's no longer hovered.\r\n *\r\n * Every object that inherits from [[Sprite]] can and will add their own\r\n * properties to the available list.\r\n *\r\n * User can create their own states, and apply them as needed:\r\n *\r\n * ```TypeScript\r\n * let myCustomState = sprite.states.create(\"mystate\");\r\n * myCustomState.properties.fillOpacity = 0.5;\r\n * myCustomState.properties.strokeOpacity = 0.8;\r\n * sprite.setState(\"mystate\");\r\n * ```\r\n * ```JavaScript\r\n * var myCustomState = sprite.states.create(\"mystate\");\r\n * myCustomState.properties.fillOpacity = 0.5;\r\n * myCustomState.properties.strokeOpacity = 0.8;\r\n * sprite.setState(\"mystate\");\r\n * ```\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/states/}\r\n * @important\r\n */\n\nvar SpriteState =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(SpriteState, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function SpriteState() {\n    var _this = // Init\n    _super.call(this) || this;\n    /**\r\n     * Holds Adapter.\r\n     */\n\n\n    _this.adapter = new Adapter(_this);\n    /**\r\n     * Duration of the transition to this state. 0 means instantenous transition.\r\n     * Any number means the [[Sprite]] will transit smoothly to this state,\r\n     * animating all animatable properties.\r\n     *\r\n     * @default 0\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations\r\n     */\n\n    _this.transitionDuration = 0;\n    /**\r\n     * Easing function to use when transitioning to this state.\r\n     *\r\n     * @default cubicOut\r\n     * @see {@link Ease}\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations\r\n     */\n\n    _this.transitionEasing = $ease.cubicOut;\n    /**\r\n     * Collection of properties and their values that should be applied to [[Sprite]]\r\n     * when switching to this State.\r\n     *\r\n     * The property values set on a [[SpriteState]] will override the ones set\r\n     * directly on a [[Sprite]].\r\n     */\n\n    _this.properties = {};\n    /**\r\n     * A collection of key/value pairs that can be used to bind specific Sprite\r\n     * properties to [[DataItem]].\r\n     *\r\n     * For example: `fill` property can be bound to `myCustomColor` field in\r\n     * DataItem. The Sprite will automatically get the value for `fill` from its\r\n     * DataItem.\r\n     *\r\n     * SpriteState-specific binding will override binding set directly on\r\n     * [[Sprite]]. I.e. you can make Sprite use different fill color on hover by\r\n     * adding a `fill` binding to a different DataItem key for Sprite's \"hover\"\r\n     * state object.\r\n     *\r\n     * @see {@link Sprite}\r\n     */\n\n    _this.propertyFields = {}; //public propertyFields: Dictionary<keyof this[\"_properties\"], string> = new Dictionary<keyof this[\"_properties\"], string>();;\n\n    /**\r\n     * A list of [[Filter]] elements to be applied to the relative [[Sprite]]\r\n     * when switching to this State.\r\n     *\r\n     * @param {List}\r\n     */\n\n    _this.filters = new List();\n    /**\r\n     * Identifies if this object is a \"template\" and should not be treated as\r\n     * real object that is drawn or actually used in the chart.\r\n     */\n\n    _this.isTemplate = false;\n    _this.className = \"SpriteState\"; // Make filter list disposable\n\n    _this._disposers.push(new ListDisposer(_this.filters)); // Decorate adapter with events so that we can apply its settings whenever\n    // it is modified\n\n\n    _this.adapter.events.on(\"inserted\", function (ev) {\n      _this[ev.newValue.key] = _this[ev.newValue.key];\n    }, undefined, false);\n\n    _this.adapter.events.on(\"removed\", function (ev) {\n      _this[ev.newValue.key] = _this[ev.newValue.key];\n    }, undefined, false); // Apply theme\n\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Returns [[Sprite]] element's property value.\r\n   *\r\n   * Will check if there are any bindings with [[DataItem]] and if there are\r\n   * any method callbacks set up for the specific property.\r\n   *\r\n   * @param propertyName  Property name\r\n   * @return Property value\r\n   */\n\n\n  SpriteState.prototype.getPropertyValue = function (propertyName) {\n    var propValue = this.properties[propertyName];\n    var sprite = this.sprite;\n\n    if (sprite) {\n      var fieldName = this.propertyFields[propertyName];\n\n      if ($type.hasValue(fieldName)) {\n        if (sprite.dataItem) {\n          propValue = sprite.dataItem.dataContext[fieldName];\n        }\n      } // Apply adapters\n      // If the value itself is undefined, we're going to pass in Sprite's\n      // value to adapters\n      // @todo get rid of <any>\n\n\n      if (!$type.hasValue(propValue)) {\n        var spriteValue = sprite.getPropertyValue(propertyName);\n        propValue = this.adapter.apply(propertyName, sprite.getPropertyValue(propertyName));\n\n        if (propValue == spriteValue) {\n          propValue = undefined;\n        }\n      } else {\n        propValue = this.adapter.apply(propertyName, propValue);\n      }\n      /*let method = this.propertyMethods.getKey(propertyName);\r\n      if (method) {\r\n          propValue = method(sprite, propertyName);\r\n      }*/\n\n    }\n\n    return propValue;\n  };\n  /**\r\n   * Copies all property and style values from another [[SpriteState]] object.\r\n   *\r\n   * @param source  Source [[SpriteState]]\r\n   */\n\n\n  SpriteState.prototype.copyFrom = function (source) {\n    if (source && source != this) {\n      this.transitionDuration = source.transitionDuration;\n      this.transitionEasing = source.transitionEasing;\n      $utils.copyProperties(source.properties, this.properties);\n      $utils.copyProperties(source.propertyFields, this.propertyFields);\n      this.filters.copyFrom(source.filters);\n      this.adapter.copyFrom(source.adapter);\n    }\n  };\n\n  Object.defineProperty(SpriteState.prototype, \"allValues\", {\n    /**\r\n     * Returns all values that should be applied by the SpriteState.\r\n     *\r\n     * It takes adapters into account.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return Properties\r\n     * @todo Add adapter values\r\n     * @todo proper type this[\"_properties\"]\r\n     */\n    get: function () {\n      var _this = this; // Init return value\n\n\n      var res = {}; // Apply adapters to all values\n\n      $object.each(this.properties, function (prop, value) {\n        res[prop] = _this.getPropertyValue(prop);\n      }); // Cycle through all adapters and add values for missing properties\n\n      var keys = this.adapter.keys();\n      $object.each(keys, function (_x, prop) {\n        var value = _this.getPropertyValue(prop);\n\n        res[prop] = value;\n      }); // Cycle through all property fileds and add values for missing properties\n\n      var propertyFields = this.propertyFields;\n      $object.each(propertyFields, function (prop) {\n        var value = _this.getPropertyValue(prop);\n\n        res[prop] = value;\n      });\n      return res;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Resets the State to initial state - no values or Filters applied.\r\n   */\n\n  SpriteState.prototype.reset = function () {\n    this.properties = {};\n    this.filters.clear();\n  };\n  /**\r\n   * Processes JSON-based config before it is applied to the object.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param config  Config\r\n   */\n\n\n  SpriteState.prototype.processConfig = function (config) {\n    if ($type.hasValue(config) && $type.hasValue(config[\"properties\"])) {\n      $object.each(config[\"properties\"], function (key, value) {\n        if ($type.isString(value)) {\n          if (value.match(/^[0-9.\\-]+\\%$/)) {\n            config[\"properties\"][key] = percent($type.toNumber(value));\n          } else if (value.match(/^\\#[0-9abcdef]{3,}$/i)) {\n            config[\"properties\"][key] = toColor(value);\n          }\n        }\n      });\n    }\n\n    _super.prototype.processConfig.call(this, config);\n  };\n\n  return SpriteState;\n}(BaseObject);\n\nexport { SpriteState };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"SpriteState\"] = SpriteState;","map":null,"metadata":{},"sourceType":"module"}