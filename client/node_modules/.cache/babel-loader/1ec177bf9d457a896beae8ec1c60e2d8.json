{"ast":null,"code":"/**\r\n * Line series segment module.\r\n * @todo Add description about what this is\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { LineSeriesSegment } from \"./LineSeriesSegment\";\nimport { registry } from \"../../core/Registry\";\nimport * as $path from \"../../core/rendering/Path\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Represents a line series segment.\r\n *\r\n * A line segment can be used to apply different properties to a part of the\r\n * line series, between two data points.\r\n *\r\n * @see {@link IStepLineSeriesSegmentEvents} for a list of available events\r\n * @see {@link IStepLineSeriesSegmentAdapters} for a list of available Adapters\r\n * @todo Example\r\n */\n\nvar StepLineSeriesSegment =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(StepLineSeriesSegment, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function StepLineSeriesSegment() {\n    var _this = // Init\n    _super.call(this) || this;\n\n    _this.className = \"StepLineSeriesSegment\";\n    return _this;\n  }\n  /**\r\n   * Draws the series segment.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param points       Points to connect\r\n   * @param closePoints  ?\r\n   * @param smoothnessX  Horizontal bezier setting (?)\r\n   * @param smoothnessY  Vertical bezier setting (?)\r\n   */\n\n\n  StepLineSeriesSegment.prototype.drawSegment = function (points, closePoints, smoothnessX, smoothnessY, noRisers, vertical) {\n    if (points.length > 0 && closePoints.length > 0) {\n      if (noRisers) {\n        var path = $path.moveTo(points[0]);\n\n        if (points.length > 0) {\n          for (var i = 1; i < points.length; i++) {\n            var point = points[i];\n\n            if (i / 2 == Math.round(i / 2)) {\n              path += $path.moveTo(point);\n            } else {\n              path += $path.lineTo(point);\n            }\n          }\n        }\n\n        this.strokeSprite.path = path;\n\n        if (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) {\n          // helps to avoid drawing fill object if fill is not visible\n          path = $path.moveTo(points[0]) + $path.polyline(points);\n          path += $path.lineTo(closePoints[0]) + $path.polyline(closePoints);\n          path += $path.lineTo(points[0]);\n          path += $path.closePath();\n          this.fillSprite.path = path;\n        } else {}\n      } else {\n        var path = $path.moveTo(points[0]) + $path.polyline(points);\n        this.strokeSprite.path = path;\n\n        if (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) {\n          // helps to avoid drawing fill object if fill is not visible\n          path += $path.lineTo(closePoints[0]) + $path.polyline(closePoints);\n          path += $path.lineTo(points[0]);\n          path += $path.closePath();\n          this.fillSprite.path = path;\n        }\n      }\n    }\n  };\n\n  return StepLineSeriesSegment;\n}(LineSeriesSegment);\n\nexport { StepLineSeriesSegment };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"StepLineSeriesSegment\"] = StepLineSeriesSegment;","map":null,"metadata":{},"sourceType":"module"}