{"ast":null,"code":"var _jsxFileName = \"/Users/Overseer/Desktop/fullstack_app/client/src/components/Globe/Globe-view.js\";\nimport React, { Component } from 'react';\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\nimport * as am4maps from \"@amcharts/amcharts4/maps\";\nimport worldHigh from '@amcharts/amcharts4-geodata/worldHigh';\nam4core.useTheme(am4themes_animated);\n\nclass Globe extends Component {\n  componentDidMount() {\n    am4core.useTheme(am4themes_animated);\n    const chart = am4core.create(\"chartdiv\", am4maps.MapChart); // Set map definition\n\n    chart.geodata = worldHigh;\n    chart.projection = new am4maps.projections.Orthographic(); // Create map polygon series\n\n    var polygonSeries = chart.series.push(new am4maps.MapPolygonSeries());\n    polygonSeries.useGeodata = true;\n    var polygonTemplate = polygonSeries.mapPolygons.template;\n    polygonTemplate.tooltipText = \"{name}\";\n    polygonTemplate.fill = chart.colors.getIndex(0).lighten(0.5);\n    var hs = polygonTemplate.states.create(\"hover\");\n    hs.properties.fill = chart.colors.getIndex(0);\n    var sample = polygonSeries.mapPolygons.template;\n    sample.tooltipText = \"{name}\";\n    sample.fill = am4core.color(\"#363636\");\n    sample.propertyFields.fill = \"color\";\n    this.chart = chart;\n  }\n\n  componentWillUnmount() {\n    if (this.chart) {\n      this.chart.dispose();\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"chartdiv\",\n      style: {\n        width: \"100%\",\n        height: \"500px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default Globe;","map":{"version":3,"sources":["/Users/Overseer/Desktop/fullstack_app/client/src/components/Globe/Globe-view.js"],"names":["React","Component","am4core","am4themes_animated","am4maps","worldHigh","useTheme","Globe","componentDidMount","chart","create","MapChart","geodata","projection","projections","Orthographic","polygonSeries","series","push","MapPolygonSeries","useGeodata","polygonTemplate","mapPolygons","template","tooltipText","fill","colors","getIndex","lighten","hs","states","properties","sample","color","propertyFields","componentWillUnmount","dispose","render","width","height"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,KAAKC,OAAZ,MAAyB,0BAAzB;AACA,OAAOC,kBAAP,MAA+B,qCAA/B;AACA,OAAO,KAAKC,OAAZ,MAAyB,0BAAzB;AACA,OAAOC,SAAP,MAAsB,uCAAtB;AAEAH,OAAO,CAACI,QAAR,CAAiBH,kBAAjB;;AAEA,MAAMI,KAAN,SAAoBN,SAApB,CAA8B;AAC1BO,EAAAA,iBAAiB,GAAG;AAChBN,IAAAA,OAAO,CAACI,QAAR,CAAiBH,kBAAjB;AACA,UAAMM,KAAK,GAAGP,OAAO,CAACQ,MAAR,CAAe,UAAf,EAA2BN,OAAO,CAACO,QAAnC,CAAd,CAFgB,CAGhB;;AACAF,IAAAA,KAAK,CAACG,OAAN,GAAgBP,SAAhB;AACAI,IAAAA,KAAK,CAACI,UAAN,GAAmB,IAAIT,OAAO,CAACU,WAAR,CAAoBC,YAAxB,EAAnB,CALgB,CAMhB;;AACA,QAAIC,aAAa,GAAGP,KAAK,CAACQ,MAAN,CAAaC,IAAb,CAAkB,IAAId,OAAO,CAACe,gBAAZ,EAAlB,CAApB;AACAH,IAAAA,aAAa,CAACI,UAAd,GAA2B,IAA3B;AACA,QAAIC,eAAe,GAAGL,aAAa,CAACM,WAAd,CAA0BC,QAAhD;AACAF,IAAAA,eAAe,CAACG,WAAhB,GAA8B,QAA9B;AACAH,IAAAA,eAAe,CAACI,IAAhB,GAAuBhB,KAAK,CAACiB,MAAN,CAAaC,QAAb,CAAsB,CAAtB,EAAyBC,OAAzB,CAAiC,GAAjC,CAAvB;AACA,QAAIC,EAAE,GAAGR,eAAe,CAACS,MAAhB,CAAuBpB,MAAvB,CAA8B,OAA9B,CAAT;AACAmB,IAAAA,EAAE,CAACE,UAAH,CAAcN,IAAd,GAAqBhB,KAAK,CAACiB,MAAN,CAAaC,QAAb,CAAsB,CAAtB,CAArB;AACA,QAAIK,MAAM,GAAGhB,aAAa,CAACM,WAAd,CAA0BC,QAAvC;AACAS,IAAAA,MAAM,CAACR,WAAP,GAAqB,QAArB;AACAQ,IAAAA,MAAM,CAACP,IAAP,GAAcvB,OAAO,CAAC+B,KAAR,CAAc,SAAd,CAAd;AACAD,IAAAA,MAAM,CAACE,cAAP,CAAsBT,IAAtB,GAA6B,OAA7B;AACA,SAAKhB,KAAL,GAAaA,KAAb;AACH;;AAED0B,EAAAA,oBAAoB,GAAG;AACnB,QAAI,KAAK1B,KAAT,EAAgB;AACZ,WAAKA,KAAL,CAAW2B,OAAX;AACH;AACJ;;AAEDC,EAAAA,MAAM,GAAG;AACL,WACI;AAAK,MAAA,EAAE,EAAC,UAAR;AAAmB,MAAA,KAAK,EAAE;AAAEC,QAAAA,KAAK,EAAE,MAAT;AAAiBC,QAAAA,MAAM,EAAE;AAAzB,OAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAGH;;AAhCyB;;AAmC9B,eAAehC,KAAf","sourcesContent":["import React, { Component } from 'react';\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\nimport * as am4maps from \"@amcharts/amcharts4/maps\";\nimport worldHigh from '@amcharts/amcharts4-geodata/worldHigh'\n\nam4core.useTheme(am4themes_animated);\n\nclass Globe extends Component {\n    componentDidMount() {\n        am4core.useTheme(am4themes_animated);\n        const chart = am4core.create(\"chartdiv\", am4maps.MapChart);\n        // Set map definition\n        chart.geodata = worldHigh\n        chart.projection = new am4maps.projections.Orthographic();\n        // Create map polygon series\n        var polygonSeries = chart.series.push(new am4maps.MapPolygonSeries());\n        polygonSeries.useGeodata = true;\n        var polygonTemplate = polygonSeries.mapPolygons.template;\n        polygonTemplate.tooltipText = \"{name}\";\n        polygonTemplate.fill = chart.colors.getIndex(0).lighten(0.5);\n        var hs = polygonTemplate.states.create(\"hover\");\n        hs.properties.fill = chart.colors.getIndex(0);\n        var sample = polygonSeries.mapPolygons.template;\n        sample.tooltipText = \"{name}\";\n        sample.fill = am4core.color(\"#363636\");\n        sample.propertyFields.fill = \"color\";\n        this.chart = chart;\n    }\n\n    componentWillUnmount() {\n        if (this.chart) {\n            this.chart.dispose();\n        }\n    }\n\n    render() {\n        return (\n            <div id=\"chartdiv\" style={{ width: \"100%\", height: \"500px\" }}></div>\n        );\n    }\n}\n\nexport default Globe;"]},"metadata":{},"sourceType":"module"}