{"ast":null,"code":"/**\r\n * Data Loader is responsible for loading and parsing external data\r\n */\nimport { CSVParser } from \"./CSVParser\";\nimport { JSONParser } from \"./JSONParser\";\nimport { Adapter } from \"../utils/Adapter\";\nimport * as $net from \"../utils/Net\";\nimport * as $array from \"../utils/Array\";\n;\n/**\r\n * Data Loader is responsible for loading and parsing external data.\r\n *\r\n * There is just one instance of DataLoader per system. Unless you have a\r\n * speicific reason, do not instantiate additional instances.\r\n *\r\n * The global instance of Data Loader is accessible via:\r\n *\r\n * ```TypeScript\r\n * am4core.dataLoader;\r\n * ```\r\n * ```JavaScript\r\n * am4core.dataLoader;\r\n * ```\r\n *\r\n * A loading of specific data source is done via [[DataSource]].\r\n *\r\n     Please refer to [[DataSource]] for information how to use it.\r\n *\r\n * @see {@link IDataLoaderAdapters} for a list of available Adapters\r\n */\n\nvar DataLoader =\n/** @class */\nfunction () {\n  function DataLoader() {\n    /**\r\n     * Adapter.\r\n     */\n    this.adapter = new Adapter(this);\n  }\n  /**\r\n   * Loads a supplied [[DataSource]] or an array of data sources, then calls\r\n   * their respective `parse` methods.\r\n   *\r\n   * @param source  A single data source or an array of multiple of data sources\r\n   */\n\n\n  DataLoader.prototype.load = function (source) {\n    var sources = Array.isArray(source) ? source : [source]; // Add each Source to the list to be loaded simultaneously\n\n    var promises = $array.map(sources, function (x) {\n      // Dispatch events\n      x.dispatchImmediately(\"started\");\n      x.dispatchImmediately(\"loadstarted\");\n      return $net.load(x.url, x, x.requestOptions);\n    }); // Run all promises in parallel\n\n    Promise.all(promises).then(function (res) {\n      // Process each loaded source\n      $array.each(res, function (result) {\n        // Get Source\n        var source = result.target; // Dispatch events\n\n        source.dispatchImmediately(\"loadended\");\n\n        if (result.error) {\n          if (source.events.isEnabled(\"error\")) {\n            source.events.dispatchImmediately(\"error\", {\n              type: \"error\",\n              code: result.xhr.status,\n              message: source.language.translate(\"Unable to load file: %1\", null, source.url),\n              target: source\n            });\n          }\n        } else {\n          // Initiate parsing of the loaded data\n          source.processData(result.response, result.type);\n        }\n\n        source.dispatchImmediately(\"ended\");\n      });\n    }).catch(function (res) {\n      if (res.target) {\n        res.target.dispatchImmediately(\"loadended\");\n\n        if (res.target.events.isEnabled(\"error\")) {\n          res.target.events.dispatchImmediately(\"error\", {\n            type: \"error\",\n            code: res.xhr.status,\n            message: res.target.language.translate(\"Unable to load file: %1\", null, res.target.url),\n            target: res.target\n          });\n        }\n\n        res.target.dispatchImmediately(\"ended\");\n      }\n    });\n  };\n  /**\r\n   * Instantiates a [[DataParser]] object based on the data type.\r\n   * Built-in parser types are as follows:\r\n   *\r\n   * * \"csv\" or \"text/csv\"\r\n   * * \"json\" or \"application/json\"\r\n   *\r\n   * @param contentType  A format type\r\n   * @return A parser object\r\n   */\n\n\n  DataLoader.prototype.getParserByType = function (contentType) {\n    // Let some plugin decide\n    var parser = this.adapter.apply(\"getParserByType\", {\n      parser: null,\n      type: contentType\n    }).parser;\n\n    if (parser) {\n      return parser;\n    }\n\n    if (contentType == \"csv\" || contentType == \"text/csv\" || contentType == \"application/vnd.ms-excel\") {\n      return new CSVParser();\n    }\n\n    if (contentType == \"json\" || contentType == \"application/json\") {\n      return new JSONParser();\n    }\n\n    return;\n  };\n  /**\r\n   * Tries to determine a parser out of content type and/or actual data.\r\n   *\r\n   * @param data         Data\r\n   * @param contentType  Content-type\r\n   * @return Parser instance\r\n   */\n\n\n  DataLoader.prototype.getParserByData = function (data, contentType) {\n    // Let some plugin decide\n    var parser = this.adapter.apply(\"getParserByData\", {\n      parser: null,\n      data: data,\n      type: contentType\n    }).parser; // Check if we have parser from outside code\n\n    if (!parser) {\n      // No, let's try to figure it out\n      parser = this.getParserByType(contentType);\n\n      if (parser) {\n        // We're able to figure out parser by content-type\n        return parser;\n      } else if (JSONParser.isJSON(data)) {\n        return this.getParserByType(\"json\");\n      } else if (CSVParser.isCSV(data)) {\n        return this.getParserByType(\"csv\");\n      }\n    }\n\n    return parser;\n  };\n\n  return DataLoader;\n}();\n\nexport { DataLoader };\n/**\r\n * Create instance of Data Loader\r\n */\n\nexport var dataLoader = new DataLoader();","map":null,"metadata":{},"sourceType":"module"}