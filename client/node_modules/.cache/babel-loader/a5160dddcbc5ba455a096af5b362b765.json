{"ast":null,"code":"/**\r\n * Module that defines everything related to building 3D Columns.\r\n * It is a container which has column3D element which is a Rectangle3D.\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Column } from \"./Column\";\nimport { Rectangle3D } from \"../../core/elements/3d/Rectangle3D\";\nimport { registry } from \"../../core/Registry\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Class used to creates Column3Ds.\r\n *\r\n * @see {@link IColumn3DEvents} for a list of available events\r\n * @see {@link IColumn3DAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\n\nvar Column3D =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Column3D, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function Column3D() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"Column3D\";\n    return _this;\n  }\n  /**\r\n   * @ignore\r\n   */\n\n\n  Column3D.prototype.createAssets = function () {\n    this.column3D = this.createChild(Rectangle3D);\n    this.column3D.shouldClone = false;\n    this.column3D.strokeOpacity = 0; // some dirty hack so that if user access column, it won't get error\n\n    this.column = this.column3D;\n  };\n  /**\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Column3D.prototype.validate = function () {\n    _super.prototype.validate.call(this);\n\n    if (this.column3D) {\n      this.column3D.width = this.pixelWidth;\n      this.column3D.height = this.pixelHeight;\n\n      if (this.column3D.invalid) {\n        this.column3D.validate();\n      }\n    }\n  };\n  /**\r\n   * Copies all parameters from another [[Column3D]].\r\n   *\r\n   * @param source Source Column3D\r\n   */\n\n\n  Column3D.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n\n    if (this.column3D) {\n      this.column3D.copyFrom(source.column3D);\n    }\n  };\n  /**\r\n   * Sets actual `fill` property on the SVG element, including applicable color\r\n   * modifiers.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param value  Fill\r\n   */\n\n\n  Column3D.prototype.setFill = function (value) {\n    _super.prototype.setFill.call(this, value);\n\n    this.column.fill = value;\n  };\n\n  return Column3D;\n}(Column);\n\nexport { Column3D };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"Column3D\"] = Column3D;","map":null,"metadata":{},"sourceType":"module"}