{"ast":null,"code":"/**\r\n * Module for building 3D serial charts.\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * Imports\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { XYChart, XYChartDataItem } from \"./XYChart\";\nimport { Container } from \"../../core/Container\";\nimport { Sprite } from \"../../core/Sprite\";\nimport { AxisRendererX3D } from \"../axes/AxisRendererX3D\";\nimport { AxisRendererY3D } from \"../axes/AxisRendererY3D\";\nimport { ColumnSeries3D } from \"../series/ColumnSeries3D\";\nimport { registry } from \"../../core/Registry\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $path from \"../../core/rendering/Path\";\nimport * as $utils from \"../../core/utils/Utils\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines a [[DataItem]] for [[XYChart3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\n\nvar XYChart3DDataItem =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(XYChart3DDataItem, _super);\n\n  function XYChart3DDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"XYChart3DDataItem\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  return XYChart3DDataItem;\n}(XYChartDataItem);\n\nexport { XYChart3DDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Creates a 3D XY chart.\r\n *\r\n * @see {@link IXYChart3DEvents} for a list of available Events\r\n * @see {@link IXYChart3DAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/} for documentation\r\n * @important\r\n */\n\nvar XYChart3D =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(XYChart3D, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function XYChart3D() {\n    var _this = // Init\n    _super.call(this) || this;\n    /**\r\n     * Type of the axis renderer to use for X axes.\r\n     */\n\n\n    _this._axisRendererX = AxisRendererX3D;\n    /**\r\n     * Type of the axis renderer to use for Y axes.\r\n     */\n\n    _this._axisRendererY = AxisRendererY3D;\n    _this.className = \"XYChart3D\"; // Set defaults\n\n    _this.depth = 30;\n    _this.angle = 30; // Creeate container for columns\n\n    var columnsContainer = _this.seriesContainer.createChild(Container);\n\n    columnsContainer.shouldClone = false;\n    columnsContainer.isMeasured = false;\n    columnsContainer.layout = \"none\";\n    _this.columnsContainer = columnsContainer;\n    _this.columnsContainer.mask = _this.createChild(Sprite); // Apply theme\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * This is done because for some reason IE doesn't change mask if path of a\r\n   * mask changes.\r\n   */\n\n\n  XYChart3D.prototype.updateSeriesMasks = function () {\n    _super.prototype.updateSeriesMasks.call(this);\n\n    if ($utils.isIE()) {\n      var columnsContainer = this.columnsContainer;\n      var mask = columnsContainer.mask;\n      columnsContainer.mask = undefined;\n      columnsContainer.mask = mask;\n    }\n  };\n\n  Object.defineProperty(XYChart3D.prototype, \"depth\", {\n    /**\r\n     * @return Depth (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"depth\");\n    },\n\n    /**\r\n     * Depth of the 3D chart / columns in pixels.\r\n     *\r\n     * @param value  Depth (px)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"depth\", value);\n      this.fixLayout();\n      this.invalidateDataUsers();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYChart3D.prototype, \"angle\", {\n    /**\r\n     * @return Angle\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"angle\");\n    },\n\n    /**\r\n     * Angle the chart is viewed at.\r\n     *\r\n     * @todo Description (review)\r\n     * @param value  Angle\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"angle\", value);\n      this.fixLayout();\n      this.invalidateDataUsers();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYChart3D.prototype, \"dx3D\", {\n    /**\r\n     * A calculated horizontal 3D offset (px).\r\n     *\r\n     * @readonly\r\n     * @return Offset (px)\r\n     */\n    get: function () {\n      return $math.cos(this.angle) * this.depth;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYChart3D.prototype, \"dy3D\", {\n    /**\r\n     * A calculated vertical 3D offset (px).\r\n     *\r\n     * @readonly\r\n     * @return Offset (px)\r\n     */\n    get: function () {\n      return -$math.sin(this.angle) * this.depth;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * (Re)validates layout\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  XYChart3D.prototype.validateLayout = function () {\n    _super.prototype.validateLayout.call(this);\n\n    this.fixColumns();\n  };\n  /**\r\n   * Updates the layout (padding and scrollbar positions) to accommodate for\r\n   * 3D depth and angle.\r\n   */\n\n\n  XYChart3D.prototype.fixLayout = function () {\n    this.chartContainer.marginTop = -this.dy3D;\n    this.chartContainer.paddingRight = this.dx3D;\n\n    if (this.scrollbarX) {\n      this.scrollbarX.dy = this.dy3D;\n      this.scrollbarX.dx = this.dx3D;\n    }\n\n    if (this.scrollbarY) {\n      this.scrollbarY.dy = this.dy3D;\n      this.scrollbarY.dx = this.dx3D;\n    }\n\n    this.fixColumns();\n\n    _super.prototype.fixLayout.call(this);\n  };\n  /**\r\n   * Updates column positions, offset and dimensions based on chart's angle\r\n   * and depth.\r\n   */\n\n\n  XYChart3D.prototype.fixColumns = function () {\n    var _this = this;\n\n    var count = 1;\n    var i = 0;\n    $iter.each(this.series.iterator(), function (series) {\n      if (series instanceof ColumnSeries3D) {\n        if (!series.clustered && i > 0) {\n          count++;\n        }\n\n        series.depthIndex = count - 1;\n        i++;\n      }\n    });\n    var s = 0;\n    $iter.each(this.series.iterator(), function (series) {\n      if (series instanceof ColumnSeries3D) {\n        series.depth = _this.depth / count;\n        series.angle = _this.angle;\n        series.dx = _this.depth / count * $math.cos(_this.angle) * series.depthIndex;\n        series.dy = -_this.depth / count * $math.sin(_this.angle) * series.depthIndex;\n        var inversed_1 = false;\n\n        if (series.baseAxis == series.xAxis && series.xAxis.renderer.inversed || series.baseAxis == series.yAxis && series.yAxis.renderer.inversed) {\n          inversed_1 = true;\n        }\n\n        var i_1 = 1;\n        series.columns.each(function (column) {\n          if (inversed_1) {\n            column.zIndex = 1000 * (1000 - i_1) + s - series.depthIndex * 100;\n          } else {\n            column.zIndex = 1000 * i_1 + s - series.depthIndex * 100;\n          }\n\n          i_1++;\n        });\n        s++;\n      }\n    });\n    this.maskColumns();\n  };\n  /**\r\n   * Processes JSON-based config before it is applied to the object.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param config  Config\r\n   */\n\n\n  XYChart3D.prototype.processConfig = function (config) {\n    if (config) {\n      // Set up series\n      if ($type.hasValue(config.series) && $type.isArray(config.series)) {\n        for (var i = 0, len = config.series.length; i < len; i++) {\n          config.series[i].type = config.series[i].type || \"ColumnSeries3D\";\n        }\n      }\n    }\n\n    _super.prototype.processConfig.call(this, config);\n  };\n\n  XYChart3D.prototype.maskColumns = function () {\n    var w = this.plotContainer.pixelWidth;\n    var h = this.plotContainer.pixelHeight;\n    var dx = this.dx3D;\n    var dy = this.dy3D;\n    var path = $path.moveTo({\n      x: 0,\n      y: 0\n    }) + $path.lineTo({\n      x: dx,\n      y: dy\n    }) + $path.lineTo({\n      x: w + dx,\n      y: dy\n    }) + $path.lineTo({\n      x: w + dx,\n      y: h + dy\n    }) + $path.lineTo({\n      x: w,\n      y: h\n    }) + $path.lineTo({\n      x: w,\n      y: h\n    }) + $path.lineTo({\n      x: 0,\n      y: h\n    }) + $path.closePath();\n    var columnsContainer = this.columnsContainer;\n\n    if (columnsContainer && columnsContainer.mask) {\n      columnsContainer.mask.path = path;\n    }\n  };\n\n  return XYChart3D;\n}(XYChart);\n\nexport { XYChart3D };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"XYChart3D\"] = XYChart3D;","map":null,"metadata":{},"sourceType":"module"}