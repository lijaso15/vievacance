{"ast":null,"code":"/**\r\n * Module, defining Axis Renderer for vertical 3D axes.\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { AxisRendererY } from \"../axes/AxisRendererY\";\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\nimport * as $path from \"../../core/rendering/Path\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Renderer for vertical 3D axis.\r\n *\r\n * @see {@link IAxisRendererY3DEvents} for a list of available events\r\n * @see {@link IAxisRendererY3DAdapters} for a list of available Adapters\r\n */\n\nvar AxisRendererY3D =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(AxisRendererY3D, _super);\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param axis Related axis\r\n   */\n\n\n  function AxisRendererY3D() {\n    var _this = _super.call(this) || this;\n    /**\r\n     * A related chart.\r\n     *\r\n     * @todo Description\r\n     */\n\n\n    _this._chart = new MutableValueDisposer();\n    _this.className = \"AxisRendererY3D\";\n\n    _this._disposers.push(_this._chart);\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Updates and positions a grid element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param grid         Grid element\r\n   * @param position     Starting position\r\n   * @param endPosition  End position\r\n   */\n\n\n  AxisRendererY3D.prototype.updateGridElement = function (grid, position, endPosition) {\n    position = position + (endPosition - position) * grid.location;\n    var point = this.positionToPoint(position);\n\n    if (grid.element) {\n      var dx = this.chart.dx3D || 0;\n      var dy = this.chart.dy3D || 0;\n      var w = this.getWidth();\n      grid.path = $path.moveTo({\n        x: 0,\n        y: 0\n      }) + $path.lineTo({\n        x: dx,\n        y: dy\n      }) + $path.lineTo({\n        x: w + dx,\n        y: dy\n      });\n    }\n\n    this.positionItem(grid, point);\n    this.toggleVisibility(grid, position, 0, 1);\n  };\n  /**\r\n   * Updates and positions the base grid element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  AxisRendererY3D.prototype.updateBaseGridElement = function () {\n    _super.prototype.updateBaseGridElement.call(this);\n\n    var dx = this.chart.dx3D || 0;\n    var dy = this.chart.dy3D || 0;\n    var w = this.getWidth();\n    this.baseGrid.path = $path.moveTo({\n      x: 0,\n      y: 0\n    }) + $path.lineTo({\n      x: w,\n      y: 0\n    }) + $path.lineTo({\n      x: w + dx,\n      y: dy\n    });\n  };\n\n  Object.defineProperty(AxisRendererY3D.prototype, \"chart\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Chart\r\n     */\n    get: function () {\n      return this._chart.get();\n    },\n\n    /**\r\n     * Chart, associated with the Axis.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value  Chart\r\n     */\n    set: function (chart) {\n      if (chart) {\n        this._chart.set(chart, chart.events.on(\"propertychanged\", this.handle3DChanged, this, false));\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Invoked when 3D-related settings change, like depth or angle.\r\n   *\r\n   * @param event Event\r\n   */\n\n  AxisRendererY3D.prototype.handle3DChanged = function (event) {\n    if (event.property == \"depth\" || event.property == \"angle\") {\n      this.invalidate();\n    }\n  };\n\n  return AxisRendererY3D;\n}(AxisRendererY);\n\nexport { AxisRendererY3D };","map":null,"metadata":{},"sourceType":"module"}