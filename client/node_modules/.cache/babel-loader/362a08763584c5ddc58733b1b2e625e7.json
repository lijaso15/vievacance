{"ast":null,"code":"/**\r\n * Chord diagram module.\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { FlowDiagram, FlowDiagramDataItem } from \"./FlowDiagram\";\nimport { percent } from \"../../core/utils/Percent\";\nimport { Container } from \"../../core/Container\";\nimport { registry } from \"../../core/Registry\";\nimport { ChordNode } from \"../elements/ChordNode\";\nimport { ChordLink } from \"../elements/ChordLink\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $utils from \"../../core/utils/Utils\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n//@todo rearange notes after dragged\n\n/**\r\n * Defines a [[DataItem]] for [[ChordDiagram]].\r\n *\r\n * @see {@link DataItem}\r\n */\n\nvar ChordDiagramDataItem =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(ChordDiagramDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function ChordDiagramDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"ChordDiagramDataItem\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  return ChordDiagramDataItem;\n}(FlowDiagramDataItem);\n\nexport { ChordDiagramDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Creates a Chord Diagram chart.\r\n *\r\n * @see {@link IChordDiagramEvents} for a list of available Events\r\n * @see {@link IChordDiagramAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/chord-diagram/} for documentation\r\n * @important\r\n */\n\nvar ChordDiagram =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(ChordDiagram, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function ChordDiagram() {\n    var _this = // Init\n    _super.call(this) || this;\n    /**\r\n     * [valueAngle description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     */\n\n\n    _this.valueAngle = 0;\n    _this.className = \"ChordDiagram\";\n    _this.startAngle = -90;\n    _this.endAngle = 270;\n    _this.radius = percent(80);\n    _this.innerRadius = -15;\n    _this.nodePadding = 5;\n\n    var chordContainer = _this.chartContainer.createChild(Container);\n\n    chordContainer.align = \"center\";\n    chordContainer.valign = \"middle\";\n    chordContainer.shouldClone = false;\n    chordContainer.layout = \"absolute\";\n    _this.chordContainer = chordContainer;\n    _this.nodesContainer.parent = chordContainer;\n    _this.linksContainer.parent = chordContainer;\n\n    _this.chartContainer.events.on(\"maxsizechanged\", _this.invalidate, _this, false); // Apply theme\n\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Redraws the chart.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  ChordDiagram.prototype.validate = function () {\n    var _this = this;\n\n    var chartContainer = this.chartContainer;\n    var endAngle = this.endAngle;\n    var startAngle = this.startAngle + this.nodePadding / 2;\n    var rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\n    var innerRect = {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0\n    };\n    rect = $math.getCommonRectangle([rect, innerRect]);\n    var maxRadius = Math.min(chartContainer.innerWidth / rect.width, chartContainer.innerHeight / rect.height);\n\n    if (!$type.isNumber(maxRadius)) {\n      maxRadius = 0;\n    }\n\n    var radius = $utils.relativeRadiusToValue(this.radius, maxRadius);\n    var pixelInnerRadius = $utils.relativeRadiusToValue(this.innerRadius, radius, true);\n    var total = this.dataItem.values.value.sum;\n    var count = 0;\n    var newTotal = 0;\n    $iter.each(this._sorted, function (strNode) {\n      var node = strNode[1];\n\n      _this.getNodeValue(node);\n\n      count++;\n      var value = node.total;\n\n      if (node.total / total < _this.minNodeSize) {\n        value = total * _this.minNodeSize;\n      }\n\n      newTotal += value;\n    });\n    this.valueAngle = (endAngle - this.startAngle - this.nodePadding * count) / newTotal;\n    $iter.each(this._sorted, function (strNode) {\n      var node = strNode[1];\n      var slice = node.slice;\n      slice.radius = radius;\n      slice.innerRadius = pixelInnerRadius;\n      var value = node.total;\n\n      if (node.total / total < _this.minNodeSize) {\n        value = total * _this.minNodeSize;\n      }\n\n      node.adjustedTotal = value;\n      var arc;\n\n      if (_this.nonRibbon) {\n        arc = (endAngle - _this.startAngle) / count - _this.nodePadding;\n      } else {\n        arc = _this.valueAngle * value;\n      }\n\n      slice.arc = arc;\n      slice.startAngle = startAngle;\n      node.trueStartAngle = startAngle;\n      node.parent = _this.nodesContainer;\n      node.validate(); // otherwise flickers - nodes are already created, but not yet positioned etc.\n\n      startAngle += arc + _this.nodePadding;\n    });\n    this.chordContainer.definedBBox = {\n      x: radius * rect.x,\n      y: radius * rect.y,\n      width: radius * rect.width,\n      height: radius * rect.height\n    };\n    this.chordContainer.invalidateLayout();\n\n    _super.prototype.validate.call(this);\n  };\n  /**\r\n   * Sets defaults that instantiate some objects that rely on parent, so they\r\n   * cannot be set in constructor.\r\n   */\n\n\n  ChordDiagram.prototype.applyInternalDefaults = function () {\n    _super.prototype.applyInternalDefaults.call(this); // Add a default screen reader title for accessibility\n    // This will be overridden in screen reader if there are any `titles` set\n\n\n    if (!$type.hasValue(this.readerTitle)) {\n      this.readerTitle = this.language.translate(\"Chord diagram\");\n    }\n  };\n  /**\r\n   * Creates and returns a new data item.\r\n   *\r\n   * @return Data item\r\n   */\n\n\n  ChordDiagram.prototype.createDataItem = function () {\n    return new ChordDiagramDataItem();\n  };\n\n  Object.defineProperty(ChordDiagram.prototype, \"startAngle\", {\n    /**\r\n     * @return Start angle (degrees)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"startAngle\");\n    },\n\n    /**\r\n     * Starting angle of the Radar face. (degrees)\r\n     *\r\n     * Normally, a circular radar face begins (the radial axis is drawn) at the\r\n     * top center. (at -90 degrees)\r\n     *\r\n     * You can use `startAngle` to change this setting.\r\n     *\r\n     * E.g. setting this to 0 will make the radial axis start horizontally to\r\n     * the right, as opposed to vertical.\r\n     *\r\n     * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n     * needs to be 360.\r\n     *\r\n     * However, it's **not** necessary to do so. You can set those to lesser\r\n     * numbers, to create semi-circles.\r\n     *\r\n     * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n     * looks like a quarter of a circle.\r\n     *\r\n     * @default -90\r\n     * @param value  Start angle (degrees)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"startAngle\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ChordDiagram.prototype, \"endAngle\", {\n    /**\r\n     * @return End angle (degrees)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"endAngle\");\n    },\n\n    /**\r\n     * Starting angle of the Radar face. (degrees)\r\n     *\r\n     * Normally, a circular radar face ends (the radial axis is drawn) exactly\r\n     * where it has started, forming a full 360 circle. (at 270 degrees)\r\n     *\r\n     * You can use `endAngle` to end the circle somewhere else.\r\n     *\r\n     * E.g. setting this to 180 will make the radar face end at horizontal line\r\n     * to the left off the center.\r\n     *\r\n     * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n     * needs to be 360.\r\n     *\r\n     * However, it's **not** necessary to do so. You can set those to lesser\r\n     * numbers, to create semi-circles.\r\n     *\r\n     * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n     * looks like a quarter of a circle.\r\n     *\r\n     * @default -90\r\n     * @param value  End angle (degrees)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"endAngle\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ChordDiagram.prototype, \"radius\", {\n    /**\r\n     * @return Outer radius\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"radius\");\n    },\n\n    /**\r\n     * Outer radius of the Radar face.\r\n     *\r\n     * This can either be in absolute pixel value, or relative [[Percent]].\r\n     *\r\n     * @param value  Outer radius\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"radius\", value, true, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ChordDiagram.prototype, \"innerRadius\", {\n    /**\r\n     * @return Inner radius\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"innerRadius\");\n    },\n\n    /**\r\n     * Inner radius of the Chord nodes.\r\n     *\r\n     * This can either be in absolute pixel value, or relative [[Percent]].\r\n     *\r\n     * @param value  Outer radius\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ChordDiagram.prototype, \"nonRibbon\", {\n    /**\r\n     * @return Non-ribbon\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"nonRibbon\");\n    },\n\n    /**\r\n     *\r\n     * If you set this to true, all the lines will be of the same width. This is done by making middleLine of a ChordLink visible.\r\n     *\r\n     * @param value\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"nonRibbon\", value, true);\n      this.links.template.middleLine.strokeOpacity = 1;\n      this.links.template.link.fillOpacity = 0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  ChordDiagram.prototype.createNode = function () {\n    var node = new ChordNode();\n\n    this._disposers.push(node);\n\n    return node;\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  ChordDiagram.prototype.createLink = function () {\n    var link = new ChordLink();\n\n    this._disposers.push(link);\n\n    return link;\n  };\n\n  return ChordDiagram;\n}(FlowDiagram);\n\nexport { ChordDiagram };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"ChordDiagram\"] = ChordDiagram;","map":null,"metadata":{},"sourceType":"module"}