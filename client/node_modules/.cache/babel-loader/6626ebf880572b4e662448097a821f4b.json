{"ast":null,"code":"/**\r\n * Paper class just like the white sheet of pressed fiber it draws its name\r\n * inspiration from is used as a starting point to start a drawing.\r\n *\r\n * Before we can start adding elements (drawing) we need to take out a new sheet\r\n * of paper, or in this instance create a blank SVG element.\r\n *\r\n * This class creates such element, as well as implements methods needed to\r\n * start adding elements to it.\r\n */\n\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { AMElement } from \"./AMElement\";\nimport { Group } from \"./Group\";\nimport { SVGContainer } from \"./SVGContainer\";\nimport * as $dom from \"../utils/DOM\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Paper class which when instantiated will create an SVG element as well as\r\n * some of the sub-elements like `<desc>`, `<defs>`.\r\n *\r\n * Use its methods like `addGroup` and `append` to add elements to the paper.\r\n */\n\nvar Paper =\n/** @class */\nfunction () {\n  /**\r\n   * Creates main `<svg>` container and related elements.\r\n   *\r\n   * @param container A reference to HTML element to create `<svg>` in\r\n   */\n  function Paper(container, id) {\n    // Store container reference\n    this.container = container;\n    this.id = id; // Create SVG element\n\n    var svg = document.createElementNS($dom.SVGNS, \"svg\");\n    svg.setAttribute(\"version\", \"1.1\");\n    svg.setAttributeNS($dom.XMLNS, \"xmlns\", $dom.SVGNS);\n    svg.setAttributeNS($dom.XMLNS, \"xmlns:xlink\", $dom.XLINK);\n    svg.setAttribute(\"role\", \"group\");\n    this.container.appendChild(svg); // Add description\n\n    var desc = document.createElementNS($dom.SVGNS, \"desc\");\n    desc.appendChild(document.createTextNode(\"JavaScript chart by amCharts\"));\n    svg.appendChild(desc); // Add defs\n\n    this.defs = document.createElementNS($dom.SVGNS, \"defs\");\n    svg.appendChild(this.defs); // Set width and height to fit container\n\n    svg.style.width = \"100%\";\n    svg.style.height = \"100%\";\n    svg.style.overflow = \"visible\"; // Store variable\n\n    this.svg = svg;\n  }\n  /**\r\n   * Creates and returns a new element. Does not attach it to Paper yet.\r\n   *\r\n   * @param elementName  Element name\r\n   * @return New element\r\n   */\n\n\n  Paper.prototype.add = function (elementName) {\n    return new AMElement(elementName);\n  };\n  /**\r\n   * Creates and returns a new Group element. Does not attach it to Paper.\r\n   *\r\n   * @param groupName  Element name\r\n   * @return New Group\r\n   */\n\n\n  Paper.prototype.addGroup = function (groupName) {\n    return new Group(groupName);\n  };\n  /**\r\n   * Appends an element to Paper.\r\n   *\r\n   * @param element Element to append\r\n   */\n\n\n  Paper.prototype.append = function (element) {\n    if (element) {\n      this.svg.appendChild(element.node);\n    }\n  };\n  /**\r\n   * Appends an element to `<defs>` block of the Paper.\r\n   *\r\n   * @param element  Element\r\n   */\n\n\n  Paper.prototype.appendDef = function (element) {\n    if (element) {\n      this.defs.appendChild(element.node);\n    }\n  };\n  /**\r\n   * Creates and returns new `<foreignObject>` element. Does not append it to\r\n   * Paper.\r\n   *\r\n   * @return A foreignObject element\r\n   */\n\n\n  Paper.prototype.foreignObject = function () {\n    var element = new AMElement(\"foreignObject\"); //this.append(element);\n\n    return element;\n  };\n  /**\r\n   * Checks if browser supports `<foreignObject>` elements.\r\n   *\r\n   * @return Supports `foreignObject`?\r\n   */\n\n\n  Paper.prototype.supportsForeignObject = function () {\n    return document.implementation.hasFeature(\"http://www.w3.org/TR/SVG11/feature#Extensibility\", \"1.1\");\n  };\n\n  return Paper;\n}();\n\nexport { Paper };\nvar ghostPaper = null;\n/**\r\n * A [[Paper]] instance to create elements, that are not yet ready to be\r\n * placed in visible DOM.\r\n *\r\n * @ignore Exclude from docs\r\n */\n\nexport function getGhostPaper() {\n  if (ghostPaper === null) {\n    // ghost is used to draw elements while real paper is not yet created or Sprite doesn't know parent yet\n    var ghostDiv = document.createElement(\"div\");\n    ghostDiv.hidden = true;\n    document.body.appendChild(ghostDiv);\n    var ghostSvgContainer = new SVGContainer(ghostDiv);\n    ghostPaper = new Paper(ghostSvgContainer.SVGContainer, \"ghost\");\n  }\n\n  return ghostPaper;\n}","map":null,"metadata":{},"sourceType":"module"}