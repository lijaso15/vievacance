{"ast":null,"code":"/**\r\n * Pie chart module.\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { PercentChart, PercentChartDataItem } from \"./PercentChart\";\nimport { percent, Percent } from \"../../core/utils/Percent\";\nimport { PieSeries } from \"../series/PieSeries\";\nimport { registry } from \"../../core/Registry\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $type from \"../../core/utils/Type\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines a [[DataItem]] for [[PieChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\n\nvar PieChartDataItem =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(PieChartDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function PieChartDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"PieChartDataItem\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  return PieChartDataItem;\n}(PercentChartDataItem);\n\nexport { PieChartDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Creates a Pie chart.\r\n *\r\n * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.PieChart);\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czechia\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * let series = chart.series.push(new am4charts.PieSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.PieChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"PieChart\");\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czechia\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * var series = chart.series.push(new am4charts.PieSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"PieSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"value\": \"litres\",\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"Lithuania\",\r\n * \t\t\"litres\": 501.9\r\n * \t}, {\r\n * \t\t\"country\": \"Czechia\",\r\n * \t\t\"litres\": 301.9\r\n * \t}, {\r\n * \t\t\"country\": \"Ireland\",\r\n * \t\t\"litres\": 201.1\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"PieChart\");\r\n * ```\r\n *\r\n * @see {@link IPieChartEvents} for a list of available Events\r\n * @see {@link IPieChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/pie-chart/} for documentation\r\n * @important\r\n */\n\nvar PieChart =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(PieChart, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function PieChart() {\n    var _this = // Init\n    _super.call(this) || this;\n\n    _this.className = \"PieChart\"; // Set defaults\n\n    _this.innerRadius = 0;\n    _this.radius = percent(80);\n    _this.align = \"none\";\n    _this.valign = \"none\";\n    _this.startAngle = -90;\n    _this.endAngle = 270;\n    var seriesContainer = _this.seriesContainer;\n    seriesContainer.isMeasured = true;\n    seriesContainer.valign = \"middle\";\n    seriesContainer.align = \"center\";\n    seriesContainer.layout = \"absolute\";\n    seriesContainer.width = undefined;\n    seriesContainer.height = undefined; // so that the pie is always drawn, even the legend wants all the space\n\n    _this.chartContainer.minHeight = 50;\n    _this.chartContainer.minWidth = 50;\n\n    _this.chartContainer.events.on(\"maxsizechanged\", _this.updateRadius, _this, false); // need this for the chart to change radius if legend is removed/disabled\n    // Apply theme\n\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Sets defaults that instantiate some objects that rely on parent, so they\r\n   * cannot be set in constructor.\r\n   */\n\n\n  PieChart.prototype.applyInternalDefaults = function () {\n    _super.prototype.applyInternalDefaults.call(this); // Add a default screen reader title for accessibility\n    // This will be overridden in screen reader if there are any `titles` set\n\n\n    if (!$type.hasValue(this.readerTitle)) {\n      this.readerTitle = this.language.translate(\"Pie chart\");\n    }\n  };\n  /**\r\n   * (Re)validates the chart, causing it to redraw.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  PieChart.prototype.validateLayout = function () {\n    _super.prototype.validateLayout.call(this);\n\n    this.updateRadius();\n  };\n  /**\r\n   * Decorates a new [[Series]] object with required parameters when it is\r\n   * added to the chart.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event  Event\r\n   */\n\n\n  PieChart.prototype.handleSeriesAdded = function (event) {\n    _super.prototype.handleSeriesAdded.call(this, event);\n\n    this._chartPixelRadius = undefined;\n    this.updateSeriesAngles();\n  };\n\n  PieChart.prototype.updateSeriesAngles = function () {\n    var _this = this;\n\n    this.series.each(function (series) {\n      series.startAngle = _this.startAngle;\n      series.endAngle = _this.endAngle;\n      series.defaultState.properties.startAngle = _this.startAngle;\n      series.defaultState.properties.endAngle = _this.endAngle;\n    });\n  };\n  /**\r\n   * Recalculates pie's radius, based on a number of criteria.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  PieChart.prototype.updateRadius = function () {\n    var chartCont = this.chartContainer;\n    var rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\n    var innerRect = {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0\n    };\n    var innerRadius = this.innerRadius;\n\n    if (innerRadius instanceof Percent) {\n      innerRect = $math.getArcRect(this.startAngle, this.endAngle, innerRadius.value);\n    } // @todo handle this when innerRadius set in pixels (do it for radar also)\n\n\n    rect = $math.getCommonRectangle([rect, innerRect]);\n    var maxRadius = Math.min(chartCont.innerWidth / rect.width, chartCont.innerHeight / rect.height);\n\n    if (!$type.isNumber(maxRadius)) {\n      maxRadius = 0;\n    }\n\n    var chartRadius = $utils.relativeRadiusToValue(this.radius, maxRadius);\n    var chartPixelInnerRadius = $utils.relativeRadiusToValue(this.innerRadius, maxRadius);\n    var seriesRadius = (chartRadius - chartPixelInnerRadius) / this.series.length;\n\n    if (chartRadius != this._chartPixelRadius || chartPixelInnerRadius != this._chartPixelInnerRadius) {\n      this._chartPixelRadius = chartRadius;\n      this._chartPixelInnerRadius = chartPixelInnerRadius; //@todo: make it possible to set series radius in percent\n\n      $iter.each($iter.indexed(this.series.iterator()), function (a) {\n        var i = a[0];\n        var series = a[1];\n        var radius = chartPixelInnerRadius + $utils.relativeRadiusToValue(series.radius, chartRadius - chartPixelInnerRadius);\n        var innerRadius = chartPixelInnerRadius + $utils.relativeRadiusToValue(series.innerRadius, chartRadius - chartPixelInnerRadius);\n\n        if (!$type.isNumber(radius)) {\n          radius = chartPixelInnerRadius + seriesRadius * (i + 1);\n        }\n\n        if (!$type.isNumber(innerRadius)) {\n          innerRadius = chartPixelInnerRadius + seriesRadius * i;\n        }\n\n        series.pixelRadius = radius;\n        series.pixelInnerRadius = innerRadius;\n      });\n      this.seriesContainer.definedBBox = {\n        x: chartRadius * rect.x,\n        y: chartRadius * rect.y,\n        width: chartRadius * rect.width,\n        height: chartRadius * rect.height\n      };\n      this.seriesContainer.invalidateLayout();\n      this.bulletsContainer.x = this.seriesContainer.x;\n      this.bulletsContainer.y = this.seriesContainer.y;\n    }\n  };\n\n  Object.defineProperty(PieChart.prototype, \"radius\", {\n    /**\r\n     * @return Radius (px or relative)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"radius\");\n    },\n\n    /**\r\n     * Sets radius of the pie chart.\r\n     *\r\n     * Setting to a number will mean a fixed pixel radius.\r\n     *\r\n     * Setting to an instance of [[Percent]] will mean a relative radius to\r\n     * available space.\r\n     *\r\n     * E.g.:\r\n     *\r\n     * ```TypeScript\r\n     * // Set pie chart to be at 50% of the available space\r\n     * pieChart.radius = am4core.percent.percent(50);\r\n     * ```\r\n     * ```JavaScript\r\n     * // Set pie chart to be at 50% of the available space\r\n     * pieChart.radius = am4core.percent.percent(50);\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // Set pie chart to be at 50% of the available space\r\n     *   \"radius\": \"50%\"\r\n     * }\r\n     * ```\r\n     *\r\n     * @param value  Radius (px or relative)\r\n     */\n    set: function (value) {\n      if (this.setPercentProperty(\"radius\", value, true, false, 10, false)) {\n        this.invalidateLayout();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PieChart.prototype, \"innerRadius\", {\n    /**\r\n     * @return Relative inner radius (0-1)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"innerRadius\");\n    },\n\n    /**\r\n     * Sets relative inner radius (to create a donut chart).\r\n     *\r\n     * The inner radius is relative to pie's radius:\r\n     * * 0 - solid pie (no hole inside);\r\n     * * 0.5 - hole is half the radius of the pie;\r\n     * * 1 - does not make sense, because the hole will take up the whole radius.\r\n     *\r\n     * @param value  Relative inner radius (0-1)\r\n     * @todo Setting things like `innerRadius` modifies `slice.radius` and it then looks like it is not the same value as in default state\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Creates a new [[PieSeries]].\r\n   *\r\n   * @return New series\r\n   */\n\n  PieChart.prototype.createSeries = function () {\n    return new PieSeries();\n  };\n\n  Object.defineProperty(PieChart.prototype, \"startAngle\", {\n    /**\r\n     * @return Start angle (degrees)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"startAngle\");\n    },\n\n    /**\r\n     * Starting angle of the Pie circle. (degrees)\r\n     *\r\n     * Normally, a pie chart begins (the left side of the first slice is drawn)\r\n     * at the top center. (at -90 degrees)\r\n     *\r\n     * You can use `startAngle` to change this setting.\r\n     *\r\n     * E.g. setting this to 0 will make the first slice be drawn to the right.\r\n     *\r\n     * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n     * needs to be 360.\r\n     *\r\n     * However, it's **not** necessary to do so. You can set to those lesser\r\n     * numbers, to create semi-circles.\r\n     *\r\n     * E.g. `startAngle = -90` with `endAngle = 0` will create a Pie chart that\r\n     * looks like a quarter of a circle.\r\n     *\r\n     * NOTE: This setting is not supported in a 3D pie chart.\r\n     *\r\n     * @default -90\r\n     * @param value  Start angle (degrees)\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"startAngle\", value)) {\n        this.updateRadius();\n        this.updateSeriesAngles();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PieChart.prototype, \"endAngle\", {\n    /**\r\n     * @return End angle (degrees)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"endAngle\");\n    },\n\n    /**\r\n     * End angle of the Pie circle. (degrees)\r\n     *\r\n     * Normally, a pie chart ends (the right side of the last slice is drawn)\r\n     * at the top center. (at 270 degrees)\r\n     *\r\n     * You can use `endAngle` to change this setting.\r\n     *\r\n     * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n     * needs to be 360.\r\n     *\r\n     * However, it's **not** necessary to do so. You can set to those lesser\r\n     * numbers, to create semi-circles.\r\n     *\r\n     * E.g. `startAngle = -90` with `endAngle = 0` will create a Pie chart that\r\n     * looks like a quarter of a circle.\r\n     *\r\n     * NOTE: This setting is not supported in a 3D pie chart.\r\n     *\r\n     * @default 270\r\n     * @param value  End angle (degrees)\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"endAngle\", value)) {\n        this.updateRadius();\n        this.updateSeriesAngles();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return PieChart;\n}(PercentChart);\n\nexport { PieChart };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"PieChart\"] = PieChart;\nregistry.registeredClasses[\"PieChartDataItem\"] = PieChartDataItem;","map":null,"metadata":{},"sourceType":"module"}