{"ast":null,"code":"import * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { EventDispatcher } from \"./EventDispatcher\";\nimport * as $array from \"./Array\";\nimport * as $iter from \"./Iterator\";\nimport * as $type from \"./Type\";\n/**\r\n * Ordered list contains values of any type in an indexed array.\r\n */\n\nvar OrderedList =\n/** @class */\nfunction () {\n  /**\r\n   * Constructor\r\n   *\r\n   * @param initial  Inital list of values to add to list\r\n   */\n  function OrderedList(initial) {\n    /**\r\n     * Holds list values.\r\n     */\n    this._values = [];\n    /**\r\n     * Event dispatcher.\r\n     */\n\n    this.events = new EventDispatcher();\n\n    if (initial != null) {\n      this.setAll(initial);\n    }\n  }\n\n  Object.defineProperty(OrderedList.prototype, \"values\", {\n    /**\r\n     * All items of the list.\r\n     *\r\n     * Do not modify the list directly. Rather use `insert()` and `remove()`\r\n     * methods.\r\n     *\r\n     * @return List values\r\n     */\n    get: function () {\n      return this._values;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Inserts a value into list item array.\r\n   *\r\n   * @param value  Value\r\n   */\n\n  OrderedList.prototype._insert = function (value) {\n    this._values.push(value);\n\n    return this._values.length - 1;\n  };\n\n  Object.defineProperty(OrderedList.prototype, \"length\", {\n    /**\r\n     * Number of items in the list.\r\n     *\r\n     * @readonly\r\n     * @return Length\r\n     */\n    get: function () {\n      return this._values.length;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns the index of the specific `value`.\r\n   *\r\n   * -1 if not found.\r\n   *\r\n   * @param value  Value\r\n   * @return Index\r\n   */\n\n  OrderedList.prototype.indexOf = function (value) {\n    return $array.indexOf(this._values, value);\n  };\n  /**\r\n   * Checks if list contains the `value`.\r\n   *\r\n   * @param value  Value\r\n   * @return In the list?\r\n   */\n\n\n  OrderedList.prototype.contains = function (value) {\n    return this.indexOf(value) !== -1;\n  };\n  /**\r\n   * Returns an item at specific `index`.\r\n   *\r\n   * @param index  Index\r\n   * @return Item\r\n   */\n\n\n  OrderedList.prototype.getIndex = function (index) {\n    return this._values[index];\n  };\n\n  Object.defineProperty(OrderedList.prototype, \"first\", {\n    /**\r\n     * First item in the list.\r\n     *\r\n     * @return Item\r\n     */\n    get: function () {\n      return this._values[0];\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(OrderedList.prototype, \"last\", {\n    /**\r\n     * Last item in the list.\r\n     *\r\n     * @return Item\r\n     */\n    get: function () {\n      return this._values[this._values.length - 1];\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Inserts a value into list.\r\n   *\r\n   * @param value  Value\r\n   */\n\n  OrderedList.prototype.insert = function (value) {\n    var index = this._insert(value);\n\n    if (this.events.isEnabled(\"inserted\")) {\n      this.events.dispatchImmediately(\"inserted\", {\n        type: \"inserted\",\n        target: this,\n        index: index,\n        newValue: value\n      });\n    }\n  };\n  /**\r\n   * Removes an item with the `value` from the list.\r\n   *\r\n   * @param value  Value\r\n   */\n\n\n  OrderedList.prototype.remove = function (value) {\n    var index = this.indexOf(value);\n\n    if (index !== -1) {\n      var oldValue = this._values[index];\n      $array.removeIndex(this._values, index);\n\n      if (this.events.isEnabled(\"removed\")) {\n        this.events.dispatchImmediately(\"removed\", {\n          type: \"removed\",\n          target: this,\n          index: index,\n          oldValue: oldValue\n        });\n      }\n    }\n  };\n  /**\r\n   * Sets multiple items to the list.\r\n   *\r\n   * All current items are removed.\r\n   *\r\n   * @param newArray  New items\r\n   */\n\n\n  OrderedList.prototype.setAll = function (newArray) {\n    var _this = this;\n\n    $array.eachReverse(this._values, function (x, i) {\n      _this._values.pop();\n\n      if (_this.events.isEnabled(\"removed\")) {\n        _this.events.dispatchImmediately(\"removed\", {\n          type: \"removed\",\n          target: _this,\n          index: i,\n          oldValue: x\n        });\n      }\n    });\n    $array.each(newArray, function (value) {\n      _this.insert(value);\n    });\n  };\n  /**\r\n   * Removes all items from the list.\r\n   */\n\n\n  OrderedList.prototype.clear = function () {\n    this.setAll([]);\n  };\n  /**\r\n   * Returns part of the list between `start` and `end` indexes, as a new\r\n   * [[OrderedList]].\r\n   *\r\n   * @param start  Start index\r\n   * @param end    End index\r\n   * @return Items in range\r\n   */\n\n\n  OrderedList.prototype.slice = function (start, end) {\n    var out = new OrderedList();\n    out._values = this._values.slice(start, end);\n    return out;\n  };\n  /**\r\n   * Finds a closest available index to the `value` in specified direction.\r\n   *\r\n   * @ignore exclude from docs\r\n   * @param value      value to search for\r\n   * @param fn         A callback function that returns value of the item\r\n   * @param direction  Direciton\r\n   * @return Index\r\n   */\n\n\n  OrderedList.prototype.findClosestIndex = function (value, fn, direction) {\n    if (direction === void 0) {\n      direction = \"any\";\n    } // Init temporary values\n\n\n    var closestIndex = -1;\n    var closestValue;\n    var closestDifference;\n    var i = 0;\n    $iter.eachContinue(this.iterator(), function (element) {\n      var item = fn(element); // Calc difference\n\n      if (direction === \"any\") {\n        // Exact match?\n        if (item === value) {\n          // Found exact value - don't bother searching further\n          closestIndex = i;\n          return false;\n        }\n\n        var difference = Math.abs(value - item);\n\n        if (!$type.hasValue(closestDifference) || closestDifference > difference) {\n          closestIndex = i;\n          closestValue = item;\n          closestDifference = difference;\n        }\n      } else if (direction === \"left\" && item < value) {\n        if (!$type.hasValue(closestValue) || closestValue < item) {\n          closestIndex = i;\n          closestValue = item;\n        }\n      } else if (direction === \"right\" && item >= value) {\n        if (!$type.hasValue(closestValue) || closestValue >= item) {\n          closestIndex = i;\n          closestValue = item;\n        }\n      }\n\n      ++i;\n      return true;\n    }); // Found nothing?\n\n    if (closestIndex === -1) {\n      if (direction === \"left\") {\n        // Use First one\n        closestIndex = 0;\n      } else if (direction === \"right\") {\n        // Use last item\n        closestIndex = this.length - 1;\n      }\n    }\n\n    return closestIndex;\n  };\n  /**\r\n   * Returns a list iterator.\r\n   *\r\n   * @return Iterator\r\n   */\n\n\n  OrderedList.prototype.iterator = function () {\n    return $iter.fromArray(this._values);\n  };\n  /**\r\n   * Returns an ES6 iterator for the list.\r\n   */\n\n\n  OrderedList.prototype[Symbol.iterator] = function () {\n    var length, i;\n    return tslib_1.__generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          length = this._values.length;\n          i = 0;\n          _a.label = 1;\n\n        case 1:\n          if (!(i < length)) return [3\n          /*break*/\n          , 4];\n          return [4\n          /*yield*/\n          , this._values[i]];\n\n        case 2:\n          _a.sent();\n\n          _a.label = 3;\n\n        case 3:\n          ++i;\n          return [3\n          /*break*/\n          , 1];\n\n        case 4:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  };\n  /**\r\n   * Calls `f` for each element in the list.\r\n   */\n\n\n  OrderedList.prototype.each = function (f) {\n    $array.each(this._values, f);\n  };\n\n  return OrderedList;\n}();\n\nexport { OrderedList };\n/**\r\n * A list where all items are ordered according to specific ordering function,\r\n * which is passed in via constructor parameter, when creating an instance of\r\n * [[SortedList]].\r\n */\n\nvar SortedList =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(SortedList, _super);\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param sort  Ordering function\r\n   */\n\n\n  function SortedList(sort) {\n    var _this = _super.call(this) || this;\n\n    _this._ordering = sort;\n    return _this;\n  }\n  /**\r\n   * Inserts item into the list.\r\n   *\r\n   * @param value  Item\r\n   */\n\n\n  SortedList.prototype._insert = function (value) {\n    var index = $array.getSortedIndex(this._values, this._ordering, value).index;\n    $array.insertIndex(this._values, index, value);\n    return index;\n  };\n  /**\r\n   * Returns index of the item in list if found.\r\n   *\r\n   * -1 if item is not in the list.\r\n   *\r\n   * @param value  Item to search for\r\n   * @return Index\r\n   */\n\n\n  SortedList.prototype.indexOf = function (value) {\n    var _a = $array.getSortedIndex(this._values, this._ordering, value),\n        found = _a.found,\n        index = _a.index;\n\n    if (found) {\n      return index;\n    } else {\n      return -1;\n    }\n  };\n  /**\r\n   * [udpate description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   * @param value [description]\r\n   */\n\n\n  SortedList.prototype.update = function (value) {\n    // @todo test this\n    var index = $array.indexOf(this._values, value); // @todo throw an error if it doesn't exist ?\n\n    if (index !== -1) {\n      var last = this._values.length - 1; // Check if the current ordering is correct\n\n      if (!((index === 0 || this._ordering(this._values[index - 1], value) < 0) && (index === last || this._ordering(value, this._values[index + 1]) < 0))) {\n        // TODO send remove/insert/move events\n        $array.removeIndex(this._values, index);\n\n        this._insert(value);\n      }\n    }\n  };\n\n  return SortedList;\n}(OrderedList);\n\nexport { SortedList };\n/**\r\n * A version of a [[OrderedList]] that has a \"template\".\r\n *\r\n * A template is an instance of an object, that can be used to create new\r\n * elements in the list without actually needing to create instances for those.\r\n *\r\n * When new element is created in the list, e.g. by calling its `create()`\r\n * method, an exact copy of the element is created (including properties and\r\n * other attributes), inserted into the list and returned.\r\n */\n\nvar OrderedListTemplate =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(OrderedListTemplate, _super);\n  /**\r\n   * Constructor\r\n   *\r\n   * @param t Template object\r\n   */\n\n\n  function OrderedListTemplate(t) {\n    var _this = _super.call(this) || this;\n\n    _this.template = t;\n    return _this;\n  }\n\n  Object.defineProperty(OrderedListTemplate.prototype, \"template\", {\n    /**\r\n     * @return Template object\r\n     */\n    get: function () {\n      return this._template;\n    },\n\n    /**\r\n     * A \"template\" object to copy all properties from when creating new list\r\n     * items.\r\n     *\r\n     * @param v  Template object\r\n     */\n    set: function (v) {\n      v.isTemplate = true;\n      this._template = v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Copies all elements from other list.\r\n   *\r\n   * @param source  Source list\r\n   */\n\n  OrderedListTemplate.prototype.copyFrom = function (source) {\n    var _this = this;\n\n    $iter.each(source.iterator(), function (value) {\n      _this.insert(value.clone());\n    });\n  };\n  /**\r\n   * Returns part of the list, starting at `start` and ending at `end` indexes,\r\n   * as a new [[OrderedListTemplate]].\r\n   *\r\n   * @param start  Start index\r\n   * @param end    End index\r\n   * @return New list\r\n   */\n\n\n  OrderedListTemplate.prototype.slice = function (start, end) {\n    var out = new OrderedListTemplate(this.template);\n    out._values = this._values.slice(start, end);\n    return out;\n  };\n\n  OrderedListTemplate.prototype.create = function (make) {\n    var clone = make != null ? new make() : this.template.clone();\n    this.insert(clone);\n    return clone;\n  };\n\n  return OrderedListTemplate;\n}(OrderedList);\n\nexport { OrderedListTemplate };\n/**\r\n * A version of a [[SortedList]] that has a \"template\".\r\n *\r\n * A template is an instance of an object, that can be used to create new\r\n * elements in the list without actually needing to create instances for those.\r\n *\r\n * When new element is created in the list, e.g. by calling its `create()`\r\n * method, an exact copy of the element is created (including properties and\r\n * other attributes), inserted into the list and returned.\r\n */\n\nvar SortedListTemplate =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(SortedListTemplate, _super);\n  /**\r\n   * Constructor\r\n   *\r\n   * @param t     Template object\r\n   * @param sort  Ordering function\r\n   */\n\n\n  function SortedListTemplate(t, sort) {\n    var _this = _super.call(this, sort) || this;\n\n    _this.template = t;\n    return _this;\n  }\n\n  Object.defineProperty(SortedListTemplate.prototype, \"template\", {\n    /**\r\n     * @return Template object\r\n     */\n    get: function () {\n      return this._template;\n    },\n\n    /**\r\n     * A \"template\" object to copy all properties from when creating new list\r\n     * items.\r\n     *\r\n     * @param v  Template object\r\n     */\n    set: function (v) {\n      v.isTemplate = true;\n      this._template = v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Copies all elements from other list.\r\n   *\r\n   * @param source  Source list\r\n   */\n\n  SortedListTemplate.prototype.copyFrom = function (source) {\n    var _this = this;\n\n    $iter.each(source.iterator(), function (value) {\n      _this.insert(value.clone());\n    });\n  };\n\n  SortedListTemplate.prototype.create = function (make) {\n    var clone = make != null ? new make() : this.template.clone();\n    this.insert(clone);\n    return clone;\n  };\n\n  return SortedListTemplate;\n}(SortedList);\n\nexport { SortedListTemplate };","map":null,"metadata":{},"sourceType":"module"}