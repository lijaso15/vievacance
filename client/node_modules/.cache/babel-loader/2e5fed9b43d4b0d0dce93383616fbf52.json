{"ast":null,"code":"/**\r\n * Interaction manages all aspects of user interaction - mouse move,\r\n * click, hover, drag events, touch gestures.\r\n *\r\n * [[InteractionObject]] elements that want to use certain events, must attach event\r\n * listeners to Interaction instance.\r\n *\r\n * Interaction itself will not modify [[InteractionObject]] elements, it will be up to\r\n * those elements to handle interaction information received via event triggers.\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { BaseObjectEvents } from \"../Base\";\nimport { List } from \"../utils/List\";\nimport { Animation } from \"../utils/Animation\";\nimport { MultiDisposer } from \"../utils/Disposer\";\nimport { InteractionObject } from \"./InteractionObject\";\nimport { InteractionKeyboardObject } from \"./InteractionKeyboardObject\";\nimport { Dictionary } from \"../utils/Dictionary\";\nimport { Inertia } from \"./Inertia\";\nimport { addEventListener } from \"../utils/DOM\";\nimport { keyboard } from \"../utils/Keyboard\";\nimport { system } from \"./../System\";\nimport * as $ease from \"../utils/Ease\";\nimport * as $math from \"../utils/Math\";\nimport * as $dom from \"../utils/DOM\";\nimport * as $iter from \"../utils/Iterator\";\nimport * as $type from \"../utils/Type\";\nimport * as $time from \"../utils/Time\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n* Interaction manages all aspects of user interaction - mouse move,\r\n* click, hover, drag events, touch gestures.\r\n*\r\n* [[InteractionObject]] elements that want to use certain events, must attach event\r\n* listeners to Interaction instance.\r\n*\r\n* Interaction itself will not modify [[InteractionObject]] elements, it will be up to\r\n* those elements to handle interaction information received via event triggers.\r\n*\r\n* @see {@link IInteractionEvents} for a list of available events\r\n*/\n\nvar Interaction =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Interaction, _super);\n  /**\r\n   * Constructor. Sets up universal document-wide move events to handle stuff\r\n   * outside particular chart container.\r\n   */\n\n\n  function Interaction() {\n    var _this = // Call super\n    _super.call(this) || this;\n    /**\r\n     * An indicator of global events were already initialized.\r\n     */\n\n\n    _this._globalEventsAdded = false;\n    /**\r\n     * Holds which mouse event listeners to use.\r\n     */\n\n    _this._pointerEvents = {\n      \"pointerdown\": \"mousedown\",\n      \"pointerup\": \"mouseup\",\n      \"pointermove\": \"mousemove\",\n      \"pointercancel\": \"mouseup\",\n      \"pointerover\": \"mouseover\",\n      \"pointerout\": \"mouseout\",\n      \"wheel\": \"wheel\"\n    };\n    /**\r\n     * Indicates if Interaction should use only \"pointer\" type events, like\r\n     * \"pointermove\", available in all modern browsers, ignoring \"legacy\"\r\n     * events, like \"touchmove\".\r\n     */\n\n    _this._usePointerEventsOnly = false;\n    /**\r\n     * Use only touch events (for touch only devices such as tablets and phones)\r\n     */\n\n    _this._useTouchEventsOnly = false;\n    /**\r\n     * Add special hover events. Normally, touch device tap will also simulate\r\n     * hover event. On some devices (ahem iOS) we want to prevent that so that\r\n     * over/out events are not duplicated.\r\n     */\n\n    _this._addHoverEvents = true;\n    /**\r\n     * Indicates if passive mode options is supported by this browser.\r\n     */\n\n    _this._passiveSupported = false;\n    /**\r\n     * Holds list of delayed events\r\n     */\n\n    _this._delayedEvents = {\n      out: []\n    };\n    /**\r\n     * List of objects that current have a pointer hovered over them.\r\n     */\n\n    _this.overObjects = new List();\n    /**\r\n     * List of objects that currently has a pressed pointer.\r\n     */\n\n    _this.downObjects = new List();\n    /**\r\n     * List of objects that need mouse position to be reported to them.\r\n     */\n\n    _this.trackedObjects = new List();\n    /**\r\n     * List of objects that are currently being dragged.\r\n     */\n\n    _this.transformedObjects = new List();\n    /**\r\n     * Holds all known pointers.\r\n     */\n\n    _this.pointers = new Dictionary();\n    /**\r\n     * Inertia options that need to be applied to after element drag, if it's\r\n     * `inert = true`.\r\n     *\r\n     * This is just a default, which can and probably will be overridden by\r\n     * actual elements.\r\n     */\n\n    _this.inertiaOptions = new Dictionary();\n    /**\r\n     * Default options for click events. These can be overridden in\r\n     * [[InteractionObject]].\r\n     */\n\n    _this.hitOptions = {\n      //\"holdTime\": 1000,\n      \"doubleHitTime\": 300,\n      //\"delayFirstHit\": false,\n      \"hitTolerance\": 10,\n      \"noFocus\": true\n    };\n    /**\r\n     * Default options for hover events. These can be overridden in\r\n     * [[InteractionObject]].\r\n     */\n\n    _this.hoverOptions = {\n      \"touchOutBehavior\": \"leave\",\n      \"touchOutDelay\": 1000\n    };\n    /**\r\n     * Default options for detecting a swipe gesture. These can be overridden in\r\n     * [[InteractionObject]].\r\n     */\n\n    _this.swipeOptions = {\n      \"time\": 500,\n      \"verticalThreshold\": 75,\n      \"horizontalThreshold\": 30\n    };\n    /**\r\n     * Default options for keyboard operations. These can be overridden in\r\n     * [[InteractionObject]].\r\n     */\n\n    _this.keyboardOptions = {\n      \"speed\": 0.1,\n      \"accelleration\": 1.2,\n      \"accellerationDelay\": 2000\n    }; // Set class name\n\n    _this.className = \"Interaction\"; // Create InteractionObject for <body>\n\n    _this.body = _this.getInteraction(document.body);\n\n    _this._disposers.push(_this.body); // Detect browser capabilities and determine what event listeners to use\n\n\n    if (window.hasOwnProperty(\"PointerEvent\")) {\n      // IE10+/Edge without touch controls enabled\n      _this._pointerEvents.pointerdown = \"pointerdown\";\n      _this._pointerEvents.pointerup = \"pointerup\";\n      _this._pointerEvents.pointermove = \"pointermove\";\n      _this._pointerEvents.pointercancel = \"pointercancel\";\n      _this._pointerEvents.pointerover = \"pointerover\";\n      _this._pointerEvents.pointerout = \"pointerout\"; //this._usePointerEventsOnly = true;\n    } else if (window.hasOwnProperty(\"MSPointerEvent\")) {\n      // IE9\n      _this._pointerEvents.pointerdown = \"MSPointerDown\";\n      _this._pointerEvents.pointerup = \"MSPointerUp\";\n      _this._pointerEvents.pointermove = \"MSPointerMove\";\n      _this._pointerEvents.pointercancel = \"MSPointerUp\";\n      _this._pointerEvents.pointerover = \"MSPointerOver\";\n      _this._pointerEvents.pointerout = \"MSPointerOut\"; //this._usePointerEventsOnly = true;\n    } else if (typeof matchMedia !== \"undefined\" && matchMedia('(pointer:fine)').matches) {\n      // This is only for Safari as it does not support PointerEvent\n      // Do nothing and let it use regular `mouse*` events\n      // Hi Apple ;)\n      // Additionally disable hover events for iOS devices\n      if ('ontouchstart' in window) {\n        _this._addHoverEvents = false;\n        _this._useTouchEventsOnly = true;\n      }\n    } else if (window.navigator.userAgent.match(/MSIE /)) {\n      // Oh looky, an MSIE that does not support PointerEvent. Hi granpa IE9!\n      _this._usePointerEventsOnly = true;\n    } else {\n      // Uses defaults for normal browsers\n      // We also assume that this must be a touch device that does not have\n      // any pointer events\n      _this._useTouchEventsOnly = true;\n    } // Detect if device has a mouse\n    // This is turning out to be not reliable\n    // @todo remove\n\n    /*if (!window.navigator.msPointerEnabled && (typeof matchMedia !== \"undefined\") && !matchMedia('(pointer:fine)').matches && !this.fullFF()) {\r\n        this._useTouchEventsOnly = true;\r\n    }*/\n    // Detect proper mouse wheel events\n\n\n    if (\"onwheel\" in document.createElement(\"div\")) {\n      // Modern browsers\n      _this._pointerEvents.wheel = \"wheel\";\n    } else if ($type.hasValue(document.onmousewheel)) {\n      // Webkit and IE support at least \"mousewheel\"\n      _this._pointerEvents.wheel = \"mousewheel\";\n    } // Set up default inertia options\n\n\n    _this.inertiaOptions.setKey(\"move\", {\n      \"time\": 100,\n      \"duration\": 500,\n      \"factor\": 1,\n      \"easing\": $ease.polyOut3\n    });\n\n    _this.inertiaOptions.setKey(\"resize\", {\n      \"time\": 100,\n      \"duration\": 500,\n      \"factor\": 1,\n      \"easing\": $ease.polyOut3\n    }); // Check for passive mode support\n\n\n    try {\n      var target_1 = _this;\n      var options = Object.defineProperty({}, \"passive\", {\n        get: function () {\n          target_1._passiveSupported = true;\n        }\n      });\n      window.addEventListener(\"test\", options, options);\n      window.removeEventListener(\"test\", options, options);\n    } catch (err) {\n      _this._passiveSupported = false;\n    } // Apply theme\n\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * This is a nasty detection for Firefox. The reason why we have is that\r\n   * Firefox ESR version does not support matchMedia correctly.\r\n   *\r\n   * On iOS, Firefox uses different userAgent, so we don't have to detect iOS.\r\n   *\r\n   * @return Full Firefox?\r\n   */\n\n\n  Interaction.prototype.fullFF = function () {\n    return window.navigator.userAgent.match(/Firefox/) && !window.navigator.userAgent.match(/Android/);\n  };\n\n  Interaction.prototype.debug = function () {};\n  /**\r\n   * ==========================================================================\r\n   * Processing\r\n   * ==========================================================================\r\n   * @hidden\r\n   */\n\n  /**\r\n   * Sets up global events.\r\n   *\r\n   * We need this so that we can track drag movement beyond chart's container.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Interaction.prototype.addGlobalEvents = function () {\n    var _this = this;\n\n    if (!this._globalEventsAdded) {\n      if (!this._useTouchEventsOnly) {\n        this._disposers.push(addEventListener(document, this._pointerEvents.pointerdown, function (ev) {\n          _this.handleGlobalPointerDown(ev);\n        }));\n\n        this._disposers.push(addEventListener(document, this._pointerEvents.pointermove, function (ev) {\n          _this.handleGlobalPointerMove(ev);\n        }));\n\n        this._disposers.push(addEventListener(document, this._pointerEvents.pointerup, function (ev) {\n          _this.handleGlobalPointerUp(ev);\n        }));\n\n        this._disposers.push(addEventListener(document, this._pointerEvents.pointercancel, function (ev) {\n          _this.handleGlobalPointerUp(ev, true);\n        }));\n      } // No need to duplicate events for hubrid systems that support both\n      // pointer events and touch events. Touch events are need only for\n      // some touch-only systems, like Mobile Safari.\n\n\n      if (!this._usePointerEventsOnly) {\n        this._disposers.push(addEventListener(document, \"touchstart\", function (ev) {\n          _this.handleGlobalTouchStart(ev);\n        }));\n\n        this._disposers.push(addEventListener(document, \"touchmove\", function (ev) {\n          _this.handleGlobalTouchMove(ev);\n        }));\n\n        this._disposers.push(addEventListener(document, \"touchend\", function (ev) {\n          _this.handleGlobalTouchEnd(ev);\n        }));\n      }\n\n      this._disposers.push(addEventListener(document, \"keydown\", function (ev) {\n        _this.handleGlobalKeyDown(ev);\n      }));\n\n      this._disposers.push(addEventListener(document, \"keyup\", function (ev) {\n        _this.handleGlobalKeyUp(ev);\n      }));\n\n      this._globalEventsAdded = true;\n    }\n  };\n  /**\r\n   * Sets if [[InteractionObject]] is clickable.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io [[InteractionObject]] instance\r\n   */\n\n\n  Interaction.prototype.processClickable = function (io) {\n    // Add or remove touch events\n    this.processTouchable(io);\n  };\n  /**\r\n   * Sets if [[InteractionObject]] will display context menu when right-clicked.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io [[InteractionObject]] instance\r\n   */\n\n\n  Interaction.prototype.processContextMenu = function (io) {\n    if (io.contextMenuDisabled) {\n      if (!io.eventDisposers.hasKey(\"contextMenuDisabled\")) {\n        io.eventDisposers.setKey(\"contextMenuDisabled\", addEventListener(io.element, \"contextmenu\", function (e) {\n          e.preventDefault();\n        }));\n      }\n    } else {\n      if (io.eventDisposers.hasKey(\"contextMenuDisabled\")) {\n        io.eventDisposers.getKey(\"contextMenuDisabled\").dispose();\n      }\n    }\n  };\n  /**\r\n   * Sets if [[InteractionObject]] is hoverable.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io [[InteractionObject]] instance\r\n   */\n\n\n  Interaction.prototype.processHoverable = function (io) {\n    var _this = this;\n\n    if (io.hoverable || io.trackable) {\n      // Add global events\n      this.addGlobalEvents(); // Add hover styles\n\n      this.applyCursorOverStyle(io); // Add local events\n\n      if (!io.eventDisposers.hasKey(\"hoverable\") && this._addHoverEvents) {\n        io.eventDisposers.setKey(\"hoverable\", new MultiDisposer([addEventListener(io.element, this._pointerEvents.pointerout, function (e) {\n          return _this.handlePointerOut(io, e);\n        }), addEventListener(io.element, this._pointerEvents.pointerover, function (e) {\n          return _this.handlePointerOver(io, e);\n        })]));\n      }\n\n      if (io.trackable) {//sprite.addEventListener(\"touchmove\", this.handleTouchMove, false, this);\n      }\n    } else {\n      var disposer = io.eventDisposers.getKey(\"hoverable\");\n\n      if (disposer != null) {\n        disposer.dispose();\n        io.eventDisposers.removeKey(\"hoverable\");\n      }\n    } // Add or remove touch events\n\n\n    this.processTouchable(io);\n  };\n  /**\r\n   * Sets up [[InteractionObject]] as movable. Movable can be any\r\n   * transformation, e.g. drag, swipe, resize, track.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io  Element\r\n   */\n\n\n  Interaction.prototype.processMovable = function (io) {\n    // Add unified events\n    if (io.draggable || io.swipeable || io.trackable || io.resizable) {\n      // Prep the element\n      if (!this.isGlobalElement(io) && !io.isTouchProtected) {\n        this.prepElement(io);\n      } // Add hover styles\n\n\n      this.applyCursorOverStyle(io);\n    } // Add or remove touch events\n\n\n    this.processTouchable(io);\n  };\n  /**\r\n   * Checks if [[InteractionObject]] is trackable and sets relative events.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io  Element\r\n   */\n\n\n  Interaction.prototype.processTrackable = function (io) {\n    this.processHoverable(io);\n    this.processMovable(io);\n\n    if (io.trackable) {\n      this.trackedObjects.moveValue(io);\n    } else {\n      this.trackedObjects.removeValue(io);\n    }\n  };\n  /**\r\n   * Checks if [[InteractionObject]] is draggable.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io  Element\r\n   */\n\n\n  Interaction.prototype.processDraggable = function (io) {\n    this.processMovable(io);\n  };\n  /**\r\n   * Checks if [[InteractionObject]] is swipeable and sets relative events.\r\n   *\r\n   * A swipe event is triggered when a horizontal drag of 75px or more (and\r\n   * less than 30px vertically) occurs within 700 milliseconds. This can be\r\n   * overridden in sprites [[swipeOptions]].\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io  Element\r\n   */\n\n\n  Interaction.prototype.processSwipeable = function (io) {\n    this.processMovable(io);\n  };\n  /**\r\n   * Checks if [[InteractionObject]] is resizable and attaches required events\r\n   * to it.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io  Element\r\n   */\n\n\n  Interaction.prototype.processResizable = function (io) {\n    this.processMovable(io);\n  };\n  /**\r\n   * Checks if [[InteractionObject]] is supposed to capture mouse wheel events\r\n   * and prepares it to catch those events.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io  Element\r\n   */\n\n\n  Interaction.prototype.processWheelable = function (io) {\n    var _this = this;\n\n    if (io.wheelable) {\n      //io.hoverable = true;\n      if (!io.eventDisposers.hasKey(\"wheelable\")) {\n        io.eventDisposers.setKey(\"wheelable\", new MultiDisposer([addEventListener(io.element, this._pointerEvents.wheel, function (e) {\n          return _this.handleMouseWheel(io, e);\n        }, this._passiveSupported ? {\n          passive: false\n        } : false), io.events.on(\"out\", function (e) {\n          if (io.wheelable) {\n            _this.unlockWheel();\n          }\n        }), io.events.on(\"over\", function (e) {\n          if (io.wheelable) {\n            _this.lockWheel();\n          }\n        })]));\n      }\n    } else {\n      var disposer = io.eventDisposers.getKey(\"wheelable\");\n\n      if (disposer != null) {\n        disposer.dispose();\n        io.eventDisposers.removeKey(\"wheelable\");\n      }\n    }\n  };\n  /**\r\n   * Checks if [[InteractionObject]] is focusable. A focusable element is an\r\n   * element that will be highlighted when users presses TAB key. If the\r\n   * element is focusable, this function will attach relative focus/blur\r\n   * events to it.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io  Element\r\n   */\n\n\n  Interaction.prototype.processFocusable = function (io) {\n    var _this = this;\n\n    if (io.focusable === true && io.tabindex > -1 && !this._useTouchEventsOnly) {\n      if (!io.eventDisposers.hasKey(\"focusable\")) {\n        io.eventDisposers.setKey(\"focusable\", new MultiDisposer([addEventListener(io.element, \"focus\", function (e) {\n          return _this.handleFocus(io, e);\n        }), addEventListener(io.element, \"blur\", function (e) {\n          return _this.handleBlur(io, e);\n        }), addEventListener(io.element, this._pointerEvents.pointerdown, function (e) {\n          return _this.handleFocusBlur(io, e);\n        }), addEventListener(io.element, \"touchstart\", function (e) {\n          return _this.handleFocusBlur(io, e);\n        }, this._passiveSupported ? {\n          passive: false\n        } : false)]));\n      }\n    } else {\n      var disposer = io.eventDisposers.getKey(\"focusable\");\n\n      if (disposer != null) {\n        disposer.dispose();\n        io.eventDisposers.removeKey(\"focusable\");\n      }\n    }\n  };\n  /**\r\n   * Checks if [[InteractionObject]] is \"touchable\". It means any interaction\r\n   * whatsoever: mouse click, touch screen tap, swipe, drag, resize, etc.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io  Element\r\n   */\n\n\n  Interaction.prototype.processTouchable = function (io) {\n    var _this = this; // Add unified events\n\n\n    if (io.clickable || io.hoverable || io.trackable || io.draggable || io.swipeable || io.resizable) {\n      // Add global events\n      this.addGlobalEvents(); // Add local events\n\n      if (!io.eventDisposers.hasKey(\"touchable\")) {\n        if (!this._useTouchEventsOnly && !this._usePointerEventsOnly) {\n          io.eventDisposers.setKey(\"touchable\", new MultiDisposer([addEventListener(io.element, this._pointerEvents.pointerdown, function (e) {\n            return _this.handlePointerDown(io, e);\n          }), addEventListener(io.element, \"touchstart\", function (e) {\n            return _this.handleTouchDown(io, e);\n          }, this._passiveSupported ? {\n            passive: false\n          } : false)]));\n        } else if (!this._useTouchEventsOnly) {\n          io.eventDisposers.setKey(\"touchable\", addEventListener(io.element, this._pointerEvents.pointerdown, function (e) {\n            return _this.handlePointerDown(io, e);\n          }));\n        } else if (!this._usePointerEventsOnly) {\n          io.eventDisposers.setKey(\"touchable\", addEventListener(io.element, \"touchstart\", function (e) {\n            return _this.handleTouchDown(io, e);\n          }, this._passiveSupported ? {\n            passive: false\n          } : false));\n        }\n      }\n    } else {\n      var disposer = io.eventDisposers.getKey(\"touchable\");\n\n      if (disposer != null) {\n        disposer.dispose();\n        io.eventDisposers.removeKey(\"touchable\");\n      }\n    }\n  };\n  /**\r\n   * ==========================================================================\r\n   * Non-pointer events\r\n   * ==========================================================================\r\n   * @hidden\r\n   */\n\n  /**\r\n   * Dispatches \"focus\" event when element gains focus.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io  Element\r\n   * @param ev  Original event\r\n   */\n\n\n  Interaction.prototype.handleFocus = function (io, ev) {\n    if (!io.focusable) {\n      ev.preventDefault();\n      return;\n    }\n\n    io.isFocused = true;\n\n    if (io.events.isEnabled(\"focus\") && !system.isPaused) {\n      var imev = {\n        type: \"focus\",\n        target: io,\n        event: ev\n      };\n      io.events.dispatchImmediately(\"focus\", imev);\n    }\n  };\n  /**\r\n   * Used by regular click events to prevent focus if \"noFocus\" is set.\r\n   *\r\n   * This should not be called by \"focus\" handlers.\r\n   *\r\n   * @param io  Element\r\n   * @param ev  Original event\r\n   */\n\n\n  Interaction.prototype.handleFocusBlur = function (io, ev) {\n    if (io.focusable !== false && this.getHitOption(io, \"noFocus\")) {\n      io.events.once(\"focus\", function () {\n        io.events.disableType(\"blur\");\n        $dom.blur();\n\n        if (io.sprite) {\n          io.sprite.handleBlur();\n        }\n\n        io.events.enableType(\"blur\");\n      });\n    }\n  };\n  /**\r\n   * Dispatches \"blur\" event when element loses focus.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io  Element\r\n   * @param ev  Original event\r\n   */\n\n\n  Interaction.prototype.handleBlur = function (io, ev) {\n    if (!io.focusable) {\n      ev.preventDefault();\n      return;\n    }\n\n    io.isFocused = false;\n\n    if (io.events.isEnabled(\"blur\") && !system.isPaused) {\n      var imev = {\n        type: \"blur\",\n        target: io,\n        event: ev\n      };\n      io.events.dispatchImmediately(\"blur\", imev);\n    }\n  };\n  /**\r\n   * ==========================================================================\r\n   * Global keyboard-related even handlers\r\n   * ==========================================================================\r\n   * @hidden\r\n   */\n\n  /**\r\n   * Checks if there is an item that has currently focus and that they key is\r\n   * one of the directional keys. If both of the conditions are true, it\r\n   * creates an object to simulate movement of dragable element with keyboard.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param ev An original keyboard event\r\n   */\n\n\n  Interaction.prototype.handleGlobalKeyDown = function (ev) {\n    if (this.focusedObject) {\n      if (keyboard.isKey(ev, \"esc\")) {\n        // ESC removes focus\n        $dom.blur();\n      } else if (this.focusedObject.draggable && keyboard.isKey(ev, [\"up\", \"down\", \"left\", \"right\"])) {\n        // Prevent scrolling of the document\n        ev.preventDefault(); // Get focused object\n\n        var io = this.focusedObject; // Get particular key\n\n        var disposerKey = \"interactionKeyboardObject\"; // If such disposer already exists we know the event is going on so we\n        // just move on\n\n        if (io.eventDisposers.hasKey(disposerKey)) {\n          return;\n        } // Create a keyboard mover\n\n\n        var ko = new InteractionKeyboardObject(io, ev);\n        io.eventDisposers.setKey(disposerKey, ko);\n\n        switch (keyboard.getEventKey(ev)) {\n          case \"up\":\n            ko.directionY = -1;\n            break;\n\n          case \"down\":\n            ko.directionY = 1;\n            break;\n\n          case \"left\":\n            ko.directionX = -1;\n            break;\n\n          case \"right\":\n            ko.directionX = 1;\n            break;\n        }\n      }\n    }\n  };\n  /**\r\n   * Dispatches related events when the keyboard key is realeasd.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param ev An original keyboard event\r\n   */\n\n\n  Interaction.prototype.handleGlobalKeyUp = function (ev) {\n    var disposerKey = \"interactionKeyboardObject\";\n\n    if (this.focusedObject) {\n      var disposer = this.focusedObject.eventDisposers.getKey(disposerKey);\n\n      if (disposer != null) {\n        // Prevent scrolling of the document\n        ev.preventDefault(); // Dispose stuff\n\n        disposer.dispose();\n        this.focusedObject.eventDisposers.removeKey(disposerKey);\n      }\n    }\n  };\n  /**\r\n   * ==========================================================================\r\n   * Global pointer-related even handlers\r\n   * ==========================================================================\r\n   * @hidden\r\n   */\n\n  /**\r\n   * Handler for a global \"pointermove\" event.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param ev Event object\r\n   */\n\n\n  Interaction.prototype.handleGlobalPointerMove = function (ev) {\n    // Get pointer\n    var pointer = this.getPointer(ev); // Update current point position\n\n    pointer.point = this.getPointerPoint(ev); // Prepare and fire global event\n\n    if (this.events.isEnabled(\"track\") && !system.isPaused) {\n      var imev = {\n        type: \"track\",\n        target: this,\n        event: ev,\n        pointer: pointer,\n        touch: pointer.touch\n      };\n      this.events.dispatchImmediately(\"track\", imev);\n    } // Track\n\n\n    this.addBreadCrumb(pointer, pointer.point); // Process further\n\n    this.handleGlobalMove(pointer, ev);\n  };\n  /**\r\n   * Handler for a global \"pointerdown\" event.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param ev Event object\r\n   */\n\n\n  Interaction.prototype.handleGlobalPointerDown = function (ev) {\n    // Remove delayed hovers\n    this.processDelayed(); // Get pointer\n\n    var pointer = this.getPointer(ev); // Prepare and fire global event\n\n    if (this.events.isEnabled(\"down\") && !system.isPaused) {\n      var imev = {\n        type: \"down\",\n        target: this,\n        event: ev,\n        pointer: pointer,\n        touch: pointer.touch\n      };\n      this.events.dispatchImmediately(\"down\", imev);\n    }\n  };\n  /**\r\n   * Prevents touch action from firing.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param ev Event\r\n   */\n\n\n  Interaction.prototype.preventTouchAction = function (ev) {\n    if (!ev.defaultPrevented) {\n      ev.preventDefault();\n    }\n  };\n  /**\r\n   * Handler for a global \"pointerup\" event.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param ev Event object\r\n   */\n\n\n  Interaction.prototype.handleGlobalPointerUp = function (ev, cancelled) {\n    if (cancelled === void 0) {\n      cancelled = false;\n    } // Get pointer\n\n\n    var pointer = this.getPointer(ev); // Prepare and fire global event\n\n    if (this.events.isEnabled(\"up\") && !system.isPaused) {\n      var imev = {\n        type: \"up\",\n        target: this,\n        event: ev,\n        pointer: pointer,\n        touch: pointer.touch\n      };\n      this.events.dispatchImmediately(\"up\", imev);\n    } // Process further\n\n\n    this.handleGlobalUp(pointer, ev, cancelled);\n  };\n  /**\r\n  * ==========================================================================\r\n  * Global touch-related even handlers\r\n  * ==========================================================================\r\n  */\n\n  /**\r\n   * Handler for a global \"touchmove\" event.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param ev Event object\r\n   */\n\n\n  Interaction.prototype.handleGlobalTouchMove = function (ev) {\n    // Process each changed touch point\n    for (var i = 0; i < ev.changedTouches.length; i++) {\n      // Get pointer\n      var pointer = this.getPointer(ev.changedTouches[i]); // Update current point position\n\n      pointer.point = this.getPointerPoint(ev.changedTouches[i]); // Prepare and fire global event\n\n      if (this.events.isEnabled(\"track\") && !system.isPaused) {\n        var imev = {\n          type: \"track\",\n          target: this,\n          event: ev,\n          pointer: pointer,\n          touch: pointer.touch\n        };\n        this.events.dispatchImmediately(\"track\", imev);\n      } // Track\n\n\n      this.addBreadCrumb(pointer, pointer.point); // Process further\n\n      this.handleGlobalMove(pointer, ev);\n    }\n  };\n  /**\r\n   * Handler for a global \"touchstart\" event.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param ev Event object\r\n   */\n\n\n  Interaction.prototype.handleGlobalTouchStart = function (ev) {\n    // Remove delayed hovers\n    this.processDelayed(); // Process each changed touch point\n\n    for (var i = 0; i < ev.changedTouches.length; i++) {\n      // Get pointer\n      var pointer = this.getPointer(ev.changedTouches[i]); // Prepare and fire global event\n\n      if (!this._usePointerEventsOnly && this.events.isEnabled(\"down\") && !system.isPaused) {\n        var imev = {\n          type: \"down\",\n          target: this,\n          event: ev,\n          pointer: pointer,\n          touch: pointer.touch\n        };\n        this.events.dispatchImmediately(\"down\", imev);\n      }\n    }\n  };\n  /**\r\n   * Handler for a global \"touchend\" event.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param ev Event object\r\n   */\n\n\n  Interaction.prototype.handleGlobalTouchEnd = function (ev) {\n    // Process each changed touch point\n    for (var i = 0; i < ev.changedTouches.length; i++) {\n      // Get pointer\n      var pointer = this.getPointer(ev.changedTouches[i]); // Prepare and fire global event\n\n      if (this.events.isEnabled(\"up\") && !system.isPaused) {\n        var imev = {\n          type: \"up\",\n          target: this,\n          event: ev,\n          pointer: pointer,\n          touch: pointer.touch\n        };\n        this.events.dispatchImmediately(\"up\", imev);\n      } // Handle element-related events\n\n\n      this.handleGlobalUp(pointer, ev);\n    }\n  };\n  /**\r\n   * ==========================================================================\r\n   * Element-specific pointer-related even handlers\r\n   * ==========================================================================\r\n   * @hidden\r\n   */\n\n  /**\r\n   * Handles event when pointer is over [[InteractionObject]] and button is\r\n   * pressed.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io  Element\r\n   * @param ev  Original event\r\n   */\n\n\n  Interaction.prototype.handlePointerDown = function (io, ev) {\n    // Stop further propagation so we don't get multiple triggers on hybrid\n    // devices (both mouse and touch capabilities)\n    //ev.preventDefault();\n    //ev.stopPropagation();\n    //if (ev.defaultPrevented) {\n    //}\n    // Get pointer\n    var pointer = this.getPointer(ev); // Ignore if it's anything but mouse's primary button\n\n    if (!pointer.touch && ev.which != 1 && ev.which != 3) {\n      return;\n    } // Set mouse button\n\n\n    pointer.button = ev.which; // Reset pointer\n\n    this.resetPointer(pointer, ev); // Process down\n\n    this.handleDown(io, pointer, ev);\n  };\n  /**\r\n   * Handles event when [[InteractionObject]] is hovered by a mouse pointer.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io  Element\r\n   * @param ev  Original event\r\n   */\n\n\n  Interaction.prototype.handlePointerOver = function (io, ev) {\n    // Get pointer\n    var pointer = this.getPointer(ev); // Process down\n\n    this.handleOver(io, pointer, ev);\n  };\n  /**\r\n   * Handles event when [[InteractionObject]] loses hover from a mouse pointer.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io  Element\r\n   * @param ev  Original event\r\n   */\n\n\n  Interaction.prototype.handlePointerOut = function (io, ev) {\n    // Get pointer\n    var pointer = this.getPointer(ev); // Process down\n\n    this.handleOut(io, pointer, ev);\n  };\n  /**\r\n   * Handles event when mouse wheel is crolled over the [[InteractionObject]].\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io  Element\r\n   * @param ev  Original event\r\n   * @todo Investigate more-cross browser stuff https://developer.mozilla.org/en-US/docs/Web/Events/wheel\r\n   */\n\n\n  Interaction.prototype.handleMouseWheel = function (io, ev) {\n    // Get pointer\n    var pointer = this.getPointer(ev); // Update current point position\n\n    pointer.point = this.getPointerPoint(ev); // Init delta values\n\n    var deltaX = 0,\n        deltaY = 0; // Set up modifier\n    // This is needed because FireFox reports wheel deltas in \"lines\" instead\n    // of pixels so we have to approximate pixel value\n\n    var mod = 1;\n\n    if (ev.deltaMode == 1) {\n      mod = 50;\n    } // Calculate deltas\n\n\n    if (ev instanceof WheelEvent) {\n      deltaX = Math.round(-1 * ev.wheelDeltaX || ev.deltaX) * mod;\n      deltaY = Math.round(-1 * ev.wheelDeltaY || ev.deltaY) * mod;\n    } else {\n      throw new Error(\"Invalid event type\");\n    } // Handle the event\n\n\n    this.handleWheel(io, pointer, deltaX, deltaY, ev);\n  };\n  /**\r\n   * ==========================================================================\r\n   * Element-specific touch-related even handlers\r\n   * ==========================================================================\r\n   * @hidden\r\n   */\n\n  /**\r\n    * Handles an event when an [[InteractionObject]] is touched on a touch\r\n    * device.\r\n    *\r\n    * @ignore Exclude from docs\r\n    * @param io  Element\r\n    * @param ev  Original event\r\n    */\n\n\n  Interaction.prototype.handleTouchDown = function (io, ev) {\n    // Stop further propagation so we don't get multiple triggers on hybrid\n    // devices (both mouse and touch capabilities)\n    //this.maybePreventDefault(io, ev);\n    //return;\n    // Process each changed touch point\n    for (var i = 0; i < ev.changedTouches.length; i++) {\n      // Get pointer\n      var pointer = this.getPointer(ev.changedTouches[i]);\n      this.maybePreventDefault(io, ev, pointer); // Reset pointer\n\n      this.resetPointer(pointer, ev.changedTouches[i]); // Process down\n\n      this.handleDown(io, pointer, ev);\n    }\n  };\n  /**\r\n   * ==========================================================================\r\n   * Universal handlers\r\n   * ==========================================================================\r\n   * @hidden\r\n   */\n\n  /**\r\n   * Handles click/tap. Checks for doublehit.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io       Interaction object\r\n   * @param pointer  Pointer\r\n   * @param ev       Original event\r\n   */\n\n\n  Interaction.prototype.handleHit = function (io, pointer, ev) {\n    // Check if this is a double-hit\n    var now = $time.getTime();\n\n    if (io.lastHit && io.lastHit >= now - this.getHitOption(io, \"doubleHitTime\")) {\n      // Yup - it's a double-hit\n      // Cancel the hit\n      //clearTimeout(io.lastHitPointer.hitTimeout);\n      // If it happened too fast it probably means that hybrid device just\n      // generated two events for the same tap\n      if (now - io.lastHit < 100) {\n        // Ignore\n        return;\n      } // Clear last hit\n\n\n      io.lastHit = undefined;\n      io.lastHitPointer = undefined; // Dispatch event\n\n      if (io.events.isEnabled(\"doublehit\") && !system.isPaused) {\n        var imev = {\n          type: \"doublehit\",\n          target: io,\n          point: pointer.point,\n          event: ev,\n          touch: pointer.touch\n        };\n        io.events.dispatchImmediately(\"doublehit\", imev);\n      }\n    } else {\n      // Log last hit\n      io.lastHit = now;\n      io.lastHitPointer = pointer;\n\n      if (pointer.button === 3) {\n        // Execute HIT now\n        if (io.events.isEnabled(\"rightclick\") && !system.isPaused) {\n          var imev = {\n            type: \"rightclick\",\n            target: io,\n            event: ev\n          };\n          io.events.dispatchImmediately(\"rightclick\", imev);\n        }\n      } else {\n        if (io.events.isEnabled(\"hit\") && !system.isPaused) {\n          var imev = {\n            type: \"hit\",\n            target: io,\n            event: ev,\n            point: pointer.point,\n            touch: pointer.touch\n          };\n          io.events.dispatchImmediately(\"hit\", imev);\n        }\n      }\n    }\n  };\n  /**\r\n   * Handles pointer hovering over [[InteractionObject]].\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io       Interaction object\r\n   * @param pointer  Pointer\r\n   * @param ev       Original event\r\n   * @param soft     Invoked by helper function\r\n   */\n\n\n  Interaction.prototype.handleOver = function (io, pointer, ev, soft) {\n    if (soft === void 0) {\n      soft = false;\n    }\n\n    if (!io.hoverable) {\n      return;\n    } // Remove any delayed outs\n\n\n    this.processDelayed(); // Add pointer\n\n    io.overPointers.moveValue(pointer); // Check if object is not yet hovered\n\n    if (!io.isHover) {\n      // Set element as hovered\n      io.isHover = true;\n      this.overObjects.moveValue(io); // Generate body track event. This is needed so that if element loads\n      // under unmoved mouse cursor, we still need all the actions that are\n      // required to happen to kick in.\n\n      this.handleTrack(this.body, pointer, ev, true); // Event\n\n      if (io.events.isEnabled(\"over\") && !system.isPaused) {\n        var imev = {\n          type: \"over\",\n          target: io,\n          event: ev,\n          pointer: pointer,\n          touch: pointer.touch\n        };\n        io.events.dispatchImmediately(\"over\", imev);\n      }\n    }\n  };\n  /**\r\n   * Handles when [[InteractionObject]] is no longer hovered.\r\n   *\r\n   * If `soft = true`, this means that method is being invoked by some other\r\n   * code, not hard \"out\" function, like `handleUp` which implies we need to\r\n   * run additional checks before unhovering the object.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io       Interaction object\r\n   * @param pointer  Pointer\r\n   * @param ev       Original event\r\n   * @param soft     Invoked by helper function\r\n   * @param force    Force imediate out\r\n   */\n\n\n  Interaction.prototype.handleOut = function (io, pointer, ev, soft, force) {\n    var _this = this;\n\n    if (soft === void 0) {\n      soft = false;\n    }\n\n    if (force === void 0) {\n      force = false;\n    }\n\n    if (!io.hoverable) {\n      return;\n    } // Remove pointer\n\n\n    io.overPointers.removeValue(pointer); // Check if element is still hovered\n\n    if (io.isHover && (!io.hasDelayedOut || force)) {\n      // Should we run additional checks?\n      if (soft && io.overPointers.length) {\n        // There are still pointers hovering - don't do anything else and\n        // wait until either no over pointers are there or we get a hard out\n        // event.\n        return;\n      } // Should we delay \"out\" if this is happening on a touch device?\n\n\n      if (pointer.touch && !force && !this.old(pointer)) {\n        // This is a touch pointer, and it hasn't moved, let's pretend\n        // the object is still hovered, and act as per \"behavior\" setting\n        var behavior = this.getHoverOption(io, \"touchOutBehavior\");\n\n        if (behavior == \"leave\") {\n          // Set to \"leave\", so we do not execute any \"out\" event.\n          // It will be handled by any other interaction that happens\n          // afterwards.\n          this._delayedEvents.out.push({\n            type: \"out\",\n            io: io,\n            pointer: pointer,\n            event: ev,\n            keepUntil: $time.getTime() + 500\n          });\n\n          io.hasDelayedOut = true;\n          return;\n        } else if (behavior == \"delay\" && this.getHoverOption(io, \"touchOutDelay\")) {\n          this._delayedEvents.out.push({\n            type: \"out\",\n            io: io,\n            pointer: pointer,\n            event: ev,\n            keepUntil: $time.getTime() + 500,\n            timeout: this.setTimeout(function () {\n              _this.handleOut(io, pointer, ev, true);\n            }, this.getHoverOption(io, \"touchOutDelay\"))\n          });\n\n          return;\n        } else {// Nothing for \"remove\" - that's how it works \"out-of-the-box\"\n        }\n      } // Set element as not hovered\n\n\n      io.isHover = false;\n      this.overObjects.removeValue(io); // Invoke event\n\n      if (io.events.isEnabled(\"out\") && !system.isPaused) {\n        var imev = {\n          type: \"out\",\n          target: io,\n          event: ev,\n          pointer: pointer,\n          touch: pointer.touch\n        };\n        io.events.dispatchImmediately(\"out\", imev);\n      } // Reset object from lefover delayed outs, pointers\n\n\n      io.overPointers.clear();\n      io.hasDelayedOut = false; // @todo (clean delayed)\n    }\n  };\n  /**\r\n   * Processes dalyed events, such as \"out\" event that was initiated for\r\n   * elements by touch.\r\n   */\n\n\n  Interaction.prototype.processDelayed = function () {\n    var delayedEvent;\n\n    while (true) {\n      delayedEvent = this._delayedEvents.out.pop();\n\n      if (!delayedEvent) {\n        break;\n      }\n\n      if (delayedEvent.timeout) {\n        delayedEvent.timeout.dispose();\n      }\n\n      this.handleOut(delayedEvent.io, delayedEvent.pointer, delayedEvent.event, false, true);\n    }\n  };\n  /**\r\n   * Performs tasks on pointer down.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io       Element\r\n   * @param pointer  Pointer\r\n   * @param ev       Original event\r\n   */\n\n\n  Interaction.prototype.handleDown = function (io, pointer, ev) {\n    // Need to prevent default event from happening on transformable objects\n    this.maybePreventDefault(io, ev, pointer); // Stop inertia animations if they're currently being played out\n\n    if (io.inert) {\n      this.stopInertia(io);\n    } // Trigger hover because some touch devices won't trigger over events\n    // on their own\n\n\n    this.handleOver(io, pointer, ev, true); // Add pointer to list\n\n    io.downPointers.moveValue(pointer); // Apply styles if necessary\n\n    this.applyCursorDownStyle(io, pointer); // Check if object is already down\n\n    if (!io.isDown) {\n      // Lose focus if needed\n      if (io.focusable !== false && this.getHitOption(io, \"noFocus\") && this.focusedObject) {\n        $dom.blur();\n      } // Set object as hovered\n\n\n      io.isDown = true;\n      this.downObjects.moveValue(io); // Prep object for dragging and/or resizing\n\n      if (io.draggable) {\n        this.processDragStart(io, pointer, ev);\n      }\n\n      if (io.resizable) {\n        this.processResizeStart(io, pointer, ev);\n      }\n    } // Dispatch \"down\" event\n\n\n    if (io.events.isEnabled(\"down\") && !system.isPaused) {\n      var imev = {\n        type: \"down\",\n        target: io,\n        event: ev,\n        pointer: pointer,\n        touch: pointer.touch\n      };\n      io.events.dispatchImmediately(\"down\", imev);\n    }\n  };\n  /**\r\n   * Performs tasks on pointer up.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param pointer  Pointer\r\n   * @param ev       Original event\r\n   */\n\n\n  Interaction.prototype.handleGlobalUp = function (pointer, ev, cancelled) {\n    var _this = this;\n\n    if (cancelled === void 0) {\n      cancelled = false;\n    } // Process all down objects\n\n\n    $iter.each(this.downObjects.backwards().iterator(), function (io) {\n      // Check if this particular pointer is pressing down\n      // on object\n      if (io && io.downPointers.contains(pointer)) {\n        _this.handleUp(io, pointer, ev, cancelled);\n      }\n    });\n  };\n  /**\r\n   * Handles when [[InteractionObject]] is no longer hovered.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io       Interaction object\r\n   * @param pointer  Pointer\r\n   * @param ev       Original event\r\n   */\n\n\n  Interaction.prototype.handleUp = function (io, pointer, ev, cancelled) {\n    if (cancelled === void 0) {\n      cancelled = false;\n    } // Restore cursor style\n\n\n    this.restoreCursorDownStyle(io, pointer); // Remove pointer from the list\n\n    io.downPointers.removeValue(pointer); // Trigger out because some touch devices won't trigger out events\n    // on their own\n\n    if (pointer.touch || this._useTouchEventsOnly) {\n      this.handleOut(io, pointer, ev, true);\n    } // Check if object still down\n\n\n    if (io.isDown) {\n      // Check if there are no other pointers hovering this element\n      if (io.downPointers.length == 0) {\n        // Set element as no longer down\n        io.isDown = false;\n        this.downObjects.removeValue(io);\n      } // Dispatch \"up\" event\n\n\n      if (io.events.isEnabled(\"up\") && !system.isPaused) {\n        var imev = {\n          type: \"up\",\n          target: io,\n          event: ev,\n          pointer: pointer,\n          touch: pointer.touch\n        };\n        io.events.dispatchImmediately(\"up\", imev);\n      } // Check if this was not a cancelled event.\n      // If event was canelled (which might happen if gesture resulted in\n      // navigation or page scroll) there's no point in triggering hit and\n      // other actions.\n\n\n      if (!cancelled) {\n        // Handle swiping-related stuff\n        if (io.swipeable && this.swiped(io, pointer)) {\n          // Swiped - nothing else should happen\n          this.handleSwipe(io, pointer, ev);\n        } else {\n          // Check if it maybe a click\n          if (io.clickable && !this.moved(pointer, this.getHitOption(io, \"hitTolerance\"))) {\n            this.handleHit(io, pointer, ev);\n          } // Handle inertia\n\n\n          if (io.inert && this.moved(pointer, this.getHitOption(io, \"hitTolerance\"))) {\n            this.handleInertia(io, pointer);\n          } else if (io.draggable) {\n            this.processDragStop(io, pointer, ev);\n          }\n\n          if (io.resizable) {\n            this.processResizeStop(io, pointer, ev);\n          }\n        }\n      }\n    }\n  };\n  /**\r\n   * Checks if event needs to be prevented on draggable and such items, so that\r\n   * touch gestures like navigation and scroll do not kick in.\r\n   *\r\n   * @param io  Object\r\n   * @param ev  Event\r\n   */\n\n\n  Interaction.prototype.maybePreventDefault = function (io, ev, pointer) {\n    if ($type.hasValue(ev) && (io.draggable || io.swipeable || io.trackable || io.resizable) && !this.isGlobalElement(io) && ev.cancelable !== false && (!io.isTouchProtected || !pointer || !pointer.touch)) {\n      ev.preventDefault();\n    }\n  };\n  /**\r\n   * Handles pointer move.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param pointer  Pointer\r\n   * @param ev       Original event\r\n   */\n\n\n  Interaction.prototype.handleGlobalMove = function (pointer, ev) {\n    var _this = this; // Process hovered elements\n    // We check if the element became unhovered without reporting the mouseout\n    // event. (it happens in some cases)\n\n\n    if (!pointer.touch) {\n      $iter.each(this.overObjects.backwards().iterator(), function (io) {\n        // Is this pointer relevant to element?\n        if (io && io.overPointers.contains(pointer) && io.hoverable) {\n          // Check if the element is still hovered\n          var reset = false;\n\n          if (io.element && pointer.lastEvent) {\n            if (!$dom.contains(io.element, pointer.lastEvent.target)) {\n              reset = true;\n            }\n          } else {\n            reset = true;\n          }\n\n          if (reset) {\n            _this.handleOut(io, pointer, ev, true);\n          }\n        }\n      });\n    } // Process down elements\n\n\n    $iter.each(this.transformedObjects.backwards().iterator(), function (io) {\n      // Is this pointer relevant to element?\n      if (io.downPointers.contains(pointer) && // Swipe still happening?\n      !(io.swipeable && _this.swiping(io, pointer)) && (io.draggable || io.resizable)) {\n        _this.handleTransform(io, ev);\n      }\n    }); // Process tracked elements\n\n    $iter.each(this.trackedObjects.backwards().iterator(), function (io) {\n      // Is this pointer relevant to element?\n      if (!io.overPointers.contains(pointer)) {\n        _this.handleTrack(io, pointer, ev);\n      }\n    });\n  };\n  /**\r\n   * Handles reporting of pointer movement.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io        Element\r\n   * @param pointer    Pointer\r\n   * @param ev         Original event\r\n   * @param skipCheck  Sould we skip check if cursor actually moved\r\n   */\n\n\n  Interaction.prototype.handleTrack = function (io, pointer, ev, skipCheck) {\n    if (skipCheck === void 0) {\n      skipCheck = false;\n    } // Do nothing if the cursor did not actually move\n\n\n    if (!skipCheck && !this.moved(pointer, 0)) {\n      return;\n    } // Initiate TRACK event\n\n\n    if (io.events.isEnabled(\"track\") && !system.isPaused) {\n      var imev = {\n        type: \"track\",\n        target: io,\n        event: ev,\n        point: pointer.point,\n        pointer: pointer,\n        touch: pointer.touch\n      };\n      io.events.dispatchImmediately(\"track\", imev);\n    }\n  };\n  /**\r\n   * Handles swipe action.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io       Element\r\n   * @param pointer  Pointer\r\n   * @param ev       Original event\r\n   */\n\n\n  Interaction.prototype.handleSwipe = function (io, pointer, ev) {\n    // We pass in InteractionEvent with shift in mouse coordinates\n    // between when the drag started and ended\n    if (io.events.isEnabled(\"swipe\") && !system.isPaused) {\n      var imev = {\n        type: \"swipe\",\n        target: io,\n        event: ev,\n        touch: pointer.touch\n      };\n      io.events.dispatchImmediately(\"swipe\", imev);\n    }\n\n    if (pointer.startPoint.x < pointer.point.x) {\n      if (io.events.isEnabled(\"swiperight\") && !system.isPaused) {\n        var imev = {\n          type: \"swiperight\",\n          target: io,\n          event: ev,\n          touch: pointer.touch\n        };\n        io.events.dispatchImmediately(\"swiperight\", imev);\n      }\n    } else {\n      if (io.events.isEnabled(\"swipeleft\") && !system.isPaused) {\n        var imev = {\n          type: \"swipeleft\",\n          target: io,\n          event: ev,\n          touch: pointer.touch\n        };\n        io.events.dispatchImmediately(\"swipeleft\", imev);\n      }\n    }\n  };\n  /**\r\n   * Handles event triggering for wheel rotation.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io       Element\r\n   * @param pointer  Pointer\r\n   * @param deltaX   Horizontal shift\r\n   * @param deltaY   Vertical shift\r\n   * @param ev       Original event\r\n   */\n\n\n  Interaction.prototype.handleWheel = function (io, pointer, deltaX, deltaY, ev) {\n    var shift = {\n      x: deltaX,\n      y: deltaY\n    }; // Trigger generic WHEEL event\n\n    if (io.events.isEnabled(\"wheel\") && !system.isPaused) {\n      io.events.dispatchImmediately(\"wheel\", {\n        type: \"wheel\",\n        target: io,\n        event: ev,\n        point: pointer.point,\n        shift: shift\n      });\n    } // Trigger direction-specific events\n    // Horizontal\n\n\n    if (deltaX < 0) {\n      if (io.events.isEnabled(\"wheelleft\") && !system.isPaused) {\n        io.events.dispatchImmediately(\"wheelleft\", {\n          type: \"wheelleft\",\n          target: io,\n          event: ev,\n          point: pointer.point,\n          shift: shift\n        });\n      }\n    } else if (deltaX > 0) {\n      if (io.events.isEnabled(\"swiperight\") && !system.isPaused) {\n        io.events.dispatchImmediately(\"wheelright\", {\n          type: \"wheelright\",\n          target: io,\n          event: ev,\n          point: pointer.point,\n          shift: shift\n        });\n      } // Vertical\n\n    } else if (deltaY < 0) {\n      if (io.events.isEnabled(\"wheelup\") && !system.isPaused) {\n        io.events.dispatchImmediately(\"wheelup\", {\n          type: \"wheelup\",\n          target: io,\n          event: ev,\n          point: pointer.point,\n          shift: shift\n        });\n      }\n    } else if (deltaY > 0) {\n      if (io.events.isEnabled(\"wheeldown\") && !system.isPaused) {\n        io.events.dispatchImmediately(\"wheeldown\", {\n          type: \"wheeldown\",\n          target: io,\n          event: ev,\n          point: pointer.point,\n          shift: shift\n        });\n      }\n    }\n  };\n  /**\r\n   * Initiates inertia checking sub-routines for different movement types:\r\n   * drag, resize.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param sprite\r\n   * @param pointer\r\n   */\n\n\n  Interaction.prototype.handleInertia = function (io, pointer) {\n    if (io.draggable && io.downPointers.length === 0) {\n      this.handleMoveInertia(io, pointer);\n    }\n\n    if (io.resizable && io.downPointers.length > 1) {\n      this.handleResizeInertia(io, pointer);\n    }\n  };\n  /**\r\n   * Continues moving the element to simulate the effect of inertia. Happens\r\n   * when `inert` and `draggable` object is dragged and then released.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io       Element\r\n   * @param pointer  Pointer\r\n   */\n\n\n  Interaction.prototype.handleMoveInertia = function (io, pointer) {\n    var interaction = io;\n    var type = \"move\";\n    var point = {\n      \"x\": pointer.point.x,\n      \"y\": pointer.point.y\n    };\n    var startPoint = {\n      \"x\": pointer.startPoint.x,\n      \"y\": pointer.startPoint.y\n    }; // Init inertia object\n\n    var inertia = new Inertia(interaction, type, point, startPoint); // Get inertia data\n\n    var ref = this.getTrailPoint(pointer, $time.getTime() - this.getInertiaOption(io, \"move\", \"time\"));\n\n    if (typeof ref === \"undefined\") {\n      this.processDragStop(io, pointer, pointer.lastUpEvent);\n      return;\n    } // Init animation options\n\n\n    var factor = this.getInertiaOption(io, \"move\", \"factor\");\n    var animationOptions = [{\n      \"to\": pointer.point.x + (pointer.point.x - ref.point.x) * factor,\n      \"property\": \"x\"\n    }, {\n      \"to\": pointer.point.y + (pointer.point.y - ref.point.y) * factor,\n      \"property\": \"y\"\n    }]; // Start animation\n\n    var animation = new Animation(inertia, animationOptions, this.getInertiaOption(io, \"move\", \"duration\"), this.getInertiaOption(io, \"move\", \"easing\")).start();\n\n    this._disposers.push(animation.events.on(\"animationended\", function (ev) {\n      inertia.done();\n    })); // Add inertia object\n\n\n    io.inertias.setKey(\"move\", inertia);\n  };\n  /**\r\n   * Continues resizing of a `resizable` element after it is resized and\r\n   * released.\r\n   *\r\n   * **NOTE:** this is is just a placeholder function. No actual fucntionality\r\n   * is implemented, yet.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io       Element\r\n   * @param pointer  Pointer\r\n   */\n\n\n  Interaction.prototype.handleResizeInertia = function (io, pointer) {// Some day, folks. Some day...\n  };\n  /**\r\n   * Recalculates element's position and size based on position of\r\n   * all its related pointers.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io  Element\r\n   * @param ev  Original event\r\n   */\n\n\n  Interaction.prototype.handleTransform = function (io, ev) {\n    // Get primary pointer and its respective points\n    var pointer1 = io.downPointers.getIndex(0);\n    var point1 = null;\n    var startPoint1 = null;\n\n    if (pointer1) {\n      point1 = pointer1.point;\n      startPoint1 = pointer1.startPoint;\n    } // Init secondary pointer\n\n\n    var pointer2;\n    var point2;\n    var startPoint2; // Use center of the sprite to simulate \"second\" point of touch\n\n    point2 = {\n      \"x\": io.originalPosition.x,\n      \"y\": io.originalPosition.y\n    };\n    startPoint2 = point2; // Determine if it's a sinngle pointer or multi\n\n    var singlePoint = true;\n\n    for (var i = 1; i < io.downPointers.length; i++) {\n      // Get pointer\n      var nextPointer = io.downPointers.getIndex(i); // Doublecheck if it's not the same pointer by comparing original position\n\n      if (startPoint1.x != nextPointer.startPoint.x && startPoint1.y != nextPointer.startPoint.y) {\n        // Several pointers down\n        singlePoint = false; // Get second pointer\n\n        pointer2 = nextPointer;\n        point2 = pointer2.point;\n        startPoint2 = pointer2.startPoint; // Stop looking\n\n        break;\n      }\n    } // Primary touch point moved?\n\n\n    var pointer1Moved = pointer1 && this.moved(pointer1, 0); // Report DRAG_START if necessary\n\n    if (io.draggable && pointer1 && pointer1.dragStartEvents && pointer1.dragStartEvents.length && pointer1Moved) {\n      if (io.events.isEnabled(\"dragstart\") && !system.isPaused) {\n        io.events.dispatchImmediately(\"dragstart\", pointer1.dragStartEvents.shift());\n      } //delete pointer1.dragStartEvents;\n\n    } // Determine what we do in order of superiority\n\n\n    if (singlePoint && io.draggable) {\n      // We have only one pointer and the Sprite is draggable\n      // There's nothing else to be done - just move it\n      this.handleTransformMove(io, point1, startPoint1, ev, pointer1Moved, pointer1.touch);\n    } else {\n      // Check if second touch point moved\n      var pointer2Moved = pointer2 && this.moved(pointer2, 0);\n\n      if (io.draggable && io.resizable) {\n        //this.handleTransformAll(io, point1, startPoint1, point2, startPoint2, ev, pointer1Moved && pointer2Moved);\n        this.handleTransformMove(io, point1, startPoint1, ev, pointer1Moved && pointer2Moved, pointer1.touch);\n        this.handleTransformResize(io, point1, startPoint1, point2, startPoint2, ev, pointer1Moved && pointer2Moved, pointer1.touch);\n      } else {\n        if (io.draggable) {\n          this.handleTransformMove(io, point1, startPoint1, ev, pointer1Moved, pointer1.touch);\n        }\n\n        if (io.resizable && (!singlePoint || ev.ctrlKey)) {\n          this.handleTransformResize(io, point1, startPoint1, point2, startPoint2, ev, pointer1Moved && pointer2Moved, pointer1.touch);\n        }\n      }\n    }\n  };\n  /**\r\n   * Handles movement of the dragged element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io            Element\r\n   * @param point         Current point of the pointer\r\n   * @param startPoint    Starting point of the pointer\r\n   * @param ev            Original event\r\n   * @param pointerMoved  Did pointer move?\r\n   */\n\n\n  Interaction.prototype.handleTransformMove = function (io, point, startPoint, ev, pointerMoved, touch) {\n    if (pointerMoved) {\n      if (io.events.isEnabled(\"drag\") && !system.isPaused && (!io.isTouchProtected || !touch)) {\n        var imev = {\n          type: \"drag\",\n          target: io,\n          event: ev,\n          shift: {\n            \"x\": point.x - startPoint.x,\n            \"y\": point.y - startPoint.y\n          },\n          startPoint: startPoint,\n          point: point,\n          touch: touch\n        };\n        io.events.dispatchImmediately(\"drag\", imev);\n      }\n    }\n  };\n  /**\r\n   * Handles resizing of the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io            Element\r\n   * @param point1        Current position of reference point #1\r\n   * @param startPoint1   Original position of reference point #1\r\n   * @param point2        Current position of reference point #2\r\n   * @param startPoint2   Original position of reference point #2\r\n   * @param ev            Original event\r\n   * @param pointerMoved  Did pointer move?\r\n   */\n\n\n  Interaction.prototype.handleTransformResize = function (io, point1, startPoint1, point2, startPoint2, ev, pointerMoved, touch) {\n    if (io.events.isEnabled(\"resize\") && !system.isPaused && (!io.isTouchProtected || !touch)) {\n      var imev = {\n        type: \"resize\",\n        target: io,\n        event: ev,\n        scale: $math.getScale(point1, startPoint1, point2, startPoint2),\n        startPoint1: startPoint1,\n        point1: point1,\n        startPoint2: startPoint2,\n        point2: point2,\n        touch: touch\n      };\n      io.events.dispatchImmediately(\"resize\", imev);\n    }\n  };\n  /**\r\n   * Handles all the preparations of the element when it starts to be dragged.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io       Element\r\n   * @param pointer  Pointer\r\n   * @param ev       Original event\r\n   */\n\n\n  Interaction.prototype.processDragStart = function (io, pointer, ev) {\n    // Add to draggedObjects\n    this.transformedObjects.moveValue(io); // Report \"dragstart\"\n\n    var imev = {\n      type: \"dragstart\",\n      target: io,\n      event: ev,\n      touch: pointer ? pointer.touch : false\n    }; // Log object that we are starting to drag, so we can check against and\n    // avoid hovers on other objects that might be in the path of movement.\n\n    if (pointer) {\n      pointer.dragTarget = io; //pointer.startPoint = pointer.point;\n    }\n    /**\r\n     * If pointer is set we will not fire the event until the pointer has\r\n     * actually moved. If it's not set we don't have to wait for anything, so we\r\n     * just fire off the event right away.\r\n     */\n\n\n    if (pointer && pointer.dragStartEvents) {\n      pointer.dragStartEvents.push(imev);\n    } else {\n      if (!system.isPaused) {\n        io.dispatchImmediately(\"dragstart\", imev);\n      }\n    }\n  };\n  /**\r\n   * Finishes up element drag operation.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io       Element\r\n   * @param pointer  Pointer\r\n   * @param ev       Original event\r\n   */\n\n\n  Interaction.prototype.processDragStop = function (io, pointer, ev) {\n    // Pointer set?\n    if (!pointer) {\n      pointer = this.getDragPointer(io);\n    } // Unset drag object\n\n\n    if (pointer) {\n      pointer.dragTarget = undefined;\n    } // Removed from transformedObjects\n\n\n    this.transformedObjects.removeValue(io); // Unlock document\n    //this.unlockDocument();\n    // Report dragstop\n\n    if (!pointer || this.moved(pointer, 0)) {\n      if (io.events.isEnabled(\"dragstop\") && !system.isPaused) {\n        var imev = {\n          type: \"dragstop\",\n          target: io,\n          touch: pointer ? pointer.touch : false\n        };\n        io.events.dispatchImmediately(\"dragstop\", imev);\n      }\n    }\n  };\n  /**\r\n   * Handles all the preparations of the element when it starts to be resized.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io       Element\r\n   * @param pointer  Pointer\r\n   * @param ev       Original event\r\n   */\n\n\n  Interaction.prototype.processResizeStart = function (io, pointer, ev) {\n    // Add to draggedObjects\n    this.transformedObjects.moveValue(io);\n  };\n  /**\r\n   * Finishes up element drag operation.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io       Element\r\n   * @param pointer  Pointer\r\n   * @param ev       Original event\r\n   */\n\n\n  Interaction.prototype.processResizeStop = function (io, pointer, ev) {\n    // Removed from transformedObjects\n    this.transformedObjects.removeValue(io);\n  };\n  /**\r\n   * ==========================================================================\r\n   * Controls for InteractionObjects initiating directly\r\n   * ==========================================================================\r\n   * @hidden\r\n   */\n\n  /**\r\n   * Manually triggers drag start on the element. Could be useful in cases\r\n   * where tracking or dragging one element can also influence dragging another\r\n   * element.\r\n   *\r\n   * Passing in `pointer` reference is advisable. If not passed in it will try\r\n   * to determine which pointer to attach to. However, it's better to specify\r\n   * it explicitly.\r\n   *\r\n   * @param io       Element\r\n   * @param pointer  Pointer\r\n   */\n\n\n  Interaction.prototype.dragStart = function (io, pointer) {\n    if (!pointer) {\n      pointer = this.getDragPointer(io);\n    }\n\n    if (pointer) {\n      this.handleDown(io, pointer, pointer.lastDownEvent);\n    }\n  };\n  /**\r\n   * Manually ends drag on the element.\r\n   *\r\n   * @param io       Element\r\n   * @param pointer  Pointer\r\n   */\n\n\n  Interaction.prototype.dragStop = function (io, pointer) {\n    if (!pointer) {\n      pointer = this.getDragPointer(io);\n    }\n\n    if (pointer) {\n      this.handleGlobalUp(pointer, pointer.lastUpEvent);\n    }\n  };\n  /**\r\n   * This method uses a fuzzy logic to find the pointer to be used for dragging.\r\n   * Beware that this is not a rock-solid solution. If there are a few objects\r\n   * being dragged at the same time, you may get unexepected results.\r\n   *\r\n   * @param io  InteractionObject to get pointers from\r\n   * @return Pointer currently being used for dragging\r\n   */\n\n\n  Interaction.prototype.getDragPointer = function (io) {\n    if (io) {\n      // InteractionObject is supplied\n      // Use it's first down pointer\n      return io.downPointers.getIndex(0);\n    } else if (this.transformedObjects.length) {\n      // Use first dragged object\n      return this.getDragPointer(this.transformedObjects.getIndex(0));\n    } else {\n      return undefined;\n    }\n  };\n  /**\r\n   * ==========================================================================\r\n   * Utils\r\n   * ==========================================================================\r\n   * @hidden\r\n   */\n\n  /**\r\n   * Returns pointer id for the given event object.\r\n   *\r\n   * @param ev  Event\r\n   * @return Pointer ID\r\n   */\n\n\n  Interaction.prototype.getPointerId = function (ev) {\n    var id = \"\";\n\n    if ($type.hasValue(ev.identifier)) {\n      id = \"\" + ev.identifier;\n    } else if ($type.hasValue(ev.pointerId)) {\n      id = \"\" + ev.pointerId;\n    } else {\n      id = \"m\";\n    }\n\n    return id.replace(\"-\", \"\");\n  };\n  /**\r\n   * Returns a cursor position of the event.\r\n   *\r\n   * @param ev  Original event\r\n   * @return Event point\r\n   */\n\n\n  Interaction.prototype.getPointerPoint = function (ev) {\n    return {\n      \"x\": ev.clientX,\n      \"y\": ev.clientY\n    };\n  };\n  /**\r\n   * Returns [[Pointer]] object that is associated with the Event.\r\n   *\r\n   * If no such [[Pointer]] object exists, it is created.\r\n   *\r\n   * @param ev  Event\r\n   * @return Pointer\r\n   */\n\n\n  Interaction.prototype.getPointer = function (ev) {\n    // Get pointer id\n    var id = this.getPointerId(ev); // Get current coordinates\n\n    var point = this.getPointerPoint(ev); // Look for the pointer in the Dictionary if it maybe already exists\n\n    var pointer;\n\n    if (this.pointers.hasKey(id)) {\n      // We already have such pointer\n      pointer = this.pointers.getKey(id); // We need this, because Edge reuses pointer ids across touch and mouse\n\n      pointer.touch = this.isPointerTouch(ev); // Reset pointer\n      //pointer.point = point;\n    } else {\n      // Init pointer\n      pointer = {\n        \"id\": id,\n        //\"touch\": !(ev instanceof MouseEvent) || ((<any>ev).pointerType && (<any>ev).pointerType != \"pointer\"),\n        //\"touch\": !(ev instanceof MouseEvent) || ((<any>ev).pointerType && (<any>ev).pointerType != \"mouse\"),\n        \"touch\": this.isPointerTouch(ev),\n        \"startPoint\": point,\n        \"startTime\": $time.getTime(),\n        \"point\": point,\n        \"track\": [],\n        \"swipeCanceled\": false,\n        \"dragStartEvents\": []\n      }; // Add first breadcrumb\n\n      this.addBreadCrumb(pointer, point); // Add for re-use later\n\n      this.pointers.setKey(id, pointer);\n    } // Log last event\n\n\n    pointer.lastEvent = ev;\n    return pointer;\n  };\n  /**\r\n   * Determines if pointer event originated from a touch pointer or mouse.\r\n   *\r\n   * @param ev  Original event\r\n   * @return Touch pointer?\r\n   */\n\n\n  Interaction.prototype.isPointerTouch = function (ev) {\n    if (typeof Touch !== \"undefined\" && ev instanceof Touch) {\n      return true;\n    } else if (typeof PointerEvent !== \"undefined\" && ev instanceof PointerEvent && $type.hasValue(ev.pointerType)) {\n      switch (ev.pointerType) {\n        case \"touch\":\n        case \"pen\":\n        case 2:\n          return true;\n\n        case \"mouse\":\n        case 4:\n          return false;\n\n        default:\n          return !(ev instanceof MouseEvent);\n      }\n    } else if ($type.hasValue(ev.type)) {\n      if (ev.type.match(/^mouse/)) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n  /**\r\n   * Resets the poiner to original state, i.e. cleans movement information,\r\n   * starting point, etc.\r\n   *\r\n   * @param pointer Pointer\r\n   */\n\n\n  Interaction.prototype.resetPointer = function (pointer, ev) {\n    // Get current coordinates\n    var point = this.getPointerPoint(ev);\n    ;\n    pointer.startTime = $time.getTime();\n    pointer.startPoint = {\n      x: point.x,\n      y: point.y\n    };\n    pointer.point = {\n      x: point.x,\n      y: point.y\n    };\n    pointer.track = [];\n    pointer.swipeCanceled = false; //clearTimeout(pointer.swipeTimeout);\n    //clearTimeout(pointer.holdTimeout);\n  };\n  /**\r\n   * Adds a \"breadcrumb\" point to the [[Pointer]] to log its movement path.\r\n   *\r\n   * @param pointer  Pointer\r\n   * @param point    Point coordinates\r\n   */\n\n\n  Interaction.prototype.addBreadCrumb = function (pointer, point) {\n    pointer.track.push({\n      \"timestamp\": $time.getTime(),\n      \"point\": point\n    });\n  };\n  /**\r\n   * Prepares the document for various touch-related operations.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Interaction.prototype.lockDocument = function () {\n    this.prepElement(this.body);\n  };\n  /**\r\n   * Restores document functionality.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Interaction.prototype.unlockDocument = function () {\n    if (this.transformedObjects.length == 0) {\n      this.restoreAllStyles(this.body);\n    }\n  };\n  /**\r\n   * Lock element (disable all touch)\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Interaction.prototype.lockElement = function (io) {\n    this.prepElement(io);\n  };\n  /**\r\n   * Restores element's functionality.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Interaction.prototype.unlockElement = function (io) {\n    this.restoreAllStyles(io);\n  };\n  /**\r\n   * Locks document's wheel scroll.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Interaction.prototype.lockWheel = function () {\n    window.addEventListener(this._pointerEvents.wheel, this.wheelLockEvent, this._passiveSupported ? {\n      passive: false\n    } : false);\n  };\n  /**\r\n   * Unlocks document's wheel scroll.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Interaction.prototype.unlockWheel = function () {\n    window.removeEventListener(this._pointerEvents.wheel, this.wheelLockEvent);\n  };\n  /**\r\n   * Checks if top element at pointer's position belongs to the SVG.\r\n   *\r\n   * @ignore Exlude from docs\r\n   * @param pointer  Pointer\r\n   * @param svg      The <svg> element\r\n   * @param id       A unique identifier of the object that is checking for locality\r\n   * @return Belongs to SVG\r\n   */\n\n\n  Interaction.prototype.isLocalElement = function (pointer, svg, id) {\n    var cached = this.getCache(\"local_pointer_\" + pointer.id);\n\n    if ($type.hasValue(cached)) {\n      return cached;\n    }\n\n    var target = document.elementFromPoint(pointer.point.x, pointer.point.y);\n    var local = target && (svg === target || $dom.contains(svg, target));\n    this.setCache(\"local_pointer_\" + pointer.id + \"_\" + id, local, 100);\n    return local;\n  };\n  /**\r\n   * A function that cancels mouse wheel scroll.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param ev  Event object\r\n   * @return Returns `false` to cancel\r\n   */\n\n\n  Interaction.prototype.wheelLockEvent = function (ev) {\n    ev.preventDefault();\n    return false;\n  };\n  /**\r\n   * Applies a set of styles to an element. Stores the original styles so they\r\n   * can be restored later.\r\n   *\r\n   * @ignore\r\n   * @param io      Element\r\n   */\n\n\n  Interaction.prototype.prepElement = function (io) {\n    var el = io.element;\n\n    if (el) {\n      // Define possible props\n      var props = [\"touchAction\", \"webkitTouchAction\", \"MozTouchAction\", \"MSTouchAction\", \"msTouchAction\", \"oTouchAction\", \"userSelect\", \"webkitUserSelect\", \"MozUserSelect\", \"MSUserSelect\", \"msUserSelect\", \"oUserSelect\", \"touchSelect\", \"webkitTouchSelect\", \"MozTouchSelect\", \"MSTouchSelect\", \"msTouchSelect\", \"oTouchSelect\", \"touchCallout\", \"webkitTouchCallout\", \"MozTouchCallout\", \"MSTouchCallout\", \"msTouchCallout\", \"oTouchCallout\", \"contentZooming\", \"webkitContentZooming\", \"MozContentZooming\", \"MSContentZooming\", \"msContentZooming\", \"oContentZooming\", \"userDrag\", \"webkitUserDrag\", \"MozUserDrag\", \"MSUserDrag\", \"msUserDrag\", \"oUserDrag\"];\n\n      for (var i = 0; i < props.length; i++) {\n        if (props[i] in el.style) {\n          this.setTemporaryStyle(io, props[i], \"none\");\n        }\n      } // Remove iOS-specific selection;\n\n\n      this.setTemporaryStyle(io, \"tapHighlightColor\", \"rgba(0, 0, 0, 0)\"); //this.setTemporaryStyle(io, \"webkitOverflowScrolling\", \"none\");\n    }\n  };\n  /**\r\n   * Restores replaced styles\r\n   *\r\n   * @ignore\r\n   * @param  io  Element\r\n   */\n\n\n  Interaction.prototype.unprepElement = function (io) {\n    var el = io.element;\n\n    if (el) {\n      // Define possible props\n      var props = [\"touchAction\", \"webkitTouchAction\", \"MozTouchAction\", \"MSTouchAction\", \"msTouchAction\", \"oTouchAction\", \"userSelect\", \"webkitUserSelect\", \"MozUserSelect\", \"MSUserSelect\", \"msUserSelect\", \"oUserSelect\", \"touchSelect\", \"webkitTouchSelect\", \"MozTouchSelect\", \"MSTouchSelect\", \"msTouchSelect\", \"oTouchSelect\", \"touchCallout\", \"webkitTouchCallout\", \"MozTouchCallout\", \"MSTouchCallout\", \"msTouchCallout\", \"oTouchCallout\", \"contentZooming\", \"webkitContentZooming\", \"MozContentZooming\", \"MSContentZooming\", \"msContentZooming\", \"oContentZooming\", \"userDrag\", \"webkitUserDrag\", \"MozUserDrag\", \"MSUserDrag\", \"msUserDrag\", \"oUserDrag\"];\n\n      for (var i = 0; i < props.length; i++) {\n        if (props[i] in el.style) {\n          this.restoreStyle(io, props[i]);\n        }\n      } // Remove iOS-specific selection;\n\n\n      this.restoreStyle(io, \"tapHighlightColor\"); //this.restoreStyle(io, \"webkitOverflowScrolling\");\n    }\n  };\n  /**\r\n   * Returns an option associated with hit events.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io      Element\r\n   * @param option  Option key\r\n   * @return Option value\r\n   */\n\n\n  Interaction.prototype.getHitOption = function (io, option) {\n    var res = io.hitOptions[option];\n\n    if (typeof res === \"undefined\") {\n      res = this.hitOptions[option];\n    }\n\n    return res;\n  };\n  /**\r\n   * Returns an option associated with hover events.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io      Element\r\n   * @param option  Option key\r\n   * @return Option value\r\n   */\n\n\n  Interaction.prototype.getHoverOption = function (io, option) {\n    var res = io.hoverOptions[option];\n\n    if (typeof res === \"undefined\") {\n      res = this.hoverOptions[option];\n    }\n\n    return res;\n  };\n  /**\r\n   * Returns an option associated with swipe events.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io      Element\r\n   * @param option  Option key\r\n   * @return Option value\r\n   */\n\n\n  Interaction.prototype.getSwipeOption = function (io, option) {\n    var res = io.swipeOptions[option];\n\n    if (typeof res === \"undefined\") {\n      res = this.swipeOptions[option];\n    }\n\n    return res;\n  };\n  /**\r\n   * Returns an option for keyboard.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io      Element\r\n   * @param option  Option key\r\n   * @return Option value\r\n   */\n\n\n  Interaction.prototype.getKeyboardOption = function (io, option) {\n    var res = io.keyboardOptions[option];\n\n    if (typeof res === \"undefined\") {\n      res = this.keyboardOptions[option];\n    }\n\n    return res;\n  };\n  /**\r\n   * Returns an option associated with inertia.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io      Element\r\n   * @param type    Inertia type\r\n   * @param option  Option key\r\n   * @return Option value\r\n   */\n\n\n  Interaction.prototype.getInertiaOption = function (io, type, option) {\n    var options = io.inertiaOptions.getKey(type);\n    var res;\n\n    if (options && $type.hasValue(options[option])) {\n      res = options[option];\n    } else {\n      res = this.inertiaOptions.getKey(type)[option];\n    }\n\n    return res;\n  };\n  /**\r\n   * Stops currently going on inertia. Useful if inertia is currently being\r\n   * animated and the object is being interacted with.\r\n   *\r\n   * @param io Element\r\n   */\n\n\n  Interaction.prototype.stopInertia = function (io) {\n    var x;\n    var inertias = [\"move\", \"resize\"];\n\n    for (var i = 0; i < inertias.length; i++) {\n      x = inertias[i];\n\n      if (io.inertias.hasKey(x)) {\n        var inertia = io.inertias.getKey(x);\n\n        if (inertia) {\n          inertia.dispose(); //io.inertiaAnimations.removeKey(x);\n          //this.processDragStop(io);\n\n          continue;\n        }\n      }\n    }\n  };\n  /**\r\n   * Check if swiping is currently being performed on an object.\r\n   *\r\n   * @param io       Element\r\n   * @param pointer  Pointer to check\r\n   * @return `true` if swiping\r\n   */\n\n\n  Interaction.prototype.swiping = function (io, pointer) {\n    var now = $time.getTime();\n\n    if (pointer.swipeCanceled || !io.swipeable) {\n      return false;\n    } else if (Math.abs(pointer.startPoint.y - pointer.point.y) < this.getSwipeOption(io, \"verticalThreshold\") && pointer.startTime > now - this.getSwipeOption(io, \"time\")) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n  /**\r\n   * Returns `true` if a successfull swipe action was performed on an element.\r\n   *\r\n   * @param io       Element\r\n   * @param pointer  Pointer\r\n   * @return Swiped?\r\n   */\n\n\n  Interaction.prototype.swiped = function (io, pointer) {\n    var now = $time.getTime();\n\n    if (pointer.swipeCanceled) {\n      return false;\n    } else if (Math.abs(pointer.startPoint.x - pointer.point.x) > this.getSwipeOption(io, \"horizontalThreshold\") && Math.abs(pointer.startPoint.y - pointer.point.y) < this.getSwipeOption(io, \"verticalThreshold\") && pointer.startTime > now - this.getSwipeOption(io, \"time\")) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n  /**\r\n   * Applies style to mouse cursor based on its stage in relation to\r\n   * [[InteractionObject]].\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param Element\r\n   */\n\n\n  Interaction.prototype.applyCursorOverStyle = function (io) {\n    // Get sprite's cursor ooptions\n    var options = io.cursorOptions;\n\n    if (!$type.hasValue(options.overStyle)) {\n      return;\n    } // Apply cursor down styles\n\n\n    for (var i = 0; i < options.overStyle.length; i++) {\n      $dom.setStyle(io.element, options.overStyle[i].property, options.overStyle[i].value);\n    }\n  };\n  /**\r\n   * Applies style to mouse cursor based on its stage in relation to\r\n   * [[InteractionObject]].\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io       Element\r\n   * @param pointer  Pointer\r\n   */\n\n\n  Interaction.prototype.applyCursorDownStyle = function (io, pointer) {\n    // Not applicable for touch pointers since they don't display a cursor\n    if (pointer.touch) {\n      return;\n    }\n\n    var downStyle = io.cursorOptions.downStyle; // Is down?\n\n    if (io.downPointers.contains(pointer) && $type.hasValue(downStyle)) {\n      // Apply cursor down styles\n      for (var i = 0; i < downStyle.length; i++) {\n        this.setTemporaryStyle(this.body, downStyle[i].property, downStyle[i].value);\n        this.setTemporaryStyle(io, downStyle[i].property, downStyle[i].value);\n      }\n    }\n  };\n  /**\r\n   * Restores original cursor style for the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io       Element\r\n   * @param pointer  Pointer\r\n   */\n\n\n  Interaction.prototype.restoreCursorDownStyle = function (io, pointer) {\n    // Not applicable for touch pointers since they don't display a cursor\n    if (pointer.touch) {\n      return;\n    }\n\n    var downStyle = io.cursorOptions.downStyle; // Is down?\n\n    if (io.downPointers.contains(pointer) && $type.hasValue(downStyle)) {\n      // Apply cursor down styles\n      for (var i = 0; i < downStyle.length; i++) {\n        this.restoreStyle(this.body, downStyle[i].property);\n        this.restoreStyle(io, downStyle[i].property);\n      }\n    }\n  };\n  /**\r\n   * Sets style on the body of the document.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param style  Style definitions\r\n   */\n\n\n  Interaction.prototype.setGlobalStyle = function (style) {\n    var body = getInteraction().body;\n    var styles = $type.isArray(style) ? style : [style];\n\n    for (var i = 0; i < styles.length; i++) {\n      this.setTemporaryStyle(body, styles[i].property, styles[i].value);\n    }\n  };\n  /**\r\n   * Restores style on the body of the document.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param style  Style definitions\r\n   */\n\n\n  Interaction.prototype.restoreGlobalStyle = function (style) {\n    var body = getInteraction().body;\n    var styles = $type.isArray(style) ? style : [style];\n\n    for (var i = 0; i < styles.length; i++) {\n      this.restoreStyle(body, styles[i].property);\n    }\n  };\n  /**\r\n   * Checks if element is a non-cahrt element.\r\n   *\r\n   * @param io  InteractionObject\r\n   * @return Global element?\r\n   */\n\n\n  Interaction.prototype.isGlobalElement = function (io) {\n    return document.body === io.element;\n  };\n  /**\r\n   * Checks if pointer has moved since it was created.\r\n   *\r\n   * @param pointer    Pointer\r\n   * @param tolerance  Tolerance in pixels\r\n   * @param minTime    Minimum time required for the pointer to be down to be considered moved\r\n   * @return `true` if the pointer has moved\r\n   */\n\n\n  Interaction.prototype.moved = function (pointer, tolerance, minTime) {\n    /*// If there was more time, we don't care if cursor actually moved\r\n    let duration = $time.getTime() - pointer.startTime;\r\n    if ($type.hasValue(minTime) && (minTime > duration)) {\r\n        return false;\r\n    }*/\n    if (minTime === void 0) {\n      minTime = 300;\n    } // That was quick measure shift\n\n\n    var shift = this.getShift(pointer);\n    return Math.abs(shift.x) > tolerance || Math.abs(shift.y) > tolerance;\n  };\n  /**\r\n   * Returns if pointer is \"old\", meaning it has been pressing for more than\r\n   * X milliseconds.\r\n   *\r\n   * @ignore\r\n   * @param pointer  Pointer\r\n   * @param minTime  Minimum time to consider pointer old\r\n   * @return {boolean}\r\n   */\n\n\n  Interaction.prototype.old = function (pointer, minTime) {\n    if (minTime === void 0) {\n      minTime = 300;\n    }\n\n    return $time.getTime() - pointer.startTime > minTime;\n  };\n  /**\r\n   * Returns total a shift in pointers coordinates between its original\r\n   * position and now.\r\n   *\r\n   * @param pointer  Pointer\r\n   * @return Shift in coordinates (x/y)\r\n   */\n\n\n  Interaction.prototype.getShift = function (pointer) {\n    return {\n      \"x\": pointer.startPoint.x - pointer.point.x,\n      \"y\": pointer.startPoint.y - pointer.point.y\n    };\n  };\n  /**\r\n   * Returns a point from [[Pointer]]'s move history at a certain timetamp.\r\n   *\r\n   * @param pointer    Pointer\r\n   * @param timestamp  Timestamp\r\n   * @return Point\r\n   */\n\n\n  Interaction.prototype.getTrailPoint = function (pointer, timestamp) {\n    var res;\n\n    for (var i = 0; i < pointer.track.length; i++) {\n      if (pointer.track[i].timestamp >= timestamp) {\n        res = pointer.track[i];\n        break;\n      }\n    }\n\n    return res;\n  };\n  /**\r\n   * Checks if same pointer already exists in the list.\r\n   *\r\n   * @param list     List to check agains\r\n   * @param pointer  Pointer\r\n   * @return Exists?\r\n   */\n\n\n  Interaction.prototype.pointerExists = function (list, pointer) {\n    var exists = false;\n    list.each(function (item) {\n      if (item == pointer) {\n        return;\n      }\n\n      exists = item.point.x == pointer.point.x && item.point.y == pointer.point.y;\n    });\n    return exists;\n  };\n  /**\r\n   * Returns an [[InteractionObject]] representation of a DOM element.\r\n   *\r\n   * You can use this on any HTML or SVG element, to add interactive features\r\n   * to it.\r\n   *\r\n   * @param element  Element\r\n   * @return InteractionObject\r\n   */\n\n\n  Interaction.prototype.getInteraction = function (element) {\n    return new InteractionObject(element);\n  };\n  /**\r\n   * Sets a style property on an element. Stores original value to be restored\r\n   * later with [[restoreStyle]].\r\n   *\r\n   * @see {@link restoreStyle}\r\n   * @param io        Element\r\n   * @param property  Property\r\n   * @param value     Value\r\n   */\n\n\n  Interaction.prototype.setTemporaryStyle = function (io, property, value) {\n    // Get element\n    //let el = io.element.tagName == \"g\" ? <SVGSVGElement>io.element.parentNode : io.element;\n    var el = io.element; // Save original property if it is set and hasn't been saved before already\n\n    if ($type.hasValue(el.style[property]) && !io.replacedStyles.hasKey(property)) {\n      io.replacedStyles.setKey(property, el.style[property]);\n    } // Replace with the new one\n\n\n    $dom.setStyle(el, property, value);\n  };\n  /**\r\n   * Restores specific style on an element.\r\n   *\r\n   * @param io        Element\r\n   * @param property  Style property\r\n   */\n\n\n  Interaction.prototype.restoreStyle = function (io, property) {\n    // Reset style\n    if (io.replacedStyles.hasKey(property)) {\n      io.element.style[property] = io.replacedStyles.getKey(property);\n      io.replacedStyles.removeKey(property);\n    } else {\n      delete io.element.style[property];\n    }\n  };\n  /**\r\n   * Restore temporarily reset styles on an element.\r\n   *\r\n   * @param io Element\r\n   */\n\n\n  Interaction.prototype.restoreAllStyles = function (io) {\n    $iter.each(io.replacedStyles.iterator(), function (a) {\n      var key = a[0];\n      var value = a[1];\n      io.element.style[key] = value;\n      io.replacedStyles.removeKey(key);\n    });\n  };\n  /**\r\n   * Disposes this object and cleans up after itself.\r\n   */\n\n\n  Interaction.prototype.dispose = function () {\n    if (!this.isDisposed()) {\n      _super.prototype.dispose.call(this);\n\n      this.restoreAllStyles(this.body);\n      this.unlockWheel();\n    }\n  }; // @ts-ignore Used for debugging\n\n\n  Interaction.prototype.log = function (text, ev, io) {\n    var show = true;\n\n    if (show) {\n      // Touchlist?\n      if (ev.changedTouches) {\n        for (var i = 0; i < ev.changedTouches.length; i++) {\n          this.logTouch(text, ev.type, ev.changedTouches[i]);\n        }\n\n        return;\n      } // Get type\n\n\n      var type = \"\";\n\n      if (ev.pointerType) {\n        switch (ev.pointerType) {\n          case 2:\n            type = \"touch\";\n            break;\n\n          case 4:\n            type = \"mouse\";\n            break;\n\n          default:\n            type = ev.pointerType;\n            break;\n        }\n      } else if (typeof TouchEvent != \"undefined\" && ev instanceof TouchEvent) {\n        type = \"touch\";\n      } else if (ev.type.match(/^mouse/)) {\n        type = \"mouse\";\n      } else {\n        type = \"???\";\n      } // Get ID\n\n\n      var id = \"\";\n\n      if ($type.hasValue(ev.identifier)) {\n        id = ev.identifier;\n      } else if ($type.hasValue(ev.pointerId)) {\n        id = ev.pointerId;\n      } else {\n        id = \"???\";\n      }\n\n      if (io) {\n        console.log(text + \" (\" + io.uid + \")  \" + ev.type + \"  \" + type + \"  \" + id);\n      } else {\n        console.log(text + \"  \" + ev.type + \"  \" + type + \"  \" + id);\n      }\n    }\n  };\n\n  Interaction.prototype.logTouch = function (text, type, ev) {\n    console.log(text + \"  \" + type + \"  \" + \"touch\" + \"  \" + ev.identifier);\n  };\n\n  return Interaction;\n}(BaseObjectEvents);\n\nexport { Interaction };\nvar interaction = null;\n/**\r\n * Returns a single unified global instance of [[Interaction]].\r\n *\r\n * All code should use this function, rather than create their own instances\r\n * of [[Interaction]].\r\n */\n\nexport function getInteraction() {\n  if (interaction == null) {\n    interaction = new Interaction();\n  }\n\n  return interaction;\n}","map":null,"metadata":{},"sourceType":"module"}