{"ast":null,"code":"/**\r\n * Map polygon series module\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { MapSeries, MapSeriesDataItem } from \"./MapSeries\";\nimport { MapPolygon } from \"./MapPolygon\";\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\nimport { registry } from \"../../core/Registry\";\nimport * as $mapUtils from \"./MapUtils\";\nimport * as $array from \"../../core/utils/Array\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport { Disposer } from \"../../core/utils/Disposer\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines a [[DataItem]] for [[MapPolygonSeries]]\r\n * @see {@link DataItem}\r\n */\n\nvar MapPolygonSeriesDataItem =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MapPolygonSeriesDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function MapPolygonSeriesDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"MapPolygonSeriesDataItem\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * @ignore\r\n   */\n\n\n  MapPolygonSeriesDataItem.prototype.getFeature = function () {\n    if (this.multiPolygon && this.multiPolygon.length > 0) {\n      return {\n        \"type\": \"Feature\",\n        geometry: {\n          type: \"MultiPolygon\",\n          coordinates: this.multiPolygon\n        }\n      };\n    }\n  };\n\n  Object.defineProperty(MapPolygonSeriesDataItem.prototype, \"mapPolygon\", {\n    /**\r\n     * A [[MapPolygon]] element related to this data item.\r\n     *\r\n     * @readonly\r\n     * @return Element\r\n     */\n    get: function get() {\n      var _this = this;\n\n      if (!this._mapPolygon) {\n        var mapPolygon_1 = this.component.mapPolygons.create();\n        this._mapPolygon = mapPolygon_1;\n        this.addSprite(mapPolygon_1);\n\n        this._disposers.push(new Disposer(function () {\n          if (_this.component) {\n            _this.component.mapPolygons.removeValue(mapPolygon_1);\n          }\n        }));\n\n        this.mapObject = mapPolygon_1;\n      }\n\n      return this._mapPolygon;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapPolygonSeriesDataItem.prototype, \"polygon\", {\n    /**\r\n     * @return Coordinates\r\n     */\n    get: function get() {\n      return this._polygon;\n    },\n\n    /**\r\n     * A collection of X/Y coordinates for a single polygon. E.g.:\r\n     *\r\n     * ```JSON\r\n     * [\r\n     *   [\r\n     *     [ 100, 150 ],\r\n     *     [ 120, 200 ],\r\n     *     [ 150, 200 ],\r\n     *     [ 170, 240 ],\r\n     *     [ 100, 150 ]\r\n     *   ]\r\n     * ]\r\n     * ```\r\n     *\r\n     * @param polygon  Coordinates\r\n     */\n    set: function set(polygon) {\n      this._polygon = polygon;\n      this.multiPolygon = [polygon];\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapPolygonSeriesDataItem.prototype, \"multiPolygon\", {\n    /**\r\n     * @return Coordinates\r\n     */\n    get: function get() {\n      return this._multiPolygon;\n    },\n\n    /**\r\n     * A collection of X/Y coordinates for a multi-part polygon. E.g.:\r\n     *\r\n     * ```JSON\r\n     * [\r\n     *   // Part 1\r\n     *   [\r\n     *     [\r\n     *       [ 100, 150 ],\r\n     *       [ 120, 200 ],\r\n     *       [ 150, 220 ],\r\n     *       [ 170, 240 ],\r\n     *       [ 100, 150 ]\r\n     *     ]\r\n     *   ],\r\n     *\r\n     *   // Part 2\r\n     *   [\r\n     *     [\r\n     *       [ 300, 350 ],\r\n     *       [ 320, 400 ],\r\n     *       [ 350, 420 ],\r\n     *       [ 370, 440 ],\r\n     *       [ 300, 350 ]\r\n     *     ]\r\n     *   ]\r\n     * ]\r\n     * ```\r\n     *\r\n     * @param multiPolygon  Coordinates\r\n     */\n    set: function set(multiPolygon) {\n      this._multiPolygon = multiPolygon;\n      this.updateExtremes();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapPolygonSeriesDataItem.prototype, \"geoPolygon\", {\n    /**\r\n     * @return Coordinates\r\n     */\n    get: function get() {\n      return this._geoPolygon;\n    },\n\n    /**\r\n     * A collection of lat/long coordinates for a single polygon. E.g.:\r\n     *\r\n     * ```JSON\r\n     * [\r\n     *   [\r\n     *     { latitude: -10.0, longitude: -10.0 },\r\n     *     { latitude: 10.0, longitude: -10.0 },\r\n     *     { latitude: 10.0, longitude: 10.0 },\r\n     *     { latitude: -10.0, longitude: -10.0 }\r\n     *   ]\r\n     * ]\r\n     * ```\r\n     *\r\n     * @see {@link https://tools.ietf.org/html/rfc7946#section-3.1.6} GeoJSON Polygon reference\r\n     * @param geoPolygon  Coordinates\r\n     */\n    set: function set(geoPolygon) {\n      this._geoPolygon = geoPolygon;\n      this.multiGeoPolygon = [geoPolygon];\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapPolygonSeriesDataItem.prototype, \"multiGeoPolygon\", {\n    /**\r\n     * @return Coordinates\r\n     */\n    get: function get() {\n      return this._multiGeoPolygon;\n    },\n\n    /**\r\n     * A collection of lat/long coordinates for a multi-part polygon. E.g.:\r\n     *\r\n     * ```JSON\r\n     * [\r\n     *   [\r\n     *     [\r\n     *       { longitude: 180.0, latitude: 40.0 },\r\n     *       { longitude: 180.0, latitude: 50.0 },\r\n     *       { longitude: 170.0, latitude: 50.0 },\r\n     *       { longitude: 170.0, latitude: 40.0 },\r\n     *       { longitude: 180.0, latitude: 40.0 }\r\n     *     ]\r\n     *   ],\r\n     *   [\r\n     *     [\r\n     *       { longitude: -170.0, latitude: 40.0 },\r\n     *       { longitude: -170.0, latitude: 50.0 },\r\n     *       { longitude: -180.0, latitude: 50.0 },\r\n     *       { longitude: -180.0, latitude: 40.0 },\r\n     *       { longitude: -170.0, latitude: 40.0 }\r\n     *     ]\r\n     *   ]\r\n     * ]\r\n     * ```\r\n     *\r\n     * @see {@link https://tools.ietf.org/html/rfc7946#section-3.1.7} GeoJSON MultiPolygon reference\r\n     * @param multiGeoPolygon  Coordinates\r\n     */\n    set: function set(multiGeoPolygon) {\n      this._multiGeoPolygon = multiGeoPolygon;\n      this.multiPolygon = $mapUtils.multiGeoPolygonToMultipolygon(multiGeoPolygon);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return MapPolygonSeriesDataItem;\n}(MapSeriesDataItem);\n\nexport { MapPolygonSeriesDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * A series of map polygon elements.\r\n *\r\n * @see {@link IMapPolygonSeriesEvents} for a list of available Events\r\n * @see {@link IMapPolygonSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\n\nvar MapPolygonSeries =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MapPolygonSeries, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function MapPolygonSeries() {\n    var _this = // Init\n    _super.call(this) || this;\n    /**\r\n     * Indicates if series should automatically calculate visual center of the\r\n     * polygons (accessible via `visualLongitude` and `visualLatitude` properties\r\n     * of the [[MapPolygon]]).\r\n     *\r\n     * @default false\r\n     * @since 4.3.0\r\n     */\n\n\n    _this.calculateVisualCenter = false;\n    _this.className = \"MapPolygonSeries\"; // Set data fields\n\n    _this.dataFields.multiPolygon = \"multiPolygon\";\n    _this.dataFields.polygon = \"polygon\";\n    _this.dataFields.geoPolygon = \"geoPolygon\";\n    _this.dataFields.multiGeoPolygon = \"multiGeoPolygon\"; // Apply theme\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Returns a new/empty DataItem of the type appropriate for this object.\r\n   *\r\n   * @see {@link DataItem}\r\n   * @return Data Item\r\n   */\n\n\n  MapPolygonSeries.prototype.createDataItem = function () {\n    return new MapPolygonSeriesDataItem();\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  MapPolygonSeries.prototype.processIncExc = function () {\n    this.mapPolygons.clear();\n\n    _super.prototype.processIncExc.call(this);\n  };\n  /**\r\n   * (Re)validates series data, effectively causing the whole series to be\r\n   * redrawn.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  MapPolygonSeries.prototype.validateData = function () {\n    // process geoJSON and created map objects\n    if (this.useGeodata || this.geodata) {\n      var geoJSON = !this._dataSources[\"geodata\"] ? this.chart.geodata : undefined;\n\n      if (this.geodata) {\n        geoJSON = this.geodata;\n      }\n\n      if (geoJSON) {\n        var features = void 0;\n\n        if (geoJSON.type == \"FeatureCollection\") {\n          features = geoJSON.features;\n        } else if (geoJSON.type == \"Feature\") {\n          features = [geoJSON];\n        } else if ([\"Point\", \"LineString\", \"Polygon\", \"MultiPoint\", \"MultiLineString\", \"MultiPolygon\"].indexOf(geoJSON.type) != -1) {\n          features = [{\n            geometry: geoJSON\n          }];\n        } else {\n          console.log(\"nothing found in geoJSON\");\n        }\n\n        if (features) {\n          var _loop_1 = function _loop_1(i, len) {\n            var feature = features[i];\n            var geometry = feature.geometry;\n\n            if (geometry) {\n              var type = geometry.type;\n              var id_1 = feature.id;\n\n              if (type == \"Polygon\" || type == \"MultiPolygon\") {\n                if (!this_1.checkInclude(this_1.include, this_1.exclude, id_1)) {\n                  return \"continue\";\n                }\n\n                var coordinates = geometry.coordinates;\n\n                if (coordinates) {\n                  // make the same as MultiPolygon\n                  if (type == \"Polygon\") {\n                    coordinates = [coordinates];\n                  }\n                } // find data object in user-provided data\n\n\n                var dataObject = $array.find(this_1.data, function (value, i) {\n                  return value.id == id_1;\n                }); // create one if not found\n\n                if (!dataObject) {\n                  dataObject = {\n                    multiPolygon: coordinates,\n                    id: id_1,\n                    madeFromGeoData: true\n                  };\n                  this_1.data.push(dataObject);\n                } // in case found\n                else {\n                    // if user-provided object doesn't have points data provided in any way:\n                    if (!dataObject.multiPolygon) {\n                      dataObject.multiPolygon = coordinates;\n                    }\n                  } // copy properties data to datacontext\n\n\n                $utils.softCopyProperties(feature.properties, dataObject);\n              }\n            }\n          };\n\n          var this_1 = this;\n\n          for (var i = 0, len = features.length; i < len; i++) {\n            _loop_1(i, len);\n          }\n        }\n      }\n    }\n\n    _super.prototype.validateData.call(this);\n  };\n  /**\r\n   * (Re)validates the series\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  MapPolygonSeries.prototype.validate = function () {\n    _super.prototype.validate.call(this);\n\n    this.dataItems.each(function (dataItem) {\n      $utils.used(dataItem.mapPolygon);\n    });\n    this.mapPolygons.each(function (mapPolygon) {\n      mapPolygon.validate(); // makes small go first to avoid hover problems with IE\n\n      if (!mapPolygon.zIndex && !mapPolygon.propertyFields.zIndex) {\n        mapPolygon.zIndex = 1000000 - mapPolygon.boxArea;\n      }\n    });\n  };\n\n  Object.defineProperty(MapPolygonSeries.prototype, \"mapPolygons\", {\n    /**\r\n     * List of polygon elements in the series.\r\n     *\r\n     * @return Polygon list\r\n     */\n    get: function get() {\n      if (!this._mapPolygons) {\n        var polygonTemplate = new MapPolygon();\n        var mapPolygons = new ListTemplate(polygonTemplate);\n\n        this._disposers.push(new ListDisposer(mapPolygons));\n\n        this._disposers.push(mapPolygons.template);\n\n        mapPolygons.template.focusable = true;\n        mapPolygons.events.on(\"inserted\", this.handleObjectAdded, this, false);\n        this._mapPolygons = mapPolygons;\n        this._mapObjects = mapPolygons;\n      }\n\n      return this._mapPolygons;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * returns MapPolygon by id in geoJSON file\r\n   * @param polygon id\r\n   * @return {MapPolygon}\r\n   */\n\n  MapPolygonSeries.prototype.getPolygonById = function (id) {\n    return $iter.find(this.mapPolygons.iterator(), function (mapPolygon) {\n      var dataContext = mapPolygon.dataItem.dataContext;\n      return dataContext.id == id;\n    });\n  };\n  /**\r\n   * Copies all properties from another instance of [[Series]].\r\n   *\r\n   * @param source  Source series\r\n   */\n\n\n  MapPolygonSeries.prototype.copyFrom = function (source) {\n    this.mapPolygons.template.copyFrom(source.mapPolygons.template);\n\n    _super.prototype.copyFrom.call(this, source);\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  MapPolygonSeries.prototype.getFeatures = function () {\n    var _this = this;\n\n    var features = [];\n    this.dataItems.each(function (dataItem) {\n      var feature = dataItem.getFeature();\n\n      if (feature) {\n        features.push(feature);\n      }\n    });\n    this.mapPolygons.each(function (mapPolygon) {\n      if (_this.dataItems.indexOf(mapPolygon._dataItem) == -1) {\n        var feature = mapPolygon.getFeature();\n\n        if (feature) {\n          features.push(feature);\n        }\n      }\n    });\n    return features;\n  };\n\n  return MapPolygonSeries;\n}(MapSeries);\n\nexport { MapPolygonSeries };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"MapPolygonSeries\"] = MapPolygonSeries;\nregistry.registeredClasses[\"MapPolygonSeriesDataItem\"] = MapPolygonSeriesDataItem;","map":null,"metadata":{},"sourceType":"module"}