{"ast":null,"code":"/**\r\n * A collection of low-level async operation stuff.\r\n */\n\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport * as $array from \"./Array\";\nvar pendingFrame = false;\nvar nextQueue = [];\nvar readQueue = [];\nvar writeQueue = [];\nvar idleQueue = [];\nvar fps = 1000 / 60;\n/**\r\n * [raf description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\n\nexport var raf = typeof requestAnimationFrame === \"function\" ? function (fn) {\n  requestAnimationFrame(fn);\n} : function (fn) {\n  setTimeout(fn, fps);\n};\n/**\r\n * [frameLoop description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\n\nfunction frameLoop() {\n  var now = Date.now();\n  var length = nextQueue.length;\n\n  for (var i = 0; i < length; ++i) {\n    nextQueue[i](now);\n  }\n\n  $array.shiftLeft(nextQueue, length);\n\n  for (var i = 0; i < readQueue.length; ++i) {\n    readQueue[i](now);\n  }\n\n  readQueue.length = 0;\n\n  for (var i = 0; i < writeQueue.length; ++i) {\n    writeQueue[i](now);\n  }\n\n  writeQueue.length = 0;\n\n  if (nextQueue.length === 0 && readQueue.length === 0) {\n    pendingFrame = false;\n  } else {\n    raf(frameLoop);\n  }\n}\n/**\r\n * [pendFrame description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\n\n\nfunction pendFrame() {\n  if (!pendingFrame) {\n    pendingFrame = true;\n    raf(frameLoop);\n  }\n}\n/**\r\n * [nextFrame description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param fn [description]\r\n */\n\n\nexport function nextFrame(fn) {\n  nextQueue.push(fn);\n  pendFrame();\n}\n/**\r\n * [readFrame description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param fn [description]\r\n */\n\nexport function readFrame(fn) {\n  readQueue.push(fn);\n  pendFrame();\n}\n/**\r\n * [writeFrame description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param fn [description]\r\n */\n\nexport function writeFrame(fn) {\n  writeQueue.push(fn);\n  pendFrame();\n}\n/**\r\n * [whenIdle description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param fn [description]\r\n */\n\nexport function whenIdle(fn) {\n  idleQueue.push(fn);\n}\n/**\r\n * [triggerIdle description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @todo Maybe don't trigger a callback which was added while in the middle of triggering?\r\n */\n\nexport function triggerIdle() {\n  var now = Date.now();\n  var length = idleQueue.length;\n\n  for (var i = 0; i < length; ++i) {\n    idleQueue.shift()(now);\n  }\n}","map":null,"metadata":{},"sourceType":"module"}