{"ast":null,"code":"var _jsxFileName = \"/Users/Overseer/Desktop/fullstack_app/client/src/App.js\";\nimport React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Landing from './routes/Landing';\nimport Homeglobe from './routes/Homeglobe';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faUser, faEnvelope, faKey, faCheck } from '@fortawesome/free-solid-svg-icons';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nimport { checkSignedInPreLoad } from './actions';\nlibrary.add(faUser, faEnvelope, faKey, faCheck);\n\nconst App = checkSignedInPreLoad => {\n  axios.get('http://localhost:3001/api/users/login').then(res => {\n    if (res.status === 200) {\n      checkSignedInPreLoad(res.data);\n    } else {\n      alert(res);\n    }\n  }).catch(err => alert(err));\n  return React.createElement(Router, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, React.createElement(Route, {\n    exact: true,\n    path: \"/\",\n    component: Landing,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }), React.createElement(Route, {\n    path: \"/homeglobe\",\n    component: Homeglobe,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }));\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    checkSignedInPreLoad: id => dispatch(checkSignedInPreLoad(id))\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(App);","map":{"version":3,"sources":["/Users/Overseer/Desktop/fullstack_app/client/src/App.js"],"names":["React","BrowserRouter","Router","Route","Landing","Homeglobe","library","faUser","faEnvelope","faKey","faCheck","axios","connect","checkSignedInPreLoad","add","App","get","then","res","status","data","alert","catch","err","mapDispatchToProps","dispatch","id"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAa,IAAIC,MAA1B,EAAkCC,KAAlC,QAA+C,kBAA/C;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,SAASC,OAAT,QAAwB,mCAAxB;AACA,SAASC,MAAT,EAAiBC,UAAjB,EAA6BC,KAA7B,EAAoCC,OAApC,QAAmD,mCAAnD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,oBAAT,QAAqC,WAArC;AAGAP,OAAO,CAACQ,GAAR,CAAYP,MAAZ,EAAoBC,UAApB,EAAgCC,KAAhC,EAAuCC,OAAvC;;AAEA,MAAMK,GAAG,GAAIF,oBAAD,IAA0B;AAClCF,EAAAA,KAAK,CAACK,GAAN,CAAU,uCAAV,EAAmDC,IAAnD,CAAwDC,GAAG,IAAI;AAC3D,QAAIA,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACpBN,MAAAA,oBAAoB,CAACK,GAAG,CAACE,IAAL,CAApB;AACH,KAFD,MAEO;AACHC,MAAAA,KAAK,CAACH,GAAD,CAAL;AACH;AACJ,GAND,EAMGI,KANH,CAMSC,GAAG,IAAIF,KAAK,CAACE,GAAD,CANrB;AAOA,SACI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,KAAD;AAAO,IAAA,KAAK,MAAZ;AAAa,IAAA,IAAI,EAAC,GAAlB;AAAsB,IAAA,SAAS,EAAEnB,OAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,YAAZ;AAAyB,IAAA,SAAS,EAAEC,SAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADJ;AAMH,CAdD;;AAgBA,MAAMmB,kBAAkB,GAAGC,QAAQ,IAAI;AACnC,SAAO;AACHZ,IAAAA,oBAAoB,EAAEa,EAAE,IAAID,QAAQ,CAACZ,oBAAoB,CAACa,EAAD,CAArB;AADjC,GAAP;AAGH,CAJD;;AAMA,eAAed,OAAO,CAAC,IAAD,EAAOY,kBAAP,CAAP,CAAkCT,GAAlC,CAAf","sourcesContent":["import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Landing from './routes/Landing'\nimport Homeglobe from './routes/Homeglobe'\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faUser, faEnvelope, faKey, faCheck } from '@fortawesome/free-solid-svg-icons'\nimport axios from 'axios'\nimport { connect } from 'react-redux'\nimport { checkSignedInPreLoad } from './actions'\n\n\nlibrary.add(faUser, faEnvelope, faKey, faCheck)\n\nconst App = (checkSignedInPreLoad) => {\n    axios.get('http://localhost:3001/api/users/login').then(res => {\n        if (res.status === 200) {\n            checkSignedInPreLoad(res.data)\n        } else {\n            alert(res)\n        }\n    }).catch(err => alert(err))\n    return (\n        <Router>\n            <Route exact path=\"/\" component={Landing} />\n            <Route path=\"/homeglobe\" component={Homeglobe} />\n        </Router>\n    )\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        checkSignedInPreLoad: id => dispatch(checkSignedInPreLoad(id))\n    }\n}\n\nexport default connect(null, mapDispatchToProps)(App)"]},"metadata":{},"sourceType":"module"}