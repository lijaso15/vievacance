{"ast":null,"code":"/**\r\n * Map image series module\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { MapSeries, MapSeriesDataItem } from \"./MapSeries\";\nimport { MapImage } from \"./MapImage\";\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\nimport { registry } from \"../../core/Registry\";\nimport * as $array from \"../../core/utils/Array\";\nimport * as $mapUtils from \"./MapUtils\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $type from \"../../core/utils/Type\";\nimport { Disposer } from \"../../core/utils/Disposer\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines a [[DataItem]] for [[MapImageSeries]]\r\n * @see {@link DataItem}\r\n */\n\nvar MapImageSeriesDataItem =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MapImageSeriesDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function MapImageSeriesDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"MapImageSeriesDataItem\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * @ignore\r\n   */\n\n\n  MapImageSeriesDataItem.prototype.getFeature = function () {\n    return {\n      \"type\": \"Feature\",\n      geometry: {\n        type: \"Point\",\n        coordinates: this.point\n      }\n    };\n  };\n\n  Object.defineProperty(MapImageSeriesDataItem.prototype, \"mapImage\", {\n    /**\r\n     * A [[MapImage]] element related to this data item.\r\n     *\r\n     * @return Element\r\n     */\n    get: function () {\n      var _this = this;\n\n      if (!this._mapImage) {\n        var mapImage_1 = this.component.mapImages.create();\n        this.addSprite(mapImage_1);\n        this._mapImage = mapImage_1;\n\n        this._disposers.push(mapImage_1);\n\n        this._disposers.push(new Disposer(function () {\n          if (_this.component) {\n            _this.component.mapImages.removeValue(mapImage_1);\n          }\n        }));\n\n        this.mapObject = mapImage_1;\n      }\n\n      return this._mapImage;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapImageSeriesDataItem.prototype, \"point\", {\n    /**\r\n     * @return [description]\r\n     */\n    get: function () {\n      return this._point;\n    },\n\n    /**\r\n     * [point description]\r\n     *\r\n     * @todo Description\r\n     * @param point [description]\r\n     */\n    set: function (point) {\n      this._point = point;\n      this._geoPoint = $mapUtils.pointToGeo(point);\n      this.updateExtremes();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapImageSeriesDataItem.prototype, \"geoPoint\", {\n    /**\r\n     * @return Image coordinates\r\n     */\n    get: function () {\n      return this._geoPoint;\n    },\n\n    /**\r\n     * Geographical coordinates (lat/long) image is placed at.\r\n     *\r\n     * @param geoPoint Image coordinates\r\n     */\n    set: function (geoPoint) {\n      this._geoPoint = geoPoint;\n      this.point = [geoPoint.longitude, geoPoint.latitude];\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return MapImageSeriesDataItem;\n}(MapSeriesDataItem);\n\nexport { MapImageSeriesDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * A series of map image (marker) elements.\r\n *\r\n * @see {@link IMapImageSeriesEvents} for a list of available Events\r\n * @see {@link IMapImageSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\n\nvar MapImageSeries =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MapImageSeries, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function MapImageSeries() {\n    var _this = // Init\n    _super.call(this) || this;\n\n    _this.className = \"MapImageSeries\"; // Set data fields\n\n    _this.dataFields.multiPoint = \"multiPoint\";\n    _this.dataFields.point = \"point\";\n    _this.dataFields.geoPoint = \"geoPoint\";\n    _this.dataFields.multiGeoPoint = \"multiGeoPoint\";\n    _this.ignoreBounds = true; // Apply theme\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Returns a new/empty DataItem of the type appropriate for this object.\r\n   *\r\n   * @see {@link DataItem}\r\n   * @return Data Item\r\n   */\n\n\n  MapImageSeries.prototype.createDataItem = function () {\n    return new MapImageSeriesDataItem();\n  };\n  /**\r\n   * (Re)validates the data of the sries, effectively forcing it to redraw\r\n   * all of its elements.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  MapImageSeries.prototype.validateData = function () {\n    var _this = this;\n\n    if (this.data.length > 0 && this._parseDataFrom == 0) {\n      this.mapImages.clear();\n    } // process geoJSON and created map objects\n\n\n    if (this.useGeodata) {\n      if (this.useGeodata || this.geodata) {\n        var geoJSON = this.chart.geodata;\n        var features = void 0;\n\n        if (geoJSON.type == \"FeatureCollection\") {\n          features = geoJSON.features;\n        } else if (geoJSON.type == \"Feature\") {\n          features = [geoJSON];\n        } else if ([\"Point\", \"LineString\", \"Polygon\", \"MultiPoint\", \"MultiLineString\", \"MultiPolygon\"].indexOf(geoJSON.type) != -1) {\n          features = [{\n            geometry: geoJSON\n          }];\n        } else {\n          console.log(\"nothing found in geoJSON\");\n        }\n\n        if (features) {\n          var _loop_1 = function (i, len) {\n            var feature = features[i];\n            var geometry = feature.geometry;\n\n            if (geometry) {\n              var type = geometry.type;\n              var id_1 = feature.id;\n\n              if (type == \"Point\" || type == \"MultiPoint\") {\n                // todo: we don't support multipoints at the moment actually\n                if (!this_1.checkInclude(this_1.include, this_1.exclude, id_1)) {\n                  return \"continue\";\n                }\n\n                var coordinates = geometry.coordinates; // make the same as MultiPoint\n\n                if (type == \"Point\") {\n                  coordinates = [coordinates];\n                }\n\n                var dataObject = $array.find(this_1.data, function (value, i) {\n                  return value.id == id_1;\n                });\n\n                if (!dataObject) {\n                  dataObject = {\n                    multiPoint: coordinates,\n                    id: id_1,\n                    madeFromGeoData: true\n                  };\n                  this_1.data.push(dataObject);\n                } else {\n                  if (!dataObject.multiPoint) {\n                    dataObject.multiPoint = coordinates;\n                  }\n                } // copy properties data to datacontext\n\n\n                $utils.softCopyProperties(feature.properties, dataObject);\n              }\n            }\n          };\n\n          var this_1 = this;\n\n          for (var i = 0, len = features.length; i < len; i++) {\n            _loop_1(i, len);\n          }\n        }\n      }\n    }\n\n    _super.prototype.validateData.call(this); // important! this should go after super.validateData\n    // if data is parsed in chunks, images list is corrupted, fix it here\n\n\n    $iter.each(this.dataItems.iterator(), function (dataItem) {\n      var mapImage = dataItem.mapImage;\n\n      if (!mapImage.isDisposed()) {\n        _this.mapImages.moveValue(mapImage);\n\n        if ($type.isNumber(mapImage.latitude) && $type.isNumber(mapImage.latitude)) {\n          dataItem.geoPoint = {\n            latitude: mapImage.latitude,\n            longitude: mapImage.longitude\n          };\n        }\n      }\n    });\n  };\n\n  Object.defineProperty(MapImageSeries.prototype, \"mapImages\", {\n    /**\r\n     * A list of map images in the series.\r\n     *\r\n     * @return Map images\r\n     */\n    get: function () {\n      if (!this._mapImages) {\n        var template = new MapImage();\n        var mapImages = new ListTemplate(template);\n\n        this._disposers.push(new ListDisposer(mapImages));\n\n        this._disposers.push(mapImages.template);\n\n        mapImages.template.focusable = true;\n        mapImages.events.on(\"inserted\", this.handleObjectAdded, this, false);\n        this._mapImages = mapImages;\n        this._mapObjects = mapImages;\n      }\n\n      return this._mapImages;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * (Re)validates data element, effectively triggering its redrawal.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param dataItem  Data item\r\n   */\n\n  MapImageSeries.prototype.validateDataElement = function (dataItem) {\n    _super.prototype.validateDataElement.call(this, dataItem);\n\n    dataItem.mapImage.invalidate();\n  };\n  /**\r\n   * (Re)validates the series\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  MapImageSeries.prototype.validate = function () {\n    _super.prototype.validate.call(this);\n\n    $iter.each(this.mapImages.iterator(), function (mapImage) {\n      mapImage.validatePosition();\n    });\n  };\n  /**\r\n   * Copies all properties from another instance of [[Series]].\r\n   *\r\n   * @param source  Source series\r\n   */\n\n\n  MapImageSeries.prototype.copyFrom = function (source) {\n    this.mapImages.template.copyFrom(source.mapImages.template);\n\n    _super.prototype.copyFrom.call(this, source);\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  MapImageSeries.prototype.getFeatures = function () {\n    var _this = this;\n\n    var features = [];\n    this.dataItems.each(function (dataItem) {\n      var feature = dataItem.getFeature();\n\n      if (feature) {\n        features.push(feature);\n      }\n    });\n    this.mapImages.each(function (mapImage) {\n      if (_this.dataItems.indexOf(mapImage._dataItem) == -1) {\n        var feature = mapImage.getFeature();\n\n        if (feature) {\n          features.push(feature);\n        }\n      }\n    });\n    return features;\n  };\n  /**\r\n   * returns MapImage by id\r\n   * @param image id\r\n   * @return {MapImage}\r\n   */\n\n\n  MapImageSeries.prototype.getImageById = function (id) {\n    return $iter.find(this.mapImages.iterator(), function (mapImage) {\n      var dataContext = mapImage.dataItem.dataContext;\n\n      if (mapImage.id == id || dataContext.id == id) {\n        return true;\n      }\n    });\n  };\n\n  return MapImageSeries;\n}(MapSeries);\n\nexport { MapImageSeries };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"MapImageSeries\"] = MapImageSeries;\nregistry.registeredClasses[\"MapImageSeriesDataItem\"] = MapImageSeriesDataItem;","map":null,"metadata":{},"sourceType":"module"}