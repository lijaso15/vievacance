{"ast":null,"code":"/**\r\n * DurationAxis module\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { ValueAxis, ValueAxisDataItem } from \"./ValueAxis\";\nimport { registry } from \"../../core/Registry\";\nimport * as $math from \"../../core/utils/Math\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines data item for [[DurationAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\n\nvar DurationAxisDataItem =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(DurationAxisDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function DurationAxisDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"DurationAxisDataItem\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  return DurationAxisDataItem;\n}(ValueAxisDataItem);\n\nexport { DurationAxisDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Used to create an axis that shows time durations.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let xAxis = chart.xAxes.push(new am4charts.DurationAxis());\r\n *\r\n * // Set settings\r\n * xAxis.title.text = \"Time\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.xAxes.push(new am4charts.DurationAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Time\";\r\n * ```\r\n * ```JSON\r\n * \"xAxes\": [{\r\n *   \"type\": \"DurationAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Time\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} for mor information about duration formatters.\r\n * @see {@link IDurationAxisEvents} for a list of available Events\r\n * @see {@link IDurationAxisAdapters} for a list of available Adapters\r\n * @important\r\n */\n\nvar DurationAxis =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(DurationAxis, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function DurationAxis() {\n    var _this = // Init\n    _super.call(this) || this;\n    /**\r\n     * A base unit (granularity) of data.\r\n     *\r\n     * Used to indicate what are the base units of your data.\r\n     */\n\n\n    _this._baseUnit = \"second\";\n    _this.className = \"DurationAxis\";\n\n    _this.setPropertyValue(\"maxZoomFactor\", 1000000); // Apply theme\n\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Formats the value according to axis' own [[DurationFormatter]].\r\n   *\r\n   * @param value  Source value\r\n   * @return Formatted value\r\n   */\n\n\n  DurationAxis.prototype.formatLabel = function (value, format) {\n    return this.durationFormatter.format(value, format || this.axisDurationFormat);\n  };\n  /**\r\n   * Adjusts actual min and max scale values so that the axis starts and ends\r\n   * at \"nice\" values, unless `strictMinMax` is set.\r\n   *\r\n   * The `difference` can be something else than `max - min`, because of the\r\n   * axis breaks.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   * @param min        [description]\r\n   * @param max        [description]\r\n   * @param difference [description]\r\n   * @param gridCount  [description]\r\n   * @param strictMode [description]\r\n   * @return [description]\r\n   */\n\n\n  DurationAxis.prototype.adjustMinMax = function (min, max, difference, gridCount, strictMode) {\n    var minMaxStep;\n    var timeUnit = this.baseUnit; // we don't allow to go to smaller units, setting so to avoid invalidation\n\n    this.setPropertyValue(\"maxPrecision\", 0);\n\n    if (timeUnit == \"millisecond\" || timeUnit == \"second\" || timeUnit == \"minute\" || timeUnit == \"hour\") {\n      // will fail if 0\n      if (gridCount <= 1) {\n        gridCount = 1;\n      }\n\n      gridCount = Math.round(gridCount);\n      var initialMin = min;\n      var initialMax = max; // in case min and max is the same, use max\n\n      if (difference === 0) {\n        difference = Math.abs(max);\n      }\n\n      var step = difference / gridCount;\n      var divisors = [60, 30, 20, 15, 10, 2, 1];\n      var realDivisor = 1;\n\n      if (timeUnit == \"hour\") {\n        divisors = [24, 12, 6, 4, 2, 1];\n      }\n\n      try {\n        for (var divisors_1 = tslib_1.__values(divisors), divisors_1_1 = divisors_1.next(); !divisors_1_1.done; divisors_1_1 = divisors_1.next()) {\n          var divisor = divisors_1_1.value;\n\n          if (difference / divisor > gridCount) {\n            realDivisor = divisor;\n            break;\n          }\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (divisors_1_1 && !divisors_1_1.done && (_a = divisors_1.return)) _a.call(divisors_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n\n      var count = Math.ceil((max - min) / realDivisor / gridCount);\n      var exponent = Math.log(Math.abs(count)) * Math.LOG10E;\n      var power = Math.pow(10, Math.floor(exponent)) / 10;\n      var reducedCount = count / power; // find closest to divisor\n\n      var closest = $math.closest(divisors, reducedCount);\n      count = closest * power;\n      step = realDivisor * count; // TODO can this be removed ?\n\n      this.durationFormatter.getValueUnit(step, this.baseUnit);\n      min = Math.floor(min / step) * step;\n      max = Math.ceil(max / step) * step;\n\n      if (strictMode) {\n        min -= step;\n\n        if (min < 0 && initialMin >= 0) {\n          min = 0;\n        }\n\n        max += step;\n\n        if (max > 0 && initialMax <= 0) {\n          max = 0;\n        }\n      }\n\n      minMaxStep = {\n        min: min,\n        max: max,\n        step: step\n      };\n    } else {\n      minMaxStep = _super.prototype.adjustMinMax.call(this, min, max, difference, gridCount, strictMode);\n    } // choose duration formatter based on step\n\n\n    this.axisDurationFormat = this.durationFormatter.getFormat(minMaxStep.step, minMaxStep.max, this.baseUnit);\n    return minMaxStep;\n\n    var e_1, _a;\n  };\n\n  Object.defineProperty(DurationAxis.prototype, \"tooltipDurationFormat\", {\n    /**\r\n     * @return Duration format for axis labels\r\n     */\n    get: function () {\n      return this._tooltipDurationFormat;\n    },\n\n    /**\r\n     * A special duration format to apply axis tooltips.\r\n     *\r\n     * Will use same format as for labels, if not set.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} for mor information.\r\n     * @param value  Duration format for axis labels\r\n     */\n    set: function (value) {\n      this._tooltipDurationFormat = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns text to show in a axis tooltip, based on specific position within\r\n   * axis.\r\n   *\r\n   * The label will be formatted as per [[NumberFormatter]] set for the whole\r\n   * chart, or explicitly for this Axis.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param position  Position (px)\r\n   * @return Label (numeric value)\r\n   */\n\n  DurationAxis.prototype.getTooltipText = function (position) {\n    var value = $math.round(this.positionToValue(position), this._stepDecimalPlaces);\n    return this.adapter.apply(\"getTooltipText\", this.formatLabel(value, this.tooltipDurationFormat));\n  };\n\n  Object.defineProperty(DurationAxis.prototype, \"baseUnit\", {\n    /**\r\n     * @return Base unit\r\n     */\n    get: function () {\n      return this._baseUnit;\n    },\n\n    /**\r\n     * A base unit (granularity) of data.\r\n     *\r\n     * Used to indicate what are the base units of your data.\r\n     *\r\n     * Available options: \"millisecond\", \"second\" (default), \"minute\", \"hour\",\r\n     * \"day\", \"week\", \"month\", \"year\".\r\n     *\r\n     * @default \"second\"\r\n     * @param timeUnit\r\n     */\n    set: function (timeUnit) {\n      if (this._baseUnit != timeUnit) {\n        this._baseUnit = timeUnit;\n        this.durationFormatter.baseUnit = timeUnit;\n        this.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Copies all properties and related data from a different instance of Axis.\r\n   *\r\n   * @param source Source Axis\r\n   */\n\n  DurationAxis.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n\n    this.baseUnit = source.baseUnit;\n  };\n\n  return DurationAxis;\n}(ValueAxis);\n\nexport { DurationAxis };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"DurationAxis\"] = DurationAxis;\nregistry.registeredClasses[\"DurationAxisDataItem\"] = DurationAxisDataItem;","map":null,"metadata":{},"sourceType":"module"}