{"ast":null,"code":"/**\r\n * Functionality for drawing quadratic curves.\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Line } from \"./Line\";\nimport { color } from \"../utils/Color\";\nimport * as $path from \"../rendering/Path\";\nimport * as $math from \"../utils/Math\";\nimport * as $type from \"../utils/Type\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Draws a waved line.\r\n *\r\n * @see {@link IQuadraticCurveEvents} for a list of available events\r\n * @see {@link IQuadraticCurveAdapters} for a list of available Adapters\r\n */\n\nvar QuadraticCurve =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(QuadraticCurve, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function QuadraticCurve() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"QuadraticCurve\";\n    _this.element = _this.paper.add(\"path\");\n    _this.pixelPerfect = false;\n    _this.fill = color();\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Draws the waved line.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  QuadraticCurve.prototype.draw = function () {\n    //super.draw();\n    if ($type.isNumber(this.x1 + this.x2 + this.y1 + this.y2 + this.cpx + this.cpy)) {\n      var p1 = {\n        x: this.x1,\n        y: this.y1\n      };\n      var p2 = {\n        x: this.x2,\n        y: this.y2\n      };\n      var cp = {\n        x: this.cpx,\n        y: this.cpy\n      };\n      var d = $path.moveTo(p1) + $path.quadraticCurveTo(p2, cp);\n      this.path = d;\n    }\n  };\n\n  Object.defineProperty(QuadraticCurve.prototype, \"cpx\", {\n    /**\r\n     * @return X\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"cpx\");\n    },\n\n    /**\r\n     * X coordinate of control point.\r\n     *\r\n     * @param value X\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"cpx\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(QuadraticCurve.prototype, \"cpy\", {\n    /**\r\n     * @return Y\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"cpy\");\n    },\n\n    /**\r\n     * Y coordinate of control point.\r\n     *\r\n     * @param value Y\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"cpy\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Converts relative position along the line (0-1) into pixel coordinates.\r\n   *\r\n   * @param position  Position (0-1)\r\n   * @return Coordinates\r\n   */\n\n  QuadraticCurve.prototype.positionToPoint = function (position) {\n    var p1 = {\n      x: this.x1,\n      y: this.y1\n    };\n    var cp = {\n      x: this.cpx,\n      y: this.cpy\n    };\n    var p2 = {\n      x: this.x2,\n      y: this.y2\n    };\n    var point1 = $math.getPointOnQuadraticCurve(p1, p2, cp, position);\n    var point2 = $math.getPointOnQuadraticCurve(p1, p2, cp, position + 0.001);\n    return {\n      x: point1.x,\n      y: point1.y,\n      angle: $math.getAngle(point1, point2)\n    };\n  };\n\n  return QuadraticCurve;\n}(Line);\n\nexport { QuadraticCurve };","map":null,"metadata":{},"sourceType":"module"}