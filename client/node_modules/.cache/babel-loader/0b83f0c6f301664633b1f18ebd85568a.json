{"ast":null,"code":"/**\r\n * Functionality for drawing circles.\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Sprite } from \"../Sprite\";\nimport { percent } from \"../utils/Percent\";\nimport { registry } from \"../Registry\";\nimport * as $utils from \"../utils/Utils\";\nimport * as $math from \"../utils/Math\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Used to create a circle\r\n * @see {@link ICircleEvents} for a list of available events\r\n * @see {@link ICircleAdapters} for a list of available Adapters\r\n */\n\nvar Circle =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Circle, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function Circle() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"Circle\";\n    _this.element = _this.paper.add(\"circle\");\n\n    _this.setPercentProperty(\"radius\", percent(100));\n\n    _this.setPropertyValue(\"horizontalCenter\", \"middle\");\n\n    _this.setPropertyValue(\"verticalCenter\", \"middle\");\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Draws the circle.\r\n   */\n\n\n  Circle.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n\n    this.element.attr({\n      \"r\": this.pixelRadius\n    });\n  };\n\n  Object.defineProperty(Circle.prototype, \"radius\", {\n    /**\r\n     * @return Radius\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"radius\");\n    },\n\n    /**\r\n     * Radius of the circle.\r\n     *\r\n     * Can be either absolute (pixels) or relative ([Percent]).\r\n     *\r\n     * @param value  Radius\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"radius\", value, true, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Circle.prototype, \"pixelRadius\", {\n    /**\r\n     * Radius of the circle in pixels.\r\n     *\r\n     * This is a read-only property. To set radius in pixels, use `radius`\r\n     * property.\r\n     *\r\n     * @readonly\r\n     * @return Radius (px)\r\n     */\n    get: function () {\n      return $utils.relativeToValue(this.radius, $math.min(this.innerWidth / 2, this.innerHeight / 2));\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Updates bounding box.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  Circle.prototype.measureElement = function () {\n    var pixelRadius = this.pixelRadius;\n    this._bbox = {\n      x: -pixelRadius,\n      y: -pixelRadius,\n      width: pixelRadius * 2,\n      height: pixelRadius * 2\n    };\n  };\n\n  return Circle;\n}(Sprite);\n\nexport { Circle };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"Circle\"] = Circle;","map":null,"metadata":{},"sourceType":"module"}