{"ast":null,"code":"/**\r\n * Functionality related to inertia\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { BaseObject } from \"../Base\";\nimport { getInteraction } from \"./Interaction\";\nimport { AnimationDisposer } from \"../utils/Animation\";\nimport * as $type from \"../utils/Type\";\n/**\r\n * A point of inertia is to simulate gradually drecreasing motion even after\r\n * actual interaction by user, that caused it, has already ended.\r\n *\r\n * [[Inertia]] object will continue triggering the same [[Sprite]] handlers\r\n * as if the interaction was still happening, gradually reducing\r\n * shift/angle/scale values until full stop.\r\n *\r\n * Basically, from the target element's point of view, while inertia is\r\n * playing, it is still being interacted with by user, albeit with a\r\n * decreasing speed.\r\n */\n\nvar Inertia =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Inertia, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function Inertia(interaction, type, point, startPoint) {\n    var _this = // Init\n    _super.call(this) || this;\n    /**\r\n     * List of animations currently playing.\r\n     */\n\n\n    _this.animations = [];\n    _this.className = \"Inertia\";\n    _this.interaction = interaction;\n    _this.type = type;\n    _this.point = point;\n    _this.startPoint = startPoint; // Make animations disposable\n\n    _this._disposers.push(new AnimationDisposer(_this.animations));\n\n    return _this;\n  }\n\n  Object.defineProperty(Inertia.prototype, \"x\", {\n    /**\r\n     * Returns current X coordinate.\r\n     *\r\n     * @return X\r\n     */\n    get: function () {\n      return this.point.x;\n    },\n\n    /**\r\n     * Sets current X coordinate.\r\n     *\r\n     * Will trigger \"drag\" event for the target element.\r\n     *\r\n     * @param value X\r\n     */\n    set: function (value) {\n      if ($type.isNumber(value)) {\n        this.point.x = value;\n        this.handleMove();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Inertia.prototype, \"y\", {\n    /**\r\n     * Returns current Y coordinate.\r\n     *\r\n     * @return Y\r\n     */\n    get: function () {\n      return this.point.y;\n    },\n\n    /**\r\n     * Sets current Y coordinate.\r\n     *\r\n     * Will trigger \"drag\" event for the target element.\r\n     *\r\n     * @param value Y\r\n     */\n    set: function (value) {\n      if ($type.isNumber(value)) {\n        this.point.y = value;\n        this.handleMove();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Simulates dragging of element.\r\n   */\n\n  Inertia.prototype.handleMove = function () {\n    // Prepare {InteractionEvent} object\n    if (this.interaction.events.isEnabled(\"drag\")) {\n      var imev = {\n        type: \"drag\",\n        target: this.interaction,\n        shift: {\n          x: this.x - this.startPoint.x,\n          y: this.y - this.startPoint.y\n        },\n        startPoint: this.startPoint,\n        point: {\n          x: this.x,\n          y: this.y\n        },\n        touch: false\n      }; // Call handler\n\n      this.interaction.events.dispatchImmediately(\"drag\", imev);\n    }\n  };\n  /**\r\n   * Finishes up the inertia animation. (removes reference to this animation\r\n   * object)\r\n   */\n\n\n  Inertia.prototype.done = function () {\n    // Remove inertia animation from the object\n    this.interaction.inertias.removeKey(this.type); // Move ended\n\n    if (this.type === \"move\") {\n      getInteraction().processDragStop(this.interaction);\n    } // Destroy\n\n\n    this.dispose();\n  };\n\n  return Inertia;\n}(BaseObject);\n\nexport { Inertia };","map":null,"metadata":{},"sourceType":"module"}