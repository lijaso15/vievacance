{"ast":null,"code":"/**\r\n * Slice module.\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Container } from \"../Container\";\nimport { Sprite } from \"../Sprite\";\nimport { registry } from \"../Registry\";\nimport * as $math from \"../utils/Math\";\nimport * as $path from \"../rendering/Path\";\nimport * as $type from \"../utils/Type\";\nimport * as $utils from \"../utils/Utils\";\nimport { RadialGradient } from \"../rendering/fills/RadialGradient\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Draws a wedged semi-circle - slice. Usually used for Pie/Donut charts.\r\n *\r\n * @see {@link ISliceEvents} for a list of available events\r\n * @see {@link ISliceAdapters} for a list of available Adapters\r\n */\n\nvar Slice =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Slice, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function Slice() {\n    var _this = // Init\n    _super.call(this) || this;\n\n    _this.className = \"Slice\"; // Set defaults\n\n    _this.setPropertyValue(\"cornerRadius\", 0);\n\n    _this.setPropertyValue(\"startAngle\", 0);\n\n    _this.setPercentProperty(\"innerRadius\", 0);\n\n    _this.setPercentProperty(\"radius\", 0);\n\n    _this.setPropertyValue(\"arc\", 0);\n\n    _this.setPropertyValue(\"shiftRadius\", 0);\n\n    _this.strokeOpacity = 1;\n\n    _this.setPropertyValue(\"layout\", \"none\"); // Create a slice wedge element\n\n\n    _this.slice = _this.createChild(Sprite);\n    _this.slice.isMeasured = false;\n\n    _this._disposers.push(_this.slice); //this.element.attr({ \"stroke-linejoin\": \"round\" });\n    //this.element.attr({ \"stroke-linecap\": \"round\" });\n    // Apply theme\n\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Draws the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Slice.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n\n    var radiusY = this.radiusY;\n\n    if (this.radius > 0 && radiusY == 0) {\n      radiusY = 0.01;\n    }\n\n    this.slice.path = $path.arc(this.startAngle, this.arc, this.radius, this.pixelInnerRadius, radiusY, this.cornerRadius, this.innerCornerRadius);\n    this.slice.invalidate();\n    this.shiftRadius = this.shiftRadius;\n\n    if (this.realFill instanceof RadialGradient) {\n      this.updateGradient(this.realFill);\n    }\n\n    if (this.realStroke instanceof RadialGradient) {\n      this.updateGradient(this.realStroke);\n    }\n  };\n\n  Slice.prototype.updateGradient = function (gradient) {\n    gradient.element.attr({\n      \"gradientUnits\": \"userSpaceOnUse\"\n    });\n    gradient.element.attr({\n      \"r\": this.radius\n    });\n    gradient.cx = 0;\n    gradient.cy = 0;\n    gradient.element.attr({\n      radius: this.radius\n    });\n  };\n\n  Object.defineProperty(Slice.prototype, \"bbox\", {\n    /**\r\n     * Returns bounding box (square) for this element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    get: function get() {\n      if (this.definedBBox) {\n        return this.definedBBox;\n      }\n\n      if (this.isMeasured) {\n        var innerRect = $math.getArcRect(this.startAngle, this.startAngle + this.arc, this.pixelInnerRadius);\n        var outerRect = $math.getArcRect(this.startAngle, this.startAngle + this.arc, this.radius);\n        return $math.getCommonRectangle([innerRect, outerRect]);\n      } else {\n        return {\n          x: 0,\n          y: 0,\n          width: 0,\n          height: 0\n        };\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Slice.prototype, \"startAngle\", {\n    /**\r\n     * @return Angle (0-360)\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"startAngle\");\n    },\n\n    /**\r\n     * The angle at which left edge of the slice is drawn. (0-360)\r\n     *\r\n     * 0 is to the right of the center.\r\n     *\r\n     * @param value  Angle (0-360)\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"startAngle\", $math.normalizeAngle(value), true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Slice.prototype, \"arc\", {\n    /**\r\n     * @return [description]\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"arc\");\n    },\n\n    /**\r\n     * [arc description]\r\n     *\r\n     * @todo Description\r\n     * @param value [description]\r\n     */\n    set: function set(value) {\n      if (!$type.isNumber(value)) {\n        value = 0;\n      }\n\n      this.setPropertyValue(\"arc\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Slice.prototype, \"radius\", {\n    /**\r\n     * @return Radius (px)\r\n     */\n    get: function get() {\n      var radius = this.getPropertyValue(\"radius\");\n\n      if (!$type.isNumber(radius)) {\n        radius = 0;\n      }\n\n      return radius;\n    },\n\n    /**\r\n     * Radius of the slice in pixels.\r\n     *\r\n     * @param value  Radius (px)\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"radius\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Slice.prototype, \"radiusY\", {\n    /**\r\n     * @return Vertical radius (0-1)\r\n     */\n    get: function get() {\n      var value = this.getPropertyValue(\"radiusY\");\n\n      if (!$type.isNumber(value)) {\n        value = this.radius;\n      }\n\n      return value;\n    },\n\n    /**\r\n     * Vertical radius for creating skewed slices.\r\n     *\r\n     * This is relevant to `radius`, e.g. 0.5 will set vertical radius to half\r\n     * the `radius`.\r\n     *\r\n     * @param value Vertical radius (0-1)\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"radiusY\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Slice.prototype, \"innerRadius\", {\n    /**\r\n     * @return Radius (px or %)\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"innerRadius\");\n    },\n\n    /**\r\n     * Inner radius of the slice for creating cut out (donut) slices.\r\n     *\r\n     * @default 0\r\n     * @param value  Radius (px or %)\r\n     */\n    set: function set(value) {\n      this.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Slice.prototype, \"pixelInnerRadius\", {\n    /**\r\n     * @return Radius px\r\n     */\n    get: function get() {\n      return $utils.relativeToValue(this.innerRadius, this.radius);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Slice.prototype, \"cornerRadius\", {\n    /**\r\n     * @return Radius (px)\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"cornerRadius\");\n    },\n\n    /**\r\n     * Radius of slice's outer corners in pixels.\r\n     *\r\n     * @default 0\r\n     * @param value  Radius (px)\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"cornerRadius\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Slice.prototype, \"innerCornerRadius\", {\n    /**\r\n     * @return Radius (px)\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"innerCornerRadius\");\n    },\n\n    /**\r\n     * Radius of slice's inner corners in pixels.\r\n     *\r\n     * @default 0\r\n     * @param value  Radius (px)\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"innerCornerRadius\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Slice.prototype, \"shiftRadius\", {\n    /**\r\n     * @return Radius shift\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"shiftRadius\");\n    },\n\n    /**\r\n     * Indicates far relatively to center a slice should be moved.\r\n     *\r\n     * The value is relative to the radius of the slice. Meaning 0 no shift,\r\n     * 1 - slice shifted outside by whole of its radius.\r\n     *\r\n     * @param  value  Radius shift\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"shiftRadius\", value);\n      this.dx = value * this.radius * this.ix;\n      this.dy = value * this.radiusY * this.iy;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Slice.prototype, \"ix\", {\n    /**\r\n     * [ix description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @return [description]\r\n     */\n    get: function get() {\n      return $math.cos(this.middleAngle);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Slice.prototype, \"iy\", {\n    /**\r\n     * [iy description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @return [description]\r\n     */\n    get: function get() {\n      if (this.radius > 0) {\n        return $math.sin(this.middleAngle);\n      } else {\n        return $math.sin(this.middleAngle);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Slice.prototype, \"middleAngle\", {\n    /**\r\n     * An angle of the slice's middle.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return Angle\r\n     */\n    get: function get() {\n      return this.startAngle + this.arc / 2;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * X coordinate for the slice tooltip.\r\n   *\r\n   * @return X\r\n   */\n\n  Slice.prototype.getTooltipX = function () {\n    var value = this.getPropertyValue(\"tooltipX\");\n\n    if (!$type.isNumber(value)) {\n      var innerRadius = $utils.relativeToValue(this.innerRadius, this.radius);\n      value = this.ix * (innerRadius + (this.radius - innerRadius) / 2);\n    }\n\n    return value;\n  };\n  /**\r\n   * Y coordinate for the slice tooltip.\r\n   *\r\n   * @return Y\r\n   */\n\n\n  Slice.prototype.getTooltipY = function () {\n    var value = this.getPropertyValue(\"tooltipY\");\n\n    if (!$type.isNumber(value)) {\n      var innerRadius = $utils.relativeToValue(this.innerRadius, this.radius);\n      value = this.iy * (innerRadius + (this.radius - innerRadius) / 2);\n    }\n\n    return value;\n  };\n\n  return Slice;\n}(Container);\n\nexport { Slice };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"Slice\"] = Slice;","map":null,"metadata":{},"sourceType":"module"}