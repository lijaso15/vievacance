{"ast":null,"code":"/**\r\n * Line drawing functionality.\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Sprite } from \"../Sprite\";\nimport { color } from \"../utils/Color\";\nimport { LinearGradient } from \"../rendering/fills/LinearGradient\";\nimport { registry } from \"../Registry\";\nimport * as $type from \"../utils/Type\";\nimport * as $math from \"../utils/Math\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Draws a line.\r\n *\r\n * @see {@link ILineEvents} for a list of available events\r\n * @see {@link ILineAdapters} for a list of available Adapters\r\n */\n\nvar Line =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Line, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function Line() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"Line\";\n    _this.element = _this.paper.add(\"line\");\n    _this.fill = color(); //\"none\";\n\n    _this.x1 = 0;\n    _this.y1 = 0;\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Draws the line.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Line.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n\n    if (this.x1 == this.x2 || this.y1 == this.y2) {\n      this.pixelPerfect = true;\n    } else {\n      this.pixelPerfect = false;\n    }\n\n    this.x1 = this.x1;\n    this.x2 = this.x2;\n    this.y1 = this.y1;\n    this.y2 = this.y2;\n  };\n\n  Object.defineProperty(Line.prototype, \"x1\", {\n    /**\r\n     * @return X\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"x1\");\n    },\n\n    /**\r\n     * X coordinate of first end.\r\n     *\r\n     * @param value X\r\n     */\n    set: function (value) {\n      if (!$type.isNumber(value)) {\n        value = 0;\n      }\n\n      var delta = 0;\n\n      if (this.pixelPerfect && this.stroke instanceof LinearGradient) {\n        delta = 0.00001;\n      }\n\n      this.setPropertyValue(\"x1\", value, true);\n      this.element.attr({\n        \"x1\": value + delta\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Line.prototype, \"x2\", {\n    /**\r\n     * @return X\r\n     */\n    get: function () {\n      var value = this.getPropertyValue(\"x2\");\n\n      if (!$type.isNumber(value)) {\n        value = this.pixelWidth;\n      }\n\n      return value;\n    },\n\n    /**\r\n     * X coordinate of second end.\r\n     *\r\n     * @param value X\r\n     */\n    set: function (value) {\n      if (!$type.isNumber(value)) {\n        value = 0;\n      }\n\n      this.setPropertyValue(\"x2\", value, true);\n      this.element.attr({\n        \"x2\": value\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Line.prototype, \"y1\", {\n    /**\r\n     * @return Y\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"y1\");\n    },\n\n    /**\r\n     * Y coordinate of first end.\r\n     *\r\n     * @param value Y\r\n     */\n    set: function (value) {\n      if (!$type.isNumber(value)) {\n        value = 0;\n      }\n\n      var delta = 0;\n\n      if (this.pixelPerfect && this.stroke instanceof LinearGradient) {\n        delta = 0.00001;\n      }\n\n      this.setPropertyValue(\"y1\", value, true);\n      this.element.attr({\n        \"y1\": value + delta\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Line.prototype, \"y2\", {\n    /**\r\n     * @return Y\r\n     */\n    get: function () {\n      var value = this.getPropertyValue(\"y2\");\n\n      if (!$type.isNumber(value)) {\n        value = this.pixelHeight;\n      }\n\n      return value;\n    },\n\n    /**\r\n     * Y coordinate of second end.\r\n     *\r\n     * @param value Y\r\n     */\n    set: function (value) {\n      if (!$type.isNumber(value)) {\n        value = 0;\n      }\n\n      this.setPropertyValue(\"y2\", value, true);\n      this.element.attr({\n        \"y2\": value\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Converts relative position along the line (0-1) into pixel coordinates.\r\n   *\r\n   * @param position  Position (0-1)\r\n   * @return Coordinates\r\n   */\n\n  Line.prototype.positionToPoint = function (position) {\n    var point1 = {\n      x: this.x1,\n      y: this.y1\n    };\n    var point2 = {\n      x: this.x2,\n      y: this.y2\n    };\n    var point = $math.getMidPoint(point1, point2, position);\n    var angle = $math.getAngle(point1, point2);\n    return {\n      x: point.x,\n      y: point.y,\n      angle: angle\n    };\n  };\n\n  return Line;\n}(Sprite);\n\nexport { Line };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"Line\"] = Line;","map":null,"metadata":{},"sourceType":"module"}