{"ast":null,"code":"/**\r\n * Axis break module\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Container } from \"../../core/Container\";\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\nimport { WavedLine } from \"../../core/elements/WavedLine\";\nimport { List } from \"../../core/utils/List\";\nimport { registry } from \"../../core/Registry\";\nimport { color } from \"../../core/utils/Color\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Base class to define \"breaks\" on axes.\r\n *\r\n * @see {@link IAxisBreakEvents} for a list of available events\r\n * @see {@link IAxisBreakAdapters} for a list of available Adapters\r\n * @important\r\n */\n\nvar AxisBreak =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(AxisBreak, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function AxisBreak() {\n    var _this = // Init\n    _super.call(this) || this;\n    /**\r\n     * Reference to parent Axis.\r\n     */\n\n\n    _this._axis = new MutableValueDisposer();\n    /**\r\n     * A list of axis data items which fall within this break.\r\n     */\n\n    _this.dataItems = new List();\n    _this.className = \"AxisBreak\"; // Set defaults\n\n    _this.breakSize = 0.01;\n    _this.marginLeft = -5;\n    _this.marginRight = -5;\n    _this.marginTop = -5;\n    _this.marginBottom = -5;\n    var interfaceColors = new InterfaceColorSet(); // Create elements\n    // (these won't be used actually, just for setting properties)\n\n    var fillShape = new WavedLine();\n    fillShape.fill = interfaceColors.getFor(\"background\");\n    fillShape.stroke = color();\n    fillShape.fillOpacity = 0.9;\n    fillShape.zIndex = 0;\n    _this._fillShape = fillShape;\n    var startLine = new WavedLine();\n    startLine.fill = color();\n    startLine.stroke = interfaceColors.getFor(\"grid\");\n    startLine.strokeOpacity = 0.3;\n    startLine.zIndex = 1;\n    _this._startLine = startLine;\n    var endLine = new WavedLine();\n    endLine.fill = color();\n    endLine.stroke = color(\"#000000\"); // interfaceColors.getFor(\"grid\");\n\n    endLine.strokeOpacity = 0.3;\n    endLine.zIndex = 2;\n    _this._endLine = endLine;\n\n    _this._disposers.push(_this._axis); // Apply theme\n\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  AxisBreak.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    if (this._fillShape) {\n      this._fillShape.dispose();\n    }\n\n    if (this._startLine) {\n      this._startLine.dispose();\n    }\n\n    if (this._endLine) {\n      this._endLine.dispose();\n    }\n  };\n\n  Object.defineProperty(AxisBreak.prototype, \"startLine\", {\n    /**\r\n     * @return Element\r\n     */\n    get: function get() {\n      return this._startLine;\n    },\n\n    /**\r\n     * An element used for the starting line of the break.\r\n     *\r\n     * @param sprite  Element\r\n     */\n    set: function set(sprite) {\n      if (this._startLine) {\n        this._startLine.dispose();\n      }\n\n      this._startLine = sprite;\n      this.addBreakSprite(sprite);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisBreak.prototype, \"endLine\", {\n    /**\r\n     * @return Element\r\n     */\n    get: function get() {\n      return this._endLine;\n    },\n\n    /**\r\n     * An element used for the end line of the break.\r\n     *\r\n     * @param sprite Element\r\n     */\n    set: function set(sprite) {\n      if (this._endLine) {\n        this._endLine.dispose();\n      }\n\n      this._endLine = sprite;\n      this.addBreakSprite(sprite);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisBreak.prototype, \"fillShape\", {\n    /**\r\n     * @return Element\r\n     */\n    get: function get() {\n      return this._fillShape;\n    },\n\n    /**\r\n     * An element used for fill of the break.\r\n     *\r\n     * @param sprite Element\r\n     */\n    set: function set(sprite) {\n      if (this._fillShape) {\n        this._fillShape.dispose();\n      }\n\n      this._fillShape = sprite;\n      this.addBreakSprite(sprite);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Adds a break element (e.g. lines, fill) to the break, which is\r\n   * [[Container]].\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param sprite Element to add\r\n   */\n\n  AxisBreak.prototype.addBreakSprite = function (sprite) {\n    sprite.parent = this;\n    sprite.isMeasured = false;\n\n    this._disposers.push(sprite);\n  };\n\n  Object.defineProperty(AxisBreak.prototype, \"axis\", {\n    /**\r\n     * @return Axis\r\n     */\n    get: function get() {\n      return this._axis.get();\n    },\n\n    /**\r\n     * An Axis this Break is associated with.\r\n     *\r\n     * @param axis  Axis\r\n     */\n    set: function set(axis) {\n      if (this._axis.get() !== axis) {\n        this._axis.set(axis, axis.renderer.gridContainer.events.on(\"transformed\", this.invalidate, this, false));\n\n        axis.renderer.createBreakSprites(this); // this can't go to copyFrom, as axis is set later\n\n        var breakTemplate = axis.axisBreaks.template;\n        this.startLine.copyFrom(breakTemplate.startLine);\n        this.endLine.copyFrom(breakTemplate.endLine);\n        this.fillShape.copyFrom(breakTemplate.fillShape);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisBreak.prototype, \"breakSize\", {\n    /**\r\n     * @return Relative axis break\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"breakSize\");\n    },\n\n    /**\r\n     * A size of the break relative to the actual size of the scope break spans.\r\n     *\r\n     * For example, if `breakSize = 0.1` and unbroken scope of balues it spans\r\n     * would be 100 pixels, the break would be 10 pixels wide.\r\n     *\r\n     * 0 means the break will completely collapse and hide the values.\r\n     * 1 means break would be not collapse at all, which would make it\r\n     * effectively useless.\r\n     *\r\n     * @default 0.01\r\n     * @param value  Relative axis break\r\n     */\n    set: function set(value) {\n      if (this.setPropertyValue(\"breakSize\", value)) {\n        if (this.axis) {\n          this.axis.invalidate();\n          this.axis.invalidateSeries();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisBreak.prototype, \"startPoint\", {\n    /**\r\n     * Returns pixel coordinates of axis break's start.\r\n     *\r\n     * @return Start point\r\n     */\n    get: function get() {\n      var renderer = this.axis.renderer;\n\n      if (renderer) {\n        return renderer.positionToPoint(this.startPosition);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisBreak.prototype, \"endPoint\", {\n    /**\r\n     * Returns pixel coordinates of axis break's end.\r\n     *\r\n     * @return End point\r\n     */\n    get: function get() {\n      var renderer = this.axis.renderer;\n\n      if (renderer) {\n        return renderer.positionToPoint(this.endPosition);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisBreak.prototype, \"startPosition\", {\n    /**\r\n     * Returns a relative position at which axis break starts.\r\n     *\r\n     * This is a calculated position, meaning it shows relative position of the\r\n     * break after break is applied.\r\n     *\r\n     * @return Start position\r\n     */\n    get: function get() {\n      return;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisBreak.prototype, \"endPosition\", {\n    /**\r\n     * Returns a relative position at which axis break ends.\r\n     *\r\n     * This is a calculated position, meaning it shows relative position of the\r\n     * break after break is applied.\r\n     *\r\n     * @return End position\r\n     */\n    get: function get() {\n      return;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Draws the axis break.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  AxisBreak.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n\n    if (this.axis) {\n      var renderer = this.axis.renderer;\n      renderer.updateBreakElement(this);\n    }\n  };\n\n  Object.defineProperty(AxisBreak.prototype, \"startValue\", {\n    /**\r\n     * @return Starting value\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"startValue\");\n    },\n\n    /**\r\n     * A starting value for the break.\r\n     *\r\n     * @param value  Starting value\r\n     */\n    set: function set(value) {\n      if (this.setPropertyValue(\"startValue\", value)) {\n        if (this.axis) {\n          this.axis.invalidate();\n          this.axis.invalidateSeries();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisBreak.prototype, \"endValue\", {\n    /**\r\n     * @return End value\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"endValue\");\n    },\n\n    /**\r\n     * An end value for the break.\r\n     *\r\n     * @param value  End value\r\n     */\n    set: function set(value) {\n      if (this.setPropertyValue(\"endValue\", value)) {\n        if (this.axis) {\n          this.axis.invalidate();\n          this.axis.invalidateSeries();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return AxisBreak;\n}(Container);\n\nexport { AxisBreak };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"AxisBreak\"] = AxisBreak;","map":null,"metadata":{},"sourceType":"module"}