{"ast":null,"code":"/**\r\n * JSON parser.\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { DataParser } from \"./DataParser\";\nimport * as $object from \"../utils/Object\";\nimport * as $type from \"../utils/Type\";\n/**\r\n * A parser for JSON.\r\n *\r\n * @important\r\n */\n\nvar JSONParser =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(JSONParser, _super);\n\n  function JSONParser() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\r\n     * Content-type suitable for JSON format.\r\n     */\n\n\n    _this.contentType = \"application/json\";\n    /**\r\n     * Parser options.\r\n     *\r\n     * @see {@link IJSONOptions} for description of each option\r\n     */\n\n    _this.options = {};\n    return _this;\n  }\n  /**\r\n   * Tests if the data is valid JSON.\r\n   *\r\n   * @param data  Source data\r\n   * @return Is it JSON?\r\n   */\n\n\n  JSONParser.isJSON = function (data) {\n    try {\n      // Try parsing JSON\n      JSON.parse(data); // If we got to this point it means it's a valid JSON\n\n      return true;\n    } catch (e) {\n      return false;\n    }\n  };\n  /**\r\n   * Parses and returns data.\r\n   *\r\n   * @param data  Unparsed data\r\n   * @return Parsed data\r\n   */\n\n\n  JSONParser.prototype.parse = function (data) {\n    var _this = this; // Init return\n\n\n    var res; // Try parsing\n\n    try {\n      if ($type.hasValue(JSON)) {\n        res = JSON.parse(data);\n      }\n    } catch (e) {\n      return undefined;\n    } // Do we need to cast some fields to numbers or dates?\n\n\n    var empty = $type.hasValue(this.options.emptyAs);\n    var numbers = this.parsableNumbers;\n    var dates = this.parsableDates;\n\n    if (Array.isArray(res) && (numbers || dates || empty)) {\n      var _loop_1 = function _loop_1(i, len) {\n        var row = res[i];\n        $object.each(row, function (key, value) {\n          if (empty) {\n            row[key] = _this.maybeToEmpty(row[key]);\n          }\n\n          if (numbers) {\n            row[key] = _this.maybeToNumber(key, row[key]);\n          }\n\n          if (dates) {\n            row[key] = _this.maybeToDate(key, row[key]);\n          }\n        });\n      }; // Iterate through the data and check if it needs to be converted\n\n\n      for (var i = 0, len = res.length; i < len; i++) {\n        _loop_1(i, len);\n      }\n    } // Convert to array\n    //return Array.isArray(res) ? res : [res];\n\n\n    return res;\n  };\n\n  return JSONParser;\n}(DataParser);\n\nexport { JSONParser };","map":null,"metadata":{},"sourceType":"module"}