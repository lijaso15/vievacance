{"ast":null,"code":"/**\r\n * Language module contains everything related to language-specific operations:\r\n * * Translating prompts\r\n * * Translating functions\r\n * * Date format localizations\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { BaseObjectEvents } from \"../Base\";\nimport { Adapter } from \"./Adapter\";\nimport * as $array from \"./Array\";\nimport * as $type from \"./Type\";\nimport en from \"../../../lang/en\";\nimport { options } from \"../Options\";\n;\n;\n/**\r\n * Handles all language-related tasks, like loading and storing translations,\r\n * translating prompts, lists of prompts and even functions.\r\n *\r\n * Almost every object in amCharts4 universe will have a `language` property,\r\n * which can be accessed for prompt translation.\r\n *\r\n * @see {@link ILanguageAdapters} for a list of available Adapters\r\n * @todo Make prompt keys case-insensitive\r\n * @important\r\n */\n\nvar Language =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Language, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function Language() {\n    var _this = _super.call(this) || this;\n    /**\r\n     * Adapter.\r\n     */\n\n\n    _this.adapter = new Adapter(_this);\n    /**\r\n     * Current locale.\r\n     */\n\n    _this._locale = en;\n    /**\r\n     * Default locale. A locale to fall back to if none is specified, or\r\n     * if there's no translation for the prompt for the current language.\r\n     */\n\n    _this._defaultLocale = en;\n    _this.className = \"Language\"; // Set default language if necessary\n\n    if ($type.hasValue(options.defaultLocale)) {\n      _this.locale = options.defaultLocale;\n    }\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Returns locale that is currently used.\r\n   *\r\n   * @param locale  Force locale. Will use current language if not set.\r\n   * @return Locale\r\n   */\n\n\n  Language.prototype.getLocale = function (locale) {\n    if (locale == null) {\n      locale = this._locale;\n    }\n\n    return this.adapter.apply(\"locale\", {\n      locale: locale\n    }).locale;\n  };\n  /**\r\n   * Returns the translation of the string.\r\n   *\r\n   * If the translation is empty, it will return untranslated prompt.\r\n   *\r\n   * Third parameter and up are strings that can be used to replace \"%X\"\r\n   * placeholders in prompt.\r\n   *\r\n   * E.g.:\r\n   *\r\n   * ```TypeScript\r\n   * // Results in \"This is a first translation test\"\r\n   * chart.language.translate(\"This is a %1 translation %2\", null, \"first\", \"test\");\r\n   * ```\r\n   * ```JavaScriptScript\r\n   * // Results in \"This is a first translation test\"\r\n   * chart.language.translate(\"This is a %1 translation %2\", null, \"first\", \"test\");\r\n   * ```\r\n   *\r\n   * @param prompt   A string to translate\r\n   * @param locale   Force translation into specific locale, e.g. fr_FR\r\n   * @param ...rest  Parameters to replace in string\r\n   * @return Translation\r\n   */\n\n\n  Language.prototype.translate = function (prompt, locale) {\n    var rest = [];\n\n    for (var _i = 2; _i < arguments.length; _i++) {\n      rest[_i - 2] = arguments[_i];\n    } // Get langauge\n\n\n    locale = this.getLocale(locale); // Init translation\n\n    var translation = prompt; // Get translations for the locale\n\n    var translations = this.getTranslations(locale);\n    var value = translations[prompt]; // Try to look for the translation\n\n    if (value === null) {\n      value = \"\";\n    } else if ($type.hasValue(value)) {\n      // It might be an empty string\n      if (value) {\n        translation = value;\n      }\n    } else if (locale !== this._defaultLocale) {\n      // Try to look in default language\n      return this.translate.apply(this, tslib_1.__spread([prompt, this._defaultLocale], rest));\n    } // Replace %1, %2, etc params\n\n\n    if (rest.length) {\n      for (var len = rest.length, i = 0; i < len; ++i) {\n        translation = translation.split(\"%\" + (i + 1)).join(rest[i]);\n      }\n    } // Return the translation\n\n\n    return this.adapter.apply(\"translate\", {\n      translation: translation,\n      locale: locale\n    }).translation;\n  };\n  /**\r\n   * Translates prompt.\r\n   *\r\n   * If translation is empty, it will return empty string, which is a different\r\n   * behavior than that of regular `translate`.\r\n   *\r\n   * @param prompt   A string to translate\r\n   * @param locale   Force translation into specific locale, e.g. fr_FR\r\n   * @param ...rest  Parameters to replace in string\r\n   * @return Translation\r\n   */\n\n\n  Language.prototype.translateEmpty = function (prompt, locale) {\n    var rest = [];\n\n    for (var _i = 2; _i < arguments.length; _i++) {\n      rest[_i - 2] = arguments[_i];\n    }\n\n    var translation = this.translate.apply(this, tslib_1.__spread([prompt, locale], rest));\n    return translation == prompt ? \"\" : translation;\n  };\n  /**\r\n   * Translates a function.\r\n   *\r\n   * This method will return a function reference, but will not run it. It's\r\n   * up to the caller script to run the function.\r\n   *\r\n   * @param prompt  A function id to translate\r\n   * @param locale  Force translation into specific locale. e.g. fr_FR\r\n   * @return A language-specific version of the function\r\n   * @todo Apply adapter\r\n   */\n\n\n  Language.prototype.translateFunc = function (prompt, locale) {\n    // Get langauge\n    locale = this.getLocale(locale); // Get translations for the locale\n\n    var translations = this.getTranslations(locale);\n    var value = translations[prompt]; // Try to look for the translation\n\n    if (value != null) {\n      return value;\n    } // Try to look in default language\n\n\n    if (locale !== this._defaultLocale) {\n      return this.translateFunc(prompt, this._defaultLocale);\n    } // Fail - return empty function\n\n\n    return function () {\n      return \"\";\n    };\n  };\n  /**\r\n   * Translates a list of prompts in one go.\r\n   *\r\n   * @param list    An array of strings to translate\r\n   * @param locale  Force translation into specific locale. e.g. fr_FR\r\n   * @return An array of translated strings in the same order as source list\r\n   */\n\n\n  Language.prototype.translateAll = function (list, locale) {\n    var _this = this; // Translate all items in the list\n\n\n    if (!this.isDefault()) {\n      return $array.map(list, function (x) {\n        return _this.translate(x, locale);\n      });\n    } else {\n      return list;\n    }\n  };\n  /**\r\n   * Returns `true` if the currently selected locale is a default locale.\r\n   *\r\n   * @return `true` if locale is default; `false` if it is not.\r\n   */\n\n\n  Language.prototype.isDefault = function () {\n    return this._defaultLocale === this._locale;\n  };\n\n  Object.defineProperty(Language.prototype, \"locale\", {\n    /**\r\n     * @return Locale definition\r\n     */\n    get: function get() {\n      return this._locale;\n    },\n\n    /**\r\n     * Current locale.\r\n     *\r\n     * @param value  Locale definition (translations)\r\n     */\n    set: function set(value) {\n      if (this._locale != value) {\n        this._locale = value;\n\n        if (this.events.isEnabled(\"localechanged\")) {\n          var event_1 = {\n            type: \"localechanged\",\n            locale: value,\n            target: this\n          };\n          this.events.dispatchImmediately(\"localechanged\", event_1);\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns translations for a given locale.\r\n   *\r\n   * @ignore\r\n   * @deprecated\r\n   * @param locale  Locale\r\n   * @return Translations\r\n   */\n\n  Language.prototype.getTranslations = function (locale) {\n    return this.adapter.apply(\"translations\", {\n      translations: locale,\n      locale: locale\n    }).translations;\n  };\n\n  return Language;\n}(BaseObjectEvents);\n\nexport { Language };","map":null,"metadata":{},"sourceType":"module"}