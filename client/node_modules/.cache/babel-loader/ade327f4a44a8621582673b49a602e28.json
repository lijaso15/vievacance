{"ast":null,"code":"/**\r\n * Functionality for adding images in SVG tree.\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Sprite } from \"../Sprite\";\nimport { registry } from \"../Registry\";\nimport * as $dom from \"../utils/DOM\";\nimport * as $type from \"../utils/Type\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Used to add `<image>` elements to SVG.\r\n *\r\n * @see {@link IImageEvents} for a list of available events\r\n * @see {@link IImageAdapters} for a list of available Adapters\r\n */\n\nvar Image =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Image, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function Image() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"Image\";\n    _this.element = _this.paper.add(\"image\");\n\n    _this.applyTheme();\n\n    _this.width = 50;\n    _this.height = 50;\n    return _this;\n  }\n  /**\r\n   * Draws an `<image>` element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Image.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n\n    if (this.href) {\n      var width = this.innerWidth;\n      var height = this.innerHeight;\n\n      if ($type.isNumber(this.widthRatio)) {\n        width = height * this.widthRatio;\n        this.width = width;\n      }\n\n      if ($type.isNumber(this.heightRatio)) {\n        height = width * this.heightRatio;\n        this.height = height;\n      }\n\n      this.element.attr({\n        \"width\": width,\n        \"height\": height\n      });\n      this.element.attrNS($dom.XLINK, \"xlink:href\", this.href);\n    }\n  };\n\n  Object.defineProperty(Image.prototype, \"href\", {\n    /**\r\n     * @return Image URI\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"href\");\n    },\n\n    /**\r\n     * An image URI.\r\n     *\r\n     * @param value  Image URI\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"href\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Image.prototype, \"widthRatio\", {\n    /**\r\n     * @return Ratio\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"widthRatio\");\n    },\n\n    /**\r\n     * Sets image `width` relatively to its `height`.\r\n     *\r\n     * If image's `height = 100` and `widthRatio = 0.5` the actual width will be\r\n     * `50`.\r\n     *\r\n     * @param value  Ratio\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"widthRatio\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Image.prototype, \"heightRatio\", {\n    /**\r\n     * @return Ratio\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"heightRatio\");\n    },\n\n    /**\r\n     * Sets image `height` relatively to its `width`.\r\n     *\r\n     * If image's `width = 100` and `heightRatio = 0.5` the actual height will be\r\n     * `50`.\r\n     *\r\n     * @param value  Ratio\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"heightRatio\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Image.prototype, \"bbox\", {\n    /**\r\n     * Returns bounding box (square) for this element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    get: function get() {\n      return {\n        x: 0,\n        y: 0,\n        width: this.pixelWidth,\n        height: this.pixelHeight\n      };\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Image;\n}(Sprite);\n\nexport { Image };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"Image\"] = Image;","map":null,"metadata":{},"sourceType":"module"}