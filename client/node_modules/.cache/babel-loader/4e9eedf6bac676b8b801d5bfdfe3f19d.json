{"ast":null,"code":"/**\r\n * Sliced chart module.\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { PercentChart, PercentChartDataItem } from \"./PercentChart\";\nimport { registry } from \"../../core/Registry\";\nimport * as $type from \"../../core/utils/Type\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines a [[DataItem]] for [[SlicedChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\n\nvar SlicedChartDataItem =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(SlicedChartDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function SlicedChartDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"SlicedChartDataItem\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  return SlicedChartDataItem;\n}(PercentChartDataItem);\n\nexport { SlicedChartDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Creates a Sliced chart.\r\n *\r\n * @see {@link ISlicedChartEvents} for a list of available Events\r\n * @see {@link ISlicedChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\n\nvar SlicedChart =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(SlicedChart, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function SlicedChart() {\n    var _this = // Init\n    _super.call(this) || this;\n\n    _this.className = \"SlicedChart\";\n    _this.seriesContainer.layout = \"horizontal\";\n\n    _this.padding(15, 15, 15, 15); // Apply theme\n\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Sets defaults that instantiate some objects that rely on parent, so they\r\n   * cannot be set in constructor.\r\n   */\n\n\n  SlicedChart.prototype.applyInternalDefaults = function () {\n    _super.prototype.applyInternalDefaults.call(this); // Add a default screen reader title for accessibility\n    // This will be overridden in screen reader if there are any `titles` set\n\n\n    if (!$type.hasValue(this.readerTitle)) {\n      this.readerTitle = this.language.translate(\"Sliced chart\");\n    }\n  };\n  /**\r\n   * (Re)validates the chart, causing it to redraw.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  SlicedChart.prototype.validate = function () {\n    _super.prototype.validate.call(this);\n  };\n\n  return SlicedChart;\n}(PercentChart);\n\nexport { SlicedChart };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"SlicedChart\"] = SlicedChart;\nregistry.registeredClasses[\"SlicedChartDataItem\"] = SlicedChartDataItem;","map":null,"metadata":{},"sourceType":"module"}