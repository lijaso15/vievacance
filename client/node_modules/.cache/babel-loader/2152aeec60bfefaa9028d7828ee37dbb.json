{"ast":null,"code":"/**\r\n * Creates a 3D rectangle.\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Container } from \"../../Container\";\nimport { Sprite } from \"../../Sprite\";\nimport * as $math from \"../../utils/Math\";\nimport * as $path from \"../../rendering/Path\";\nimport { Color, color } from \"../../utils/Color\";\nimport { RadialGradient } from \"../../rendering/fills/RadialGradient\";\nimport { LinearGradient } from \"../../rendering/fills/LinearGradient\";\nimport { LightenFilter } from \"../../rendering/filters/LightenFilter\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Builds a 3D rectangle\r\n * @see {@link IRectangle3DEvents} for a list of available events\r\n * @see {@link IRectangle3DAdapters} for a list of available Adapters\r\n */\n\nvar Rectangle3D =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Rectangle3D, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function Rectangle3D() {\n    var _this = _super.call(this) || this;\n\n    _this.angle = 30;\n    _this.depth = 30;\n    _this.className = \"Rectangle3D\";\n    _this.layout = \"none\";\n\n    var sideBack = _this.createChild(Sprite);\n\n    sideBack.shouldClone = false;\n    sideBack.setElement(_this.paper.add(\"path\"));\n    sideBack.isMeasured = false;\n    _this.sideBack = sideBack;\n\n    _this._disposers.push(_this.sideBack);\n\n    var sideBottom = _this.createChild(Sprite);\n\n    sideBottom.shouldClone = false;\n    sideBottom.setElement(_this.paper.add(\"path\"));\n    sideBottom.isMeasured = false;\n    _this.sideBottom = sideBottom;\n\n    _this._disposers.push(_this.sideBottom);\n\n    var sideLeft = _this.createChild(Sprite);\n\n    sideLeft.shouldClone = false;\n    sideLeft.setElement(_this.paper.add(\"path\"));\n    sideLeft.isMeasured = false;\n    _this.sideLeft = sideLeft;\n\n    _this._disposers.push(_this.sideLeft);\n\n    var sideRight = _this.createChild(Sprite);\n\n    sideRight.shouldClone = false;\n    sideRight.setElement(_this.paper.add(\"path\"));\n    sideRight.isMeasured = false;\n    _this.sideRight = sideRight;\n\n    _this._disposers.push(_this.sideRight);\n\n    var sideTop = _this.createChild(Sprite);\n\n    sideTop.shouldClone = false;\n    sideTop.setElement(_this.paper.add(\"path\"));\n    sideTop.isMeasured = false;\n    _this.sideTop = sideTop;\n\n    _this._disposers.push(_this.sideTop);\n\n    var sideFront = _this.createChild(Sprite);\n\n    sideFront.shouldClone = false;\n    sideFront.setElement(_this.paper.add(\"path\"));\n    sideFront.isMeasured = false;\n    _this.sideFront = sideFront;\n\n    _this._disposers.push(_this.sideFront);\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Draws the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Rectangle3D.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n\n    var w = this.innerWidth;\n    var h = this.innerHeight;\n    var depth = this.depth;\n    var angle = this.angle;\n    var sin = $math.sin(angle);\n    var cos = $math.cos(angle);\n    var a = {\n      x: 0,\n      y: 0\n    };\n    var b = {\n      x: w,\n      y: 0\n    };\n    var c = {\n      x: w,\n      y: h\n    };\n    var d = {\n      x: 0,\n      y: h\n    };\n    var ah = {\n      x: depth * cos,\n      y: -depth * sin\n    };\n    var bh = {\n      x: depth * cos + w,\n      y: -depth * sin\n    };\n    var ch = {\n      x: depth * cos + w,\n      y: -depth * sin + h\n    };\n    var dh = {\n      x: depth * cos,\n      y: -depth * sin + h\n    };\n    this.sideFront.path = $path.moveTo(a) + $path.lineTo(b) + $path.lineTo(c) + $path.lineTo(d) + $path.closePath();\n    this.sideBack.path = $path.moveTo(ah) + $path.lineTo(bh) + $path.lineTo(ch) + $path.lineTo(dh) + $path.closePath();\n    this.sideLeft.path = $path.moveTo(a) + $path.lineTo(ah) + $path.lineTo(dh) + $path.lineTo(d) + $path.closePath();\n    this.sideRight.path = $path.moveTo(b) + $path.lineTo(bh) + $path.lineTo(ch) + $path.lineTo(c) + $path.closePath();\n    this.sideBottom.path = $path.moveTo(d) + $path.lineTo(dh) + $path.lineTo(ch) + $path.lineTo(c) + $path.closePath();\n    this.sideTop.path = $path.moveTo(a) + $path.lineTo(ah) + $path.lineTo(bh) + $path.lineTo(b) + $path.closePath();\n  };\n\n  Object.defineProperty(Rectangle3D.prototype, \"depth\", {\n    /**\r\n     * @return Depth (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"depth\");\n    },\n\n    /**\r\n     * Depth (Z dimension) of the 3D rectangle in pixels.\r\n     *\r\n     * @default 30\r\n     * @param value  Depth (px)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"depth\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Rectangle3D.prototype, \"angle\", {\n    /**\r\n     * @return Angle\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"angle\");\n    },\n\n    /**\r\n     * Angle of the point of view to the 3D element. (0-360)\r\n     *\r\n     * @default 30\r\n     * @param value  Angle\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"angle\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Sets actual `fill` property on the SVG element, including applicable color\r\n   * modifiers.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param value  Fill\r\n   */\n\n  Rectangle3D.prototype.setFill = function (value) {\n    _super.prototype.setFill.call(this, value);\n\n    var colorStr;\n\n    if (value instanceof Color) {\n      colorStr = value.hex;\n    } else if (value instanceof LinearGradient || value instanceof RadialGradient) {\n      colorStr = value.stops.getIndex(0).color.hex;\n    } else {\n      var filter = new LightenFilter();\n      filter.lightness = -0.2;\n      this.sideBack.filters.push(filter);\n      var filter2 = filter.clone();\n      filter2.lightness = -0.4;\n      this.sideLeft.filters.push(filter2);\n      var filter3 = filter.clone();\n      filter3.lightness = -0.2;\n      this.sideRight.filters.push(filter3);\n      var filter4 = filter.clone();\n      filter4.lightness = -0.1;\n      this.sideTop.filters.push(filter4);\n      var filter5 = filter.clone();\n      filter5.lightness = -0.5;\n      this.sideBottom.filters.push(filter5);\n    }\n\n    if (colorStr) {\n      this.sideBack.fill = color(colorStr).lighten(-0.2);\n      this.sideLeft.fill = color(colorStr).lighten(-0.4);\n      this.sideRight.fill = color(colorStr).lighten(-0.2);\n      this.sideTop.fill = color(colorStr).lighten(-0.1);\n      this.sideBottom.fill = color(colorStr).lighten(-0.5);\n    }\n  };\n\n  return Rectangle3D;\n}(Container);\n\nexport { Rectangle3D };","map":null,"metadata":{},"sourceType":"module"}