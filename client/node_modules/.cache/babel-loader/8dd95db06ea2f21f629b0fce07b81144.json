{"ast":null,"code":"/**\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { MapObject } from \"./MapObject\";\nimport { registry } from \"../../core/Registry\";\nimport * as $type from \"../../core/utils/Type\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Used to place an image on the map.\r\n *\r\n * @see {@link IMapImageEvents} for a list of available events\r\n * @see {@link IMapImageAdapters} for a list of available Adapters\r\n */\n\nvar MapImage =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MapImage, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function MapImage() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"MapImage\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  Object.defineProperty(MapImage.prototype, \"latitude\", {\n    /**\r\n     * @return Latitude\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"latitude\");\n    },\n\n    /**\r\n     * Latitude image is placed at.\r\n     *\r\n     * @param value  Latitude\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"latitude\", value, false, true);\n      this.updateExtremes();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapImage.prototype, \"longitude\", {\n    /**\r\n     * @return Longitude\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"longitude\");\n    },\n\n    /**\r\n     * Longitude image is placed on.\r\n     *\r\n     * @param value  Longitude\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"longitude\", value, false, true);\n      this.updateExtremes();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Repositions the image to it's current position.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  MapImage.prototype.validatePosition = function () {\n    if ($type.isNumber(this.latitude) && $type.isNumber(this.longitude)) {\n      //this.moveTo(this.series.chart.projection.convert({ latitude: this.latitude, longitude: this.longitude }));\n      var p = this.series.chart.projection.d3Projection([this.longitude, this.latitude]);\n      var visible = this.series.chart.projection.d3Path({\n        type: 'Point',\n        coordinates: [this.longitude, this.latitude]\n      });\n\n      if (!visible) {\n        this.__disabled = true;\n      } else {\n        this.__disabled = false;\n      }\n\n      this.moveTo({\n        x: p[0],\n        y: p[1]\n      });\n    }\n\n    _super.prototype.validatePosition.call(this);\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  MapImage.prototype.getFeature = function () {\n    return {\n      \"type\": \"Feature\",\n      geometry: {\n        type: \"Point\",\n        coordinates: [this.longitude, this.latitude]\n      }\n    };\n  };\n\n  return MapImage;\n}(MapObject);\n\nexport { MapImage };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"MapImage\"] = MapImage;","map":null,"metadata":{},"sourceType":"module"}