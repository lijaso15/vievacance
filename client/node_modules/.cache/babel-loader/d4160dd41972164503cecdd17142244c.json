{"ast":null,"code":"/**\r\n * Module for building Gauge charts.\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { RadarChart, RadarChartDataItem } from \"./RadarChart\";\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\nimport { ClockHand } from \"../elements/ClockHand\";\nimport { registry } from \"../../core/Registry\";\nimport * as $type from \"../../core/utils/Type\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines a [[DataItem]] for [[GaugeChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\n\nvar GaugeChartDataItem =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(GaugeChartDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function GaugeChartDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"GaugeChartDataItem\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  return GaugeChartDataItem;\n}(RadarChartDataItem);\n\nexport { GaugeChartDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Creates a Gauge chart.\r\n *\r\n * @see {@link IGaugeChartEvents} for a list of available Events\r\n * @see {@link IGaugeChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/gauge-chart/} for documentation\r\n * @important\r\n */\n\nvar GaugeChart =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(GaugeChart, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function GaugeChart() {\n    var _this = // Init\n    _super.call(this) || this;\n\n    _this.className = \"GaugeChart\";\n    _this.startAngle = 180;\n    _this.endAngle = 360;\n    _this.hands = new ListTemplate(new ClockHand());\n\n    _this.hands.events.on(\"inserted\", _this.processHand, _this, false);\n\n    _this._disposers.push(new ListDisposer(_this.hands));\n\n    _this._disposers.push(_this.hands.template); // Apply theme\n\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Sets defaults that instantiate some objects that rely on parent, so they\r\n   * cannot be set in constructor.\r\n   */\n\n\n  GaugeChart.prototype.applyInternalDefaults = function () {\n    _super.prototype.applyInternalDefaults.call(this); // Add a default screen reader title for accessibility\n    // This will be overridden in screen reader if there are any `titles` set\n\n\n    if (!$type.hasValue(this.readerTitle)) {\n      this.readerTitle = this.language.translate(\"Gauge chart\");\n    }\n  };\n  /**\r\n   * Decorates a [[ClockHand]] when it is added to the chart.\r\n   *\r\n   * @param event  Event\r\n   */\n\n\n  GaugeChart.prototype.processHand = function (event) {\n    var hand = event.newValue;\n\n    if (!hand.axis) {\n      hand.axis = this.xAxes.getIndex(0);\n    }\n  };\n\n  return GaugeChart;\n}(RadarChart);\n\nexport { GaugeChart };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"GaugeChart\"] = GaugeChart;","map":null,"metadata":{},"sourceType":"module"}