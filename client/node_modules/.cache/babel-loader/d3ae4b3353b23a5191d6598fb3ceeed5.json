{"ast":null,"code":"/**\r\n * This module contains ColorSet object definition\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { BaseObject } from \"../Base\";\nimport { Color, color } from \"./Color\";\nimport { registry } from \"../Registry\";\nimport * as $colors from \"./Colors\";\nimport * as $type from \"./Type\";\nimport * as $utils from \"./Utils\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Represents a set of colors. Can also generate colors according to set rules.\r\n *\r\n * @important\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/colors/} for color-related info\r\n */\n\nvar ColorSet =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(ColorSet, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function ColorSet() {\n    var _this = _super.call(this) || this;\n    /**\r\n     * Holds the list of the colors in this set. (preset or auto-generated)\r\n     */\n\n\n    _this._list = [];\n    /**\r\n     * Current step in a color generator's cycle.\r\n     */\n\n    _this._currentStep = 0;\n    /**\r\n     * Current pass in the color generator's cycle. Normally a generator would\r\n     * cycle through all available hue range, then repeat it, alternating other\r\n     * color properties, to generate distinctive colors.\r\n     */\n\n    _this._currentPass = 0;\n    /**\r\n     * A base color. If there are no colors pre-set in the color list, ColorSet\r\n     * will use this color as a base when generating new ones, applying\r\n     * `stepOptions` and `passOptions` to this base color.\r\n     */\n\n    _this.baseColor = new Color({\n      r: 103,\n      g: 183,\n      b: 220\n    });\n    /**\r\n     * Modifications to apply with each new generated color.\r\n     */\n\n    _this.stepOptions = {};\n    /**\r\n     * Modifications to apply on top of `stepOptions` for each \"pass\" of the\r\n     * color generation.\r\n     *\r\n     * A \"pass\" is when ColorSet generates `minColors` number of colors.\r\n     */\n\n    _this.passOptions = {\n      brighten: -0.2\n    };\n    /**\r\n     * An index increment to use when iterating through color list.\r\n     *\r\n     * Default is 1, which means returning each and every color.\r\n     *\r\n     * Setting it to a bigger number will make ColorSet `next()` iterator skip\r\n     * some colors.\r\n     *\r\n     * E.g. setting to 2, will return every second color in the list.\r\n     *\r\n     * This is useful, when the color list has colors that are too close each\r\n     * other for contrast.\r\n     *\r\n     * However, having bigger number will mean that `next()` iterator will go\r\n     * through the list quicker, and the generator will kick sooner.\r\n     */\n\n    _this.step = 1;\n    /**\r\n     * A number of colors to generate in one \"pass\".\r\n     *\r\n     * This setting can be automatically overridden, if ColorSet has a list of\r\n     * pre-set colors. In such case ColorSet will generate exactly the same\r\n     * number of colors with each pass as there were colors in original set.\r\n     */\n\n    _this.minColors = 20;\n    /**\r\n     * Do not let the \"lightness\" of generated color to fall below this\r\n     * threshold.\r\n     */\n\n    _this.minLightness = 0.2;\n    /**\r\n     * Do not let the \"lightness\" of generated color to get above this threshold.\r\n     */\n\n    _this.maxLightness = 0.9;\n    /**\r\n     * Randomly shuffle generated colors.\r\n     */\n\n    _this.shuffle = false;\n    /**\r\n     * When colors are generated, based on `stepOptions`, each generated color\r\n     * gets either lighter or darker.\r\n     *\r\n     * If this is set to `true`, color generator will switch to opposing spectrum\r\n     * when reaching `minLightness` or `maxLightness`.\r\n     *\r\n     * E.g. if we start off with a red color, then gradually generate lighter\r\n     * colors through rose shades, then switch back to dark red and gradually\r\n     * increase the lightness of it until it reaches the starting red.\r\n     *\r\n     * If set to `false` it will stop there and cap lightness at whatever level\r\n     * we hit `minLightness` or `maxLightness`, which may result in a number of\r\n     * the same colors.\r\n     */\n\n    _this.wrap = true;\n    /**\r\n     * Re-use same colors in the pre-set list, when ColorSet runs out of colors,\r\n     * rather than start generating new ones.\r\n     */\n\n    _this.reuse = false;\n    /**\r\n     * Saturation of colors. This will change saturation of all colors of color\r\n     * set.\r\n     *\r\n     * It is recommended to set this in theme, as changing it at run time won't\r\n     * make the items to redraw and change color.\r\n     */\n\n    _this.saturation = 1;\n    _this.className = \"ColorSet\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  Object.defineProperty(ColorSet.prototype, \"list\", {\n    /**\r\n     * Returns current list of colors.\r\n     *\r\n     * If there are none, a new list of colors is generated, based on various\r\n     * ColorSet settings.\r\n     *\r\n     * @return Color list\r\n     */\n    get: function () {\n      if (!this._list) {\n        this.generate(this.minColors);\n      }\n\n      return this._list;\n    },\n\n    /**\r\n     * Sets a list of pre-defined colors to use for the iterator.\r\n     *\r\n     * @param value Color list\r\n     */\n    set: function (value) {\n      this._list = value;\n      this.reset();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Gets reusable color.\r\n   *\r\n   * @param   index  Index of color\r\n   * @return         Color\r\n   */\n\n  ColorSet.prototype.getReusableColor = function (index) {\n    if (this._list.length == 0) {\n      this.generate(1);\n      return this.list[0];\n    } else {\n      var tmpstep = index - Math.floor(index / this._list.length) * this.list.length;\n      return this.list[tmpstep];\n    }\n  };\n  /**\r\n   * Returns next color in the list using internal iterator counter.\r\n   *\r\n   * If `step` is set to something other than 1, it may return other color than\r\n   * exact next one in the list.\r\n   *\r\n   * @return Color\r\n   */\n\n\n  ColorSet.prototype.next = function () {\n    var color;\n\n    if (this.list.length <= this._currentStep) {\n      if (this.reuse) {\n        color = this.getReusableColor(this._currentStep);\n      } else {\n        this.generate(this.minColors);\n        color = this.list[this._currentStep];\n      }\n    } else {\n      color = this.list[this._currentStep];\n    }\n\n    this._currentStep += this.step;\n    return color.saturate(this.saturation);\n  };\n  /**\r\n   * Returns a color at specific index in the list.\r\n   *\r\n   * @param i  Index\r\n   * @return Color\r\n   */\n\n\n  ColorSet.prototype.getIndex = function (i) {\n    var color;\n\n    if (this.list.length <= i) {\n      if (this.reuse) {\n        color = this.getReusableColor(i);\n      } else {\n        this.generate(this.minColors);\n        color = this.getIndex(i);\n      }\n    } else {\n      color = this.list[i];\n    }\n\n    return color.saturate(this.saturation);\n  };\n  /**\r\n   * Resets internal iterator.\r\n   *\r\n   * Calling `next()` after this will return the very first color in the color\r\n   * list, even if it was already returned before.\r\n   */\n\n\n  ColorSet.prototype.reset = function () {\n    this._currentStep = 0;\n  };\n\n  Object.defineProperty(ColorSet.prototype, \"currentStep\", {\n    /**\r\n     * @return Step\r\n     */\n    get: function () {\n      return this._currentStep;\n    },\n\n    /**\r\n     * Sets current color iteration. You can use this property to skip some\r\n     * colors from iteration. E.g. setting it to `10` will skip first ten\r\n     * colors.\r\n     *\r\n     * Please note that the number is zero-based.\r\n     *\r\n     * @param value  Step\r\n     */\n    set: function (value) {\n      this._currentStep = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Generates colors based on the various ColorSet settings.\r\n   *\r\n   * @param count Number of colors to generate\r\n   */\n\n  ColorSet.prototype.generate = function (count) {\n    // Init\n    var curColor = this.currentColor;\n    var hsl = $colors.rgbToHsl($type.getValue(curColor.rgb));\n    var hueStep = $type.hasValue(this.stepOptions.hue) ? this.stepOptions.hue : 1 / count;\n    var mods = {\n      brighten: 0,\n      lighten: 0,\n      hue: hsl.h,\n      lightness: hsl.l,\n      saturation: hsl.s\n    }; // Generate list of hues, and shuffle them\n\n    var hues = [];\n\n    if (this.reuse) {\n      for (var i = 0; i < count; i++) {\n        hues.push($colors.rgbToHsl($type.getValue(this._list[i].rgb)).h);\n      }\n    } else {\n      for (var i = 0; i < count; i++) {\n        var h = hsl.h + hueStep * i;\n\n        if (this.wrap && h > 1) {\n          h -= 1;\n        }\n\n        hues.push(h);\n      }\n    } // Shuffle colors randomly\n\n\n    if (this.shuffle) {\n      hues.sort(function (a, b) {\n        return Math.random() - 0.5;\n      });\n    } // Generate colors by rotating hue\n\n\n    for (var i = 0; i < count; i++) {\n      // Update hue\n      if (this.reuse) {\n        hsl = $colors.rgbToHsl($type.getValue(this._list[i].rgb));\n      } else {\n        hsl.h = hues.shift();\n      } // Apply HSL mods\n\n\n      this.applyStepOptions(hsl, mods, i + 1, this._currentPass); // Convert back to Color\n\n      var c = color($colors.hslToRgb(hsl)); // Apply regular color mods\n\n      var brighten = (this.stepOptions.brighten || 0) * (i + 1) + (this.passOptions.brighten || 0) * this._currentPass;\n\n      if (brighten != 0) {\n        if (this.wrap) {\n          brighten = $utils.fitNumberRelative(brighten, this.minLightness, this.maxLightness);\n        } else {\n          brighten = $utils.fitNumber(brighten, this.minLightness, this.maxLightness);\n        }\n\n        c = c.brighten(brighten);\n      }\n\n      var lighten = (this.stepOptions.lighten || 0) * (i + 1) + (this.passOptions.lighten || 0) * this._currentPass;\n\n      if (lighten != 0) {\n        if (this.wrap) {\n          lighten = $utils.fitNumberRelative(lighten, this.minLightness, this.maxLightness);\n        } else {\n          lighten = $utils.fitNumber(lighten, this.minLightness, this.maxLightness);\n        }\n\n        c = c.lighten(lighten);\n      }\n\n      this._list.push(c);\n    }\n\n    this._currentPass++;\n  };\n\n  Object.defineProperty(ColorSet.prototype, \"currentColor\", {\n    /**\r\n     * Returns current last color. It's either the last color in the list of\r\n     * colors, or `baseColor` if list is empty.\r\n     *\r\n     * @return Color\r\n     */\n    get: function () {\n      if (this._list.length == 0) {\n        return this.baseColor.saturate(this.saturation);\n      } else {\n        return this._list[this._list.length - 1].saturate(this.saturation);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Generates modifiers for color, based on what step and pass.\r\n   *\r\n   * @param hsl   Curren HSL value of the color to modify\r\n   * @param base  The modifiers that were before modification to use as a base\r\n   * @param step  Current step\r\n   * @param pass  Current pass\r\n   */\n\n  ColorSet.prototype.applyStepOptions = function (hsl, base, step, pass) {\n    // Process lightness\n    hsl.l = base.lightness + (this.stepOptions.lightness || 0) * step + (this.passOptions.lightness || 0) * pass;\n\n    if (this.wrap) {\n      if (hsl.l > 1) {\n        hsl.l = hsl.l - Math.floor(hsl.l);\n      } else if (hsl.l < 0) {\n        hsl.l = -(hsl.l - Math.floor(hsl.l));\n      }\n\n      hsl.l = $utils.fitNumberRelative(hsl.l, this.minLightness, this.maxLightness);\n    } else {\n      if (hsl.l > 1) {\n        hsl.l = 1;\n      } else if (hsl.l < 0) {\n        hsl.l = 0;\n      }\n\n      hsl.l = $utils.fitNumber(hsl.l, this.minLightness, this.maxLightness);\n    }\n  };\n  /**\r\n   * Processes JSON-based config before it is applied to the object.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param config  Config\r\n   */\n\n\n  ColorSet.prototype.processConfig = function (config) {\n    if (config) {\n      // Set up axis ranges\n      if ($type.hasValue(config.list) && $type.isArray(config.list)) {\n        for (var i = 0, len = config.list.length; i < len; i++) {\n          if (!(config.list[i] instanceof Color)) {\n            config.list[i] = color(config.list[i]);\n          }\n        }\n      }\n    }\n\n    _super.prototype.processConfig.call(this, config);\n  };\n\n  return ColorSet;\n}(BaseObject);\n\nexport { ColorSet };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"ColorSet\"] = ColorSet;","map":null,"metadata":{},"sourceType":"module"}