{"ast":null,"code":"/**\r\n * FlowDiagramLink module\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Sprite } from \"../../core/Sprite\";\nimport { Container } from \"../../core/Container\";\nimport { LinearGradient } from \"../../core/rendering/fills/LinearGradient\";\nimport { registry } from \"../../core/Registry\";\nimport { Bullet } from \"../elements/Bullet\";\nimport { Color } from \"../../core/utils/Color\";\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\nimport { Polyline } from \"../../core/elements/Polyline\";\nimport { Line } from \"../../core/elements/Line\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $type from \"../../core/utils/Type\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * This class creates a link (waved color-filled line) between two nodes in a\r\n * Flow Diagram.\r\n *\r\n * @see {@link IFlowDiagramLinkEvents} for a list of available events\r\n * @see {@link IFlowDiagramLinkAdapters} for a list of available Adapters\r\n * @important\r\n */\n\nvar FlowDiagramLink =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(FlowDiagramLink, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function FlowDiagramLink() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"FlowDiagramLink\";\n    var interfaceColors = new InterfaceColorSet();\n    _this.maskBullets = false;\n    _this.colorMode = \"fromNode\";\n    _this.layout = \"none\";\n    _this.isMeasured = false;\n    _this.startAngle = 0;\n    _this.endAngle = 0;\n    _this.strokeOpacity = 0; // this is very important, otherwise the container will be shifted\n\n    _this.verticalCenter = \"none\";\n    _this.horizontalCenter = \"none\";\n    _this.tooltipText = \"{fromName}â†’{toName}:{value.value}\";\n    _this.tooltipLocation = 0.5;\n    _this.link = _this.createChild(Sprite);\n    _this.link.shouldClone = false;\n\n    _this.link.setElement(_this.paper.add(\"path\"));\n\n    _this.link.isMeasured = false;\n    _this.fillOpacity = 0.2;\n    _this.fill = interfaceColors.getFor(\"alternativeBackground\");\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Positions bullets\r\n   * @ignore\r\n   */\n\n\n  FlowDiagramLink.prototype.positionBullets = function () {\n    var _this = this;\n\n    $iter.each(this.bullets.iterator(), function (bullet) {\n      bullet.parent = _this.bulletsContainer;\n      bullet.maxWidth = _this.maxWidth;\n      bullet.maxHeight = _this.maxHeight;\n\n      _this.positionBullet(bullet);\n    });\n  };\n\n  Object.defineProperty(FlowDiagramLink.prototype, \"bulletsContainer\", {\n    /**\r\n     * Bullets container\r\n     */\n    get: function () {\n      if (!this._bulletsContainer) {\n        var bulletsContainer = this.createChild(Container);\n        bulletsContainer.shouldClone = false;\n        bulletsContainer.layout = \"none\";\n        this._bulletsContainer = bulletsContainer;\n      }\n\n      return this._bulletsContainer;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FlowDiagramLink.prototype, \"bulletsMask\", {\n    /**\r\n     * Bullets mask sprite\r\n     */\n    get: function () {\n      if (!this._bulletsMask) {\n        var bulletsMask = this.createChild(Sprite);\n        bulletsMask.shouldClone = false;\n        bulletsMask.setElement(this.paper.add(\"path\"));\n        bulletsMask.isMeasured = false;\n        this._bulletsMask = bulletsMask;\n      }\n\n      return this._bulletsMask;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Positions bullets at relative bullet.locationX position on the link.\r\n   * @ignore\r\n   */\n\n  FlowDiagramLink.prototype.positionBullet = function (bullet) {\n    var location = bullet.locationX;\n\n    if (!$type.isNumber(location)) {\n      location = bullet.locationY;\n    }\n\n    if (!$type.isNumber(location)) {\n      location = 0.5;\n    }\n\n    var point = this.middleLine.positionToPoint(location);\n    bullet.moveTo(point);\n    var rotationField = bullet.propertyFields.rotation;\n    var angle;\n\n    if (bullet.dataItem) {\n      var dataContext = bullet.dataItem.dataContext;\n      angle = dataContext[rotationField];\n    }\n\n    if (!$type.isNumber(angle)) {\n      angle = point.angle;\n    }\n\n    bullet.rotation = angle;\n  };\n\n  Object.defineProperty(FlowDiagramLink.prototype, \"startAngle\", {\n    /**\r\n     * @return Start angle\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"startAngle\");\n    },\n\n    /**\r\n     * [startAngle description]\r\n     *\r\n     * @todo Description\r\n     * @param value  Start angle\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"startAngle\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FlowDiagramLink.prototype, \"endAngle\", {\n    /**\r\n     * @return End angle\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"endAngle\");\n    },\n\n    /**\r\n     * [endAngle description]\r\n     *\r\n     * @todo Description\r\n     * @param value  End angle\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"endAngle\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FlowDiagramLink.prototype, \"colorMode\", {\n    /**\r\n     * Fill mode\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"colorMode\");\n    },\n\n    /**\r\n     * Should link be filled with a solid color, color of from node, color of toNode or gradient between node colors.\r\n     * Some of the links, like ChordLink does not support gradiens well.\r\n     *\r\n     * @param value  Fill mode\r\n     */\n    set: function (value) {\n      if (value == \"gradient\") {\n        var color = this.fill;\n        this.gradient.stops.clear();\n\n        if (color instanceof Color) {\n          this.gradient.addColor(color);\n          this.gradient.addColor(color);\n        }\n\n        this.fill = this.gradient;\n        this.stroke = this.gradient;\n      }\n\n      this.setPropertyValue(\"colorMode\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FlowDiagramLink.prototype, \"maskBullets\", {\n    /**\r\n     * @return mask bullets value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"maskBullets\");\n    },\n\n    /**\r\n     * Should link bullets be masked or not\r\n     *\r\n     * @param value\r\n     * @default false;\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"maskBullets\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FlowDiagramLink.prototype, \"tooltipLocation\", {\n    /**\r\n     * Tooltip location value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"tooltipLocation\");\n    },\n\n    /**\r\n     * Relative location of a tooltip.\r\n     * @default 0.5\r\n     *\r\n     * @param value\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"tooltipLocation\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Adds color steps in the link gradient.\r\n   *\r\n   * @param value  Fill option\r\n   */\n\n  FlowDiagramLink.prototype.setFill = function (value) {\n    _super.prototype.setFill.call(this, value);\n\n    var gradient = this._gradient;\n\n    if (gradient && value instanceof Color) {\n      gradient.stops.clear();\n      gradient.addColor(value);\n      gradient.addColor(value);\n    }\n  };\n  /**\r\n   * Updates bounding box based on element dimension settings.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  FlowDiagramLink.prototype.measureElement = function () {};\n\n  Object.defineProperty(FlowDiagramLink.prototype, \"bullets\", {\n    /**\r\n     * List of bullets\r\n     *\r\n     * @return [description]\r\n     */\n    get: function () {\n      var _this = this;\n\n      if (!this._bullets) {\n        this._bullets = new ListTemplate(new Bullet());\n\n        this._disposers.push(new ListDisposer(this._bullets));\n\n        this._disposers.push(this._bullets.template);\n\n        this._bullets.events.on(\"inserted\", function (event) {\n          event.newValue.events.on(\"propertychanged\", function (event) {\n            if (event.property == \"locationX\" || event.property == \"locationY\") {\n              _this.positionBullet(event.target);\n            }\n          }, undefined, false);\n        }, undefined, false);\n      }\n\n      return this._bullets;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Copies properties from another [[FlowDiagramLink]].\r\n   *\r\n   * @param source  Source link\r\n   */\n\n  FlowDiagramLink.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n\n    this.bullets.copyFrom(source.bullets);\n    var middleLine = this.middleLine;\n\n    if (middleLine) {\n      if (middleLine instanceof Line && source.middleLine instanceof Line) {\n        middleLine.copyFrom(source.middleLine);\n      }\n\n      if (middleLine instanceof Polyline && source.middleLine instanceof Polyline) {\n        middleLine.copyFrom(source.middleLine);\n      }\n    }\n\n    this.link.copyFrom(source.link);\n  };\n  /**\r\n   * @ignore Exclude from docs\r\n   * @return Tooltip X (px)\r\n   */\n\n\n  FlowDiagramLink.prototype.getTooltipX = function () {\n    if (this.middleLine) {\n      return this.middleLine.positionToPoint(this.tooltipLocation).x;\n    }\n  };\n  /**\r\n   * @ignore Exclude from docs\r\n   * @return Tooltip Y (px)\r\n   */\n\n\n  FlowDiagramLink.prototype.getTooltipY = function () {\n    if (this.middleLine) {\n      return this.middleLine.positionToPoint(this.tooltipLocation).y;\n    }\n  };\n\n  Object.defineProperty(FlowDiagramLink.prototype, \"gradient\", {\n    /**\r\n     * A gradiend instance that is used to provided colored gradient fills for\r\n     * the Flow link.\r\n     */\n    get: function () {\n      if (!this._gradient) {\n        this._gradient = new LinearGradient();\n      }\n\n      return this._gradient;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return FlowDiagramLink;\n}(Container);\n\nexport { FlowDiagramLink };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"FlowDiagramLink\"] = FlowDiagramLink;","map":null,"metadata":{},"sourceType":"module"}