{"ast":null,"code":"/**\r\n * Module that defines everything related to building bullets.\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Container } from \"../../core/Container\";\nimport { registry } from \"../../core/Registry\";\nimport { defaultRules, ResponsiveBreakpoints } from \"../../core/utils/Responsive\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Class used to creates bullets.\r\n *\r\n * @see {@link IBulletEvents} for a list of available events\r\n * @see {@link IBulletAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\n\nvar Bullet =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Bullet, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function Bullet() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"Bullet\";\n    _this.isMeasured = false;\n    _this.tooltipX = 0;\n    _this.tooltipY = 0;\n    _this.layout = \"none\";\n    _this.applyOnClones = true;\n    _this.copyToLegendMarker = true;\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  Object.defineProperty(Bullet.prototype, \"locationX\", {\n    /**\r\n     * @return Location (0-1)\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"locationX\");\n    },\n\n    /**\r\n     * Relative horizontal location within cell. (0-1)\r\n     *\r\n     * @param value  Location (0-1)\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"locationX\", value, false, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Bullet.prototype, \"locationY\", {\n    /**\r\n     * @return Location (0-1)\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"locationY\");\n    },\n\n    /**\r\n     * Relative vertical location within cell. (0-1)\r\n     *\r\n     * @param value  Location (0-1)\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"locationY\", value, false, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Bullet.prototype, \"xField\", {\n    /**\r\n     * @return [description]\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"xField\");\n    },\n\n    /**\r\n     * [xField description]\r\n     *\r\n     * @todo Description\r\n     * @param value  [description]\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"xField\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Bullet.prototype, \"yField\", {\n    /**\r\n     * @return [description]\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"yField\");\n    },\n\n    /**\r\n     * [yField description]\r\n     *\r\n     * Description\r\n     * @param value  [description]\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"yField\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Bullet.prototype, \"isDynamic\", {\n    /**\r\n     * @return Redraw on data change?\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"isDynamic\");\n    },\n\n    /**\r\n     * Indicates if the bullet is \"dynamic\".\r\n     *\r\n     * In most cases the bullets remain the same, even if the underlying data\r\n     * changes.\r\n     *\r\n     * However, in cases where bullet also displays a label, or its size depends\r\n     * on data, it also needs to be redrawn when the underlying data changes.\r\n     *\r\n     * Only those bullets that have set `isDynamic = true` will be redrawn each\r\n     * time data changes. Regular bullets will be reused as they are.\r\n     *\r\n     * @default false\r\n     * @param value  Redraw on data change?\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"isDynamic\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Bullet.prototype, \"copyToLegendMarker\", {\n    /**\r\n     * @return Redraw on data change?\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"copyToLegendMarker\");\n    },\n\n    /**\r\n     * Indicates if the bullet should be copied to legend marker\r\n     *\r\n     * @default false\r\n     * @param value  Redraw on data change?\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"copyToLegendMarker\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Bullet;\n}(Container);\n\nexport { Bullet };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"Bullet\"] = Bullet;\n/**\r\n * Add default responsive rules\r\n */\n\n/**\r\n * Hide bullets\r\n */\n\ndefaultRules.push({\n  relevant: ResponsiveBreakpoints.isXS,\n  state: function state(target, stateId) {\n    if (target instanceof Bullet) {\n      var state = target.states.create(stateId);\n      state.properties.disabled = true;\n      return state;\n    }\n\n    return null;\n  }\n});","map":null,"metadata":{},"sourceType":"module"}