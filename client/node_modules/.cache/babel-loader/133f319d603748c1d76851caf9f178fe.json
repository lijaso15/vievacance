{"ast":null,"code":"/**\r\n * Module that defines everything related to building Columns.\r\n * It is a container which has column element which is a RoundedRectangle.\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Container } from \"../../core/Container\";\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\nimport { registry } from \"../../core/Registry\";\nimport { percent } from \"../../core/utils/Percent\";\nimport * as $math from \"../../core/utils/Math\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Class used to creates Columns.\r\n *\r\n * @see {@link IColumnEvents} for a list of available events\r\n * @see {@link IColumnAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\n\nvar Column =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Column, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function Column() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"Column\";\n    _this.width = percent(80);\n    _this.height = percent(80); //this.isMeasured = true; // for correct position of the tooltip\n\n    _this.applyOnClones = true;\n    _this.strokeOpacity = 1;\n    _this.layout = \"none\";\n\n    _this.createAssets(); // otherwise users will have to set layout themselves if they'll want to align, scale etc children\n\n\n    _this.events.on(\"childadded\", _this.handleKidAdded, _this, false);\n\n    return _this;\n  }\n  /**\r\n   * @ignore\r\n   */\n\n\n  Column.prototype.handleKidAdded = function () {\n    if (this.layout == \"none\") {\n      this.layout = \"absolute\";\n    }\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  Column.prototype.createAssets = function () {\n    this.column = this.createChild(RoundedRectangle);\n    this.column.shouldClone = false;\n    this.column.cornerRadius(0, 0, 0, 0);\n\n    this._disposers.push(this.column);\n  };\n  /**\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Column.prototype.validate = function () {\n    _super.prototype.validate.call(this);\n\n    var column = this.column;\n\n    if (column) {\n      column.width = $math.min(this.pixelWidth, this.maxWidth);\n      column.height = $math.min(this.pixelHeight, this.maxHeight);\n\n      if (column.invalid) {\n        column.validate(); // important!\n      }\n    }\n  };\n  /**\r\n   * Copies all parameters from another [[Column]].\r\n   *\r\n   * @param source Source Column\r\n   */\n\n\n  Column.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n\n    if (this.column) {\n      this.column.copyFrom(source.column);\n    }\n  };\n\n  Object.defineProperty(Column.prototype, \"bbox\", {\n    /**\r\n     * Returns bounding box (square) for this element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    get: function () {\n      if (this.definedBBox) {\n        return this.definedBBox;\n      }\n\n      if (this.column) {\n        return {\n          x: 0,\n          y: 0,\n          width: this.column.measuredWidth,\n          height: this.column.measuredHeight\n        };\n      } else {\n        return {\n          x: 0,\n          y: 0,\n          width: $math.min(this.pixelWidth, this.maxWidth),\n          height: $math.min(this.pixelHeight, this.maxHeight)\n        };\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Column;\n}(Container);\n\nexport { Column };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"Column\"] = Column;","map":null,"metadata":{},"sourceType":"module"}