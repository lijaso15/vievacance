{"ast":null,"code":"var _jsxFileName = \"/Users/Overseer/Desktop/fullstack_app/client/src/components/Globe/Globe-view.js\";\nimport React, { Component } from 'react';\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\nimport * as am4maps from \"@amcharts/amcharts4/maps\";\nimport worldHigh from '@amcharts/amcharts4-geodata/worldHigh';\nimport axios from 'axios';\nam4core.useTheme(am4themes_animated);\n\nclass Globe extends Component {\n  componentDidMount() {\n    axios.get('http://localhost:3000/globeData').then(res => {\n      if (res.status === 200) {\n        am4core.useTheme(am4themes_animated); // create map instance\n\n        const chart = am4core.create(\"chartdiv\", am4maps.MapChart); // Set map definition\n\n        chart.geodata = worldHigh; // setting projection\n\n        chart.projection = new am4maps.projections.Orthographic(); // Create map polygon series\n        // represents map areas\n\n        var polygonSeries = chart.series.push(new am4maps.MapPolygonSeries());\n        polygonSeries.useGeodata = true; // configure appearance and behavior of its items by accessing templates\n\n        var polygonTemplate = polygonSeries.mapPolygons.template;\n        polygonTemplate.tooltipText = \"{name}\";\n        polygonTemplate.fill = chart.colors.getIndex(0).lighten(0.5);\n        var hs = polygonTemplate.states.create(\"hover\");\n        hs.properties.fill = chart.colors.getIndex(0);\n        polygonTemplate.fill = am4core.color(\"#363636\");\n        polygonTemplate.propertyFields.fill = 'color';\n        let imageSeries = chart.series.push(new am4maps.MapImageSeries());\n        let imageSeriesTemplate = imageSeries.mapImages.template;\n        let circle = imageSeriesTemplate.createChild(am4core.Circle);\n        circle.radius = 4;\n        circle.fill = am4core.color(\"#B27799\");\n        circle.strokeWidth = 2;\n        circle.tooltipText = '{title}';\n        circle.interactions.hoverable = true;\n        circle.url = '{url}';\n        imageSeriesTemplate.propertyFields.latitude = \"latitude\";\n        imageSeriesTemplate.propertyFields.longitude = \"longitude\";\n        imageSeries.data = JSON.parse(res.data); // chart.backgroundSeries.mapPolygons.template.polygon.fill = am4core.color(\"#f5f5f5\");\n        // chart.backgroundSeries.mapPolygons.template.polygon.fillOpacity = 1;\n\n        let grid = chart.series.push(new am4maps.GraticuleSeries());\n        grid.toBack(); // grid.mapLines.template.line.stroke = am4core.color(\"#e33\");\n        // grid.mapLines.template.line.strokeOpacity = 0.2;\n\n        chart.panBehavior = \"rotateLongLat\";\n        this.chart = chart;\n      }\n    }).catch(err => alert(err));\n  }\n\n  componentWillUnmount() {\n    if (this.chart) {\n      this.chart.dispose();\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"chartdiv\",\n      style: {\n        width: \"100%\",\n        height: \"500px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default Globe;","map":{"version":3,"sources":["/Users/Overseer/Desktop/fullstack_app/client/src/components/Globe/Globe-view.js"],"names":["React","Component","am4core","am4themes_animated","am4maps","worldHigh","axios","useTheme","Globe","componentDidMount","get","then","res","status","chart","create","MapChart","geodata","projection","projections","Orthographic","polygonSeries","series","push","MapPolygonSeries","useGeodata","polygonTemplate","mapPolygons","template","tooltipText","fill","colors","getIndex","lighten","hs","states","properties","color","propertyFields","imageSeries","MapImageSeries","imageSeriesTemplate","mapImages","circle","createChild","Circle","radius","strokeWidth","interactions","hoverable","url","latitude","longitude","data","JSON","parse","grid","GraticuleSeries","toBack","panBehavior","catch","err","alert","componentWillUnmount","dispose","render","width","height"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\nimport * as am4maps from \"@amcharts/amcharts4/maps\";\nimport worldHigh from '@amcharts/amcharts4-geodata/worldHigh'\nimport axios from 'axios'\n\n\nam4core.useTheme(am4themes_animated);\n\nclass Globe extends Component {\n    componentDidMount() {\n\n        axios.get('http://localhost:3000/globeData').then(res => {\n            if (res.status === 200) {\n                am4core.useTheme(am4themes_animated);\n                // create map instance\n                const chart = am4core.create(\"chartdiv\", am4maps.MapChart);\n                // Set map definition\n                chart.geodata = worldHigh\n                // setting projection\n                chart.projection = new am4maps.projections.Orthographic();\n                // Create map polygon series\n                // represents map areas\n                var polygonSeries = chart.series.push(new am4maps.MapPolygonSeries());\n                polygonSeries.useGeodata = true;\n                // configure appearance and behavior of its items by accessing templates\n                var polygonTemplate = polygonSeries.mapPolygons.template;\n                polygonTemplate.tooltipText = \"{name}\";\n                polygonTemplate.fill = chart.colors.getIndex(0).lighten(0.5);\n                var hs = polygonTemplate.states.create(\"hover\");\n                hs.properties.fill = chart.colors.getIndex(0);\n                polygonTemplate.fill = am4core.color(\"#363636\");\n                polygonTemplate.propertyFields.fill = 'color'\n\n                let imageSeries = chart.series.push(new am4maps.MapImageSeries());\n                let imageSeriesTemplate = imageSeries.mapImages.template;\n                let circle = imageSeriesTemplate.createChild(am4core.Circle);\n                circle.radius = 4;\n                circle.fill = am4core.color(\"#B27799\");\n                circle.strokeWidth = 2;\n\n                circle.tooltipText = '{title}'\n                circle.interactions.hoverable = true\n                circle.url = '{url}'\n\n                imageSeriesTemplate.propertyFields.latitude = \"latitude\";\n                imageSeriesTemplate.propertyFields.longitude = \"longitude\";\n\n                imageSeries.data = JSON.parse(res.data)\n\n                // chart.backgroundSeries.mapPolygons.template.polygon.fill = am4core.color(\"#f5f5f5\");\n                // chart.backgroundSeries.mapPolygons.template.polygon.fillOpacity = 1;\n\n                let grid = chart.series.push(new am4maps.GraticuleSeries());\n                grid.toBack();\n                // grid.mapLines.template.line.stroke = am4core.color(\"#e33\");\n                // grid.mapLines.template.line.strokeOpacity = 0.2;\n                chart.panBehavior = \"rotateLongLat\";\n                this.chart = chart;\n            }\n        }).catch(err => alert(err))\n\n    }\n\n    componentWillUnmount() {\n        if (this.chart) {\n            this.chart.dispose();\n        }\n    }\n\n    render() {\n        return (\n            <div id=\"chartdiv\" style={{ width: \"100%\", height: \"500px\" }}></div>\n        );\n    }\n}\n\nexport default Globe;"]},"metadata":{},"sourceType":"module"}