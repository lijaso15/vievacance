{"ast":null,"code":"/**\r\n * [[AMElement]] represents any SVG element and related functionality.\r\n */\nimport * as $dom from \"../utils/DOM\";\nimport * as $object from \"../utils/Object\";\nimport * as $type from \"../utils/Type\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * A base class for all SVG elements. Provides low-level DOM functionality.\r\n *\r\n * All visual elements extend this class.\r\n */\n\nvar AMElement =\n/** @class */\nfunction () {\n  /**\r\n   * Constructor creates a new element or uses the one that was passed in.\r\n   *\r\n   * @param element Element reference node type\r\n   */\n  function AMElement(element) {\n    /**\r\n     * Indicates if the element was already disposed.\r\n     */\n    this._isDisposed = false;\n    /**\r\n     * Current X coordinate.\r\n     */\n\n    this._x = 0;\n    /**\r\n     * Current Y coordinate.\r\n     */\n\n    this._y = 0;\n    /**\r\n     * Current rotation.\r\n     */\n\n    this._rotation = 0;\n    /**\r\n     * Current scale.\r\n     */\n\n    this._scale = 1;\n\n    if (typeof element === \"string\") {\n      this.node = document.createElementNS($dom.SVGNS, element);\n    } else {\n      this.node = element;\n    }\n  }\n  /**\r\n   * Removes element's node from DOM.\r\n   */\n\n\n  AMElement.prototype.removeNode = function () {\n    if (this.node) {\n      if (this.node.parentNode) {\n        this.node.parentNode.removeChild(this.node);\n      }\n    }\n  };\n\n  Object.defineProperty(AMElement.prototype, \"transformString\", {\n    /**\r\n     * Returns `transform` attribute of the element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return Transform attribute value\r\n     */\n    get: function get() {\n      if (this.node) {\n        return this._transformString;\n        /*\r\n        const value = this.node.getAttribute(\"transform\");\r\n              if (value !== null) {\r\n            return value;\r\n        }*/\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Appply position, rotation and scale properties via elemen's `transform`\r\n   * property\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  AMElement.prototype.transform = function () {\n    var transfromString = \"translate(\" + this._x + \",\" + this._y + \")\";\n\n    if (this._scale != 1) {\n      transfromString += (transfromString ? \" \" : \"\") + \"scale(\" + this._scale + \")\";\n    }\n\n    if (this._rotation != 0) {\n      transfromString += (transfromString ? \" \" : \"\") + \"rotate(\" + this._rotation + \")\";\n    }\n\n    this._transformString = transfromString;\n    this.node.setAttribute(\"transform\", transfromString);\n  };\n  /**\r\n   * Returns bounding box of the element.\r\n   *\r\n   * ATTENTION: Bounding box calculations are extremely costly so should be\r\n   * used sparingly and cached whenever possible.\r\n   *\r\n   * @return Bounding rectangle\r\n   */\n\n\n  AMElement.prototype.getBBox = function () {\n    var bbox = {\n      width: 0,\n      height: 0,\n      x: 0,\n      y: 0\n    };\n\n    if (this.node) {\n      // FF would fail if getBBox() is called without node added to parent\n      if (this.node.parentNode) {\n        try {\n          // again for ff. TODO: check if this doesn't slow down\n          var svgbbox = this.node.getBBox();\n          bbox.x = svgbbox.x;\n          bbox.y = svgbbox.y;\n          bbox.width = svgbbox.width;\n          bbox.height = svgbbox.height;\n        } catch (err) {}\n      }\n    }\n\n    return bbox;\n  };\n  /**\r\n   * Moves the element to new coordinates.\r\n   *\r\n   * @param x  Target X\r\n   * @param y  Target Y\r\n   */\n\n\n  AMElement.prototype.moveTo = function (point) {\n    if (point) {\n      var x = point.x;\n      var y = point.y;\n\n      if (this._x != x || this._y != y) {\n        this._x = x;\n        this._y = y;\n        this.transform();\n      }\n    }\n  };\n\n  Object.defineProperty(AMElement.prototype, \"content\", {\n    /**\r\n     * Returns element's contents as SVG markup.\r\n     *\r\n     * @return Contents\r\n     */\n    get: function get() {\n      // @todo Do not use `innerHTML` as this is not reliable and will not work on all browsers\n      return this.node.innerHTML || \"\";\n    },\n\n    /**\r\n     * Element's SVG contents.\r\n     *\r\n     * @param value Contents\r\n     */\n    set: function set(value) {\n      // @todo Do not use `innerHTML` as this is not reliable and will not work on all browsers\n      this.node.innerHTML = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AMElement.prototype, \"textContent\", {\n    /**\r\n     * @return Text contents\r\n     */\n    get: function get() {\n      return this.node.textContent || \"\";\n    },\n\n    /**\r\n     * Text contents of the SVG element.\r\n     *\r\n     * @param value Text contents\r\n     */\n    set: function set(value) {\n      this.node.textContent = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AMElement.prototype, \"x\", {\n    /**\r\n     * @return X coordinate (px)\r\n     */\n    get: function get() {\n      return this._x;\n    },\n\n    /**\r\n     * Element's X position in pixels.\r\n     *\r\n     * @param value  X coordinate (px)\r\n     */\n    set: function set(value) {\n      if (this._x != value) {\n        this._x = value;\n        this.transform();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AMElement.prototype, \"y\", {\n    /**\r\n     * @return Y coordinate (px)\r\n     */\n    get: function get() {\n      return this._y;\n    },\n\n    /**\r\n     * Element's Y position in pixels.\r\n     *\r\n     * @param value Y coordinate (px)\r\n     */\n    set: function set(value) {\n      if (this._y != value) {\n        this._y = value;\n        this.transform();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AMElement.prototype, \"rotation\", {\n    /**\r\n     * @return Rotation\r\n     */\n    get: function get() {\n      return this._rotation;\n    },\n\n    /**\r\n     * Element's rotation in degrees.\r\n     *\r\n     * @param value Rotation\r\n     */\n    set: function set(angle) {\n      if (this._rotation != angle) {\n        this._rotation = angle;\n        this.transform();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AMElement.prototype, \"scale\", {\n    /**\r\n     * @return Scale\r\n     */\n    get: function get() {\n      return this._scale;\n    },\n\n    /**\r\n     * Element's scale where 1 is original size.\r\n     *\r\n     * Setting to 0.5 will reduce element's size by 50%, 2 will make element\r\n     * twice as large, etc.\r\n     *\r\n     * @param value Scale\r\n     */\n    set: function set(value) {\n      if (this._scale != value) {\n        this._scale = value;\n        this.transform();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Removes an attribute from element.\r\n   *\r\n   * @param attribute  Attribute to remove\r\n   */\n\n  AMElement.prototype.removeAttr = function (attribute) {\n    this.node.removeAttribute(attribute);\n  };\n  /**\r\n   * Sets a set of attributes on a element.\r\n   *\r\n   * @param attributes  An object with attribute names (key) and values\r\n   * @return The same element\r\n   */\n\n\n  AMElement.prototype.attr = function (attributes) {\n    var _this = this;\n\n    $object.each(attributes, function (attributeName, attributeValue) {\n      if (!$type.hasValue(attributeValue)) {\n        _this.node.removeAttribute(attributeName);\n      } else {\n        // this is for performance testing\n        //if(attributeValue == this.node.getAttribute(attributeName)){\n        //\tconsole.log(attributeName, attributeValue)\n        //}\n        _this.node.setAttribute(attributeName, attributeValue);\n      }\n    });\n    return this;\n  };\n  /**\r\n   * Returns a value of a node attribute.\r\n   *\r\n   * @param attribute  Attribute name\r\n   * @return Attribute value\r\n   */\n\n\n  AMElement.prototype.getAttr = function (attribute) {\n    return this.node.getAttribute(attribute);\n  };\n  /**\r\n   * Sets a single attribute of the element's node using namesspace.\r\n   *\r\n   * @param ns         Namespace\r\n   * @param attribute  Attribute\r\n   * @param value      Value\r\n   * @return The same element\r\n   */\n\n\n  AMElement.prototype.attrNS = function (ns, attribute, value) {\n    this.node.setAttributeNS(ns, attribute, value);\n    return this;\n  };\n  /**\r\n   * Returns a namespaced attribute value from node.\r\n   *\r\n   * @param ns         Namespace\r\n   * @param attribute  Attribute\r\n   * @return Attribute value\r\n   */\n\n\n  AMElement.prototype.getAttrNS = function (ns, attribute) {\n    return this.node.getAttributeNS(ns, attribute);\n  };\n  /**\r\n   * Removes `style` attribute from node.\r\n   *\r\n   * @param attribute  Attribute to remove\r\n   */\n\n\n  AMElement.prototype.removeStyle = function (attribute) {\n    // @todo Review because it's a bit messy and maybe not needed (pratically not used)\n    delete this.node.style[attribute];\n  };\n  /**\r\n   * Returns style attribute value.\r\n   *\r\n   * @param attribute  Style attribute value\r\n   * @return Attribute value\r\n   */\n\n\n  AMElement.prototype.getStyle = function (attribute) {\n    // @todo Review because it's a bit messy and maybe not needed (pratically not used)\n    return this.node.style[attribute];\n  };\n  /**\r\n   * Adds style attributes to element's node.\r\n   *\r\n   * @param attributes  Object containing attribute: value pairs\r\n   * @return The same element\r\n   */\n\n\n  AMElement.prototype.addStyle = function (attributes) {\n    var _this = this; // @todo Review because it's a bit messy and maybe not needed (pratically not used)\n\n\n    $object.each(attributes, function (attributeName, attributeValue) {\n      if (!$type.hasValue(attributeValue)) {\n        _this.removeStyle(attributeName);\n      } else {\n        _this.node.style[attributeName] = attributeValue;\n      }\n    });\n    return this;\n  };\n  /**\r\n   * Adds a class to element.\r\n   *\r\n   * @param name  Class name\r\n   */\n\n\n  AMElement.prototype.addClass = function (name) {\n    $dom.addClass(this.node, name);\n  };\n  /**\r\n   * Removes a class from element.\r\n   *\r\n   * @param name Class name\r\n   */\n\n\n  AMElement.prototype.removeClass = function (name) {\n    $dom.removeClass(this.node, name);\n  };\n  /**\r\n   * Sets a class name on element.\r\n   *\r\n   * @param name  Class name\r\n   */\n\n\n  AMElement.prototype.setClass = function (name) {\n    this.node.setAttribute(\"class\", name);\n  };\n  /**\r\n   * Removes all element's child nodes, basically leaving it empty.\r\n   */\n\n\n  AMElement.prototype.removeChildNodes = function () {\n    // remove all children\n    while (this.node.childNodes.length > 0) {\n      this.node.removeChild(this.node.firstChild);\n    }\n  };\n  /**\r\n   * Was this element already been disposed?\r\n   *\r\n   * @return Disposed?\r\n   */\n\n\n  AMElement.prototype.isDisposed = function () {\n    return this._isDisposed;\n  };\n  /**\r\n   * Disposes element.\r\n   */\n\n\n  AMElement.prototype.dispose = function () {\n    this.removeNode();\n  };\n\n  return AMElement;\n}();\n\nexport { AMElement };","map":null,"metadata":{},"sourceType":"module"}