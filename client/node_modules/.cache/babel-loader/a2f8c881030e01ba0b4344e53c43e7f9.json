{"ast":null,"code":"var _jsxFileName = \"/Users/Overseer/Desktop/fullstack_app/client/src/components/Globe/Globe-view.js\";\nimport React, { Component } from 'react';\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\nimport * as am4maps from \"@amcharts/amcharts4/maps\";\nimport worldHigh from '@amcharts/amcharts4-geodata/worldHigh';\nam4core.useTheme(am4themes_animated);\n\nclass Globe extends Component {\n  componentDidMount() {\n    am4core.useTheme(am4themes_animated); // create map instance\n\n    const chart = am4core.create(\"chartdiv\", am4maps.MapChart); // Set map definition\n\n    chart.geodata = worldHigh; // setting projection\n\n    chart.projection = new am4maps.projections.Orthographic(); // Create map polygon series\n    // represents map areas\n\n    var polygonSeries = chart.series.push(new am4maps.MapPolygonSeries());\n    polygonSeries.useGeodata = true; // configure appearance and behavior of its items by accessing templates\n\n    var polygonTemplate = polygonSeries.mapPolygons.template;\n    polygonTemplate.tooltipText = \"{name}\";\n    polygonTemplate.fill = chart.colors.getIndex(0).lighten(0.5);\n    var hs = polygonTemplate.states.create(\"hover\");\n    hs.properties.fill = chart.colors.getIndex(0);\n    polygonTemplate.fill = am4core.color(\"#363636\");\n    polygonTemplate.propertyFields.fill = 'color';\n    let imageSeries = chart.series.push(new am4maps.MapImageSeries());\n    let imageSeriesTemplate = imageSeries.mapImages.template;\n    let circle = imageSeriesTemplate.createChild(am4core.Circle);\n    circle.radius = 4;\n    circle.fill = am4core.color(\"#B27799\");\n    circle.strokeWidth = 2;\n    circle.tooltipText = 'fuck you';\n    circle.interactions.hoverable = true;\n    circle.events.on('over', ev => {\n      circle.showTooltip();\n    }); // circle.tooltipText = \"{title}\";\n    // // circle.\n    // console.log(circle.clickable)\n    // circle.events.on('hit', (ev) => {\n    //     console.log(ev.target.tooltip)\n    // })\n\n    imageSeriesTemplate.propertyFields.latitude = \"latitude\";\n    imageSeriesTemplate.propertyFields.longitude = \"longitude\";\n    imageSeries.data = [{\n      \"latitude\": 48.856614,\n      \"longitude\": 2.352222,\n      \"title\": \"Paris\",\n      'url': 'google.ca'\n    }, {\n      \"latitude\": 40.712775,\n      \"longitude\": -74.005973,\n      \"title\": \"New York\"\n    }, {\n      \"latitude\": 49.282729,\n      \"longitude\": -123.120738,\n      \"title\": \"Vancouver\"\n    }]; // chart.backgroundSeries.mapPolygons.template.polygon.fill = am4core.color(\"#f5f5f5\");\n    // chart.backgroundSeries.mapPolygons.template.polygon.fillOpacity = 1;\n\n    let grid = chart.series.push(new am4maps.GraticuleSeries());\n    grid.toBack(); // grid.mapLines.template.line.stroke = am4core.color(\"#e33\");\n    // grid.mapLines.template.line.strokeOpacity = 0.2;\n\n    chart.panBehavior = \"rotateLongLat\";\n    this.chart = chart;\n  }\n\n  componentWillUnmount() {\n    if (this.chart) {\n      this.chart.dispose();\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"chartdiv\",\n      style: {\n        width: \"100%\",\n        height: \"500px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default Globe;","map":{"version":3,"sources":["/Users/Overseer/Desktop/fullstack_app/client/src/components/Globe/Globe-view.js"],"names":["React","Component","am4core","am4themes_animated","am4maps","worldHigh","useTheme","Globe","componentDidMount","chart","create","MapChart","geodata","projection","projections","Orthographic","polygonSeries","series","push","MapPolygonSeries","useGeodata","polygonTemplate","mapPolygons","template","tooltipText","fill","colors","getIndex","lighten","hs","states","properties","color","propertyFields","imageSeries","MapImageSeries","imageSeriesTemplate","mapImages","circle","createChild","Circle","radius","strokeWidth","interactions","hoverable","events","on","ev","showTooltip","latitude","longitude","data","grid","GraticuleSeries","toBack","panBehavior","componentWillUnmount","dispose","render","width","height"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\nimport * as am4maps from \"@amcharts/amcharts4/maps\";\nimport worldHigh from '@amcharts/amcharts4-geodata/worldHigh'\n\nam4core.useTheme(am4themes_animated);\n\nclass Globe extends Component {\n    componentDidMount() {\n        am4core.useTheme(am4themes_animated);\n        // create map instance\n        const chart = am4core.create(\"chartdiv\", am4maps.MapChart);\n        // Set map definition\n        chart.geodata = worldHigh\n        // setting projection\n        chart.projection = new am4maps.projections.Orthographic();\n        // Create map polygon series\n        // represents map areas\n        var polygonSeries = chart.series.push(new am4maps.MapPolygonSeries());\n        polygonSeries.useGeodata = true;\n        // configure appearance and behavior of its items by accessing templates\n        var polygonTemplate = polygonSeries.mapPolygons.template;\n        polygonTemplate.tooltipText = \"{name}\";\n        polygonTemplate.fill = chart.colors.getIndex(0).lighten(0.5);\n        var hs = polygonTemplate.states.create(\"hover\");\n        hs.properties.fill = chart.colors.getIndex(0);\n        polygonTemplate.fill = am4core.color(\"#363636\");\n        polygonTemplate.propertyFields.fill = 'color'\n\n        let imageSeries = chart.series.push(new am4maps.MapImageSeries());\n        let imageSeriesTemplate = imageSeries.mapImages.template;\n        let circle = imageSeriesTemplate.createChild(am4core.Circle);\n        circle.radius = 4;\n        circle.fill = am4core.color(\"#B27799\");\n        circle.strokeWidth = 2;\n\n        circle.tooltipText = 'fuck you'\n        circle.interactions.hoverable = true\n        circle.events.on('over', (ev) => {\n            circle.showTooltip()\n        })\n\n        // circle.tooltipText = \"{title}\";\n        // // circle.\n        // console.log(circle.clickable)\n        // circle.events.on('hit', (ev) => {\n        //     console.log(ev.target.tooltip)\n        // })\n\n\n        imageSeriesTemplate.propertyFields.latitude = \"latitude\";\n        imageSeriesTemplate.propertyFields.longitude = \"longitude\";\n\n        imageSeries.data = [{\n            \"latitude\": 48.856614,\n            \"longitude\": 2.352222,\n            \"title\": \"Paris\",\n            'url': 'google.ca'\n        }, {\n            \"latitude\": 40.712775,\n            \"longitude\": -74.005973,\n            \"title\": \"New York\"\n        }, {\n            \"latitude\": 49.282729,\n            \"longitude\": -123.120738,\n            \"title\": \"Vancouver\"\n        }];\n\n        // chart.backgroundSeries.mapPolygons.template.polygon.fill = am4core.color(\"#f5f5f5\");\n        // chart.backgroundSeries.mapPolygons.template.polygon.fillOpacity = 1;\n\n        let grid = chart.series.push(new am4maps.GraticuleSeries());\n        grid.toBack();\n        // grid.mapLines.template.line.stroke = am4core.color(\"#e33\");\n        // grid.mapLines.template.line.strokeOpacity = 0.2;\n        chart.panBehavior = \"rotateLongLat\";\n        this.chart = chart;\n    }\n\n    componentWillUnmount() {\n        if (this.chart) {\n            this.chart.dispose();\n        }\n    }\n\n    render() {\n        return (\n            <div id=\"chartdiv\" style={{ width: \"100%\", height: \"500px\" }}></div>\n        );\n    }\n}\n\nexport default Globe;"]},"metadata":{},"sourceType":"module"}