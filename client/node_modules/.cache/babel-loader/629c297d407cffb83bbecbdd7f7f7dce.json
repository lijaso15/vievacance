{"ast":null,"code":"/**\r\n * Functionality for drawing simple ClockHands\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Container } from \"../../core/Container\";\nimport { Circle } from \"../../core/elements/Circle\";\nimport { Trapezoid } from \"../../core/elements/Trapezoid\";\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\nimport { percent } from \"../../core/utils/Percent\";\nimport { registry } from \"../../core/Registry\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport * as $type from \"../../core/utils/Type\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * ClockHand class is capable of drawing a simple pointy shape with optionally\r\n * rounderd corners and an icon.\r\n *\r\n * @see {@link IClockHandEvents} for a list of available events\r\n * @see {@link IClockHandAdapters} for a list of available Adapters\r\n * @todo Improve\r\n * @important\r\n */\n\nvar ClockHand =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(ClockHand, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function ClockHand() {\n    var _this = // Init\n    _super.call(this) || this;\n    /**\r\n     * An Axis hand is related to.\r\n     */\n\n\n    _this._axis = new MutableValueDisposer();\n    _this.className = \"ClockHand\";\n    var interfaceColors = new InterfaceColorSet();\n    _this.fill = interfaceColors.getFor(\"alternativeBackground\");\n    _this.stroke = _this.fill;\n    var pin = new Circle();\n    pin.radius = 5;\n    _this.pin = pin;\n    _this.isMeasured = false;\n    _this.startWidth = 5;\n    _this.endWidth = 1;\n    _this.width = percent(100);\n    _this.height = percent(100);\n    _this.radius = percent(100);\n    _this.innerRadius = percent(0);\n    var hand = new Trapezoid();\n    _this.hand = hand;\n\n    _this._disposers.push(_this._axis); // Apply theme\n\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Re(validates) the clock hand, effectively redrawing it.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  ClockHand.prototype.validate = function () {\n    _super.prototype.validate.call(this);\n\n    var hand = this.hand;\n    hand.width = this.pixelWidth;\n    var h = Math.max(this.startWidth, this.endWidth);\n    hand.height = h;\n    hand.leftSide = percent(this.startWidth / h * 100);\n    hand.rightSide = percent(this.endWidth / h * 100);\n\n    if (this.axis) {\n      var renderer = this.axis.renderer;\n      var x0 = $utils.relativeRadiusToValue(this.innerRadius, renderer.pixelRadius);\n      var x1 = $utils.relativeRadiusToValue(this.radius, renderer.pixelRadius);\n      hand.x = x0;\n      hand.y = -h / 2;\n      hand.width = x1 - x0;\n    }\n  };\n\n  Object.defineProperty(ClockHand.prototype, \"pin\", {\n    /**\r\n     * @return Pin element\r\n     */\n    get: function () {\n      return this._pin;\n    },\n\n    /**\r\n     * A circle element used as hand's base. (pin)\r\n     *\r\n     * @param pin  Pin element\r\n     */\n    set: function (pin) {\n      if (this._pin) {\n        this.removeDispose(this._pin);\n      }\n\n      if (pin) {\n        this._pin = pin;\n        pin.parent = this;\n\n        this._disposers.push(pin);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ClockHand.prototype, \"hand\", {\n    /**\r\n     * @return Hand element\r\n     */\n    get: function () {\n      return this._hand;\n    },\n\n    /**\r\n     * A trapezoid shape used for hand itself.\r\n     *\r\n     * The shape of the trapezoid is controlled by ClockHand's `startWidth` and\r\n     * `endWidth` properties.\r\n     *\r\n     * Set `endWidth` to 1 (px) to make it pointy.\r\n     *\r\n     * @param hand  Hand element\r\n     */\n    set: function (hand) {\n      if (this._hand) {\n        this.removeDispose(this._hand);\n      }\n\n      if (hand) {\n        this._hand = hand;\n        hand.parent = this;\n\n        this._disposers.push(hand);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ClockHand.prototype, \"radius\", {\n    /**\r\n     * @return Radius\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"radius\");\n    },\n\n    /**\r\n     * Radius of the hand's outer end. (tip)\r\n     *\r\n     * Absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @default Percent(0)\r\n     * @param value  Radius\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"radius\", value, true, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ClockHand.prototype, \"innerRadius\", {\n    /**\r\n     * @return Radius\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"innerRadius\");\n    },\n\n    /**\r\n     * Radius of the hand's inner end. (base)\r\n     *\r\n     * Absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @default Percent(0)\r\n     * @param value  Radius\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ClockHand.prototype, \"startWidth\", {\n    /**\r\n     * @return Width (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"startWidth\");\n    },\n\n    /**\r\n     * Width, in pixels, of the clock hand's inner end. (base)\r\n     *\r\n     * @default 5\r\n     * @param value  Width (px)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"startWidth\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ClockHand.prototype, \"endWidth\", {\n    /**\r\n     * @return Width (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"endWidth\");\n    },\n\n    /**\r\n     * Width, in pixels, of the clock hand's outer end. (tip)\r\n     *\r\n     * @default 1\r\n     * @param value  Width (px)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"endWidth\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ClockHand.prototype, \"rotationDirection\", {\n    /**\r\n     * @return rotationDirection\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"rotationDirection\");\n    },\n\n    /**\r\n     * Rotation direction\r\n     *\r\n     * @default any\r\n     * @param value\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"rotationDirection\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Moves clock hand to particular value.\r\n   *\r\n   * If `duration` is set to a number in milliseconds, the hand will move\r\n   * to the new position gracefully, rather than jumping rigth to it.\r\n   *\r\n   * Alternatively, you can also set `value` directly.\r\n   *\r\n   * @param value     New value\r\n   * @param duration  Animation duration (ms)\r\n   * @param easing  Animation easing function\r\n   */\n\n  ClockHand.prototype.showValue = function (value, duration, easing) {\n    this._value = value;\n\n    if (value != undefined) {\n      if (!$type.isNumber(duration)) {\n        duration = 0;\n      }\n\n      if (this.axis) {\n        var renderer = this.axis.renderer;\n        var newAngle = renderer.positionToAngle(this.axis.anyToPosition(value));\n        var currentAngle = this.rotation;\n\n        if (this.rotationDirection == \"clockWise\") {\n          if (newAngle < currentAngle) {\n            this.rotation = currentAngle - 360;\n          }\n        }\n\n        if (this.rotationDirection == \"counterClockWise\") {\n          if (newAngle > currentAngle) {\n            this.rotation = currentAngle + 360;\n          }\n        }\n\n        this.animate({\n          property: \"rotation\",\n          to: newAngle\n        }, duration, easing);\n      }\n    }\n  };\n\n  Object.defineProperty(ClockHand.prototype, \"value\", {\n    /**\r\n     * @return Value\r\n     */\n    get: function () {\n      return this._value;\n    },\n\n    /**\r\n     * A current value clock hand is pointing to.\r\n     *\r\n     * @param value  Value\r\n     */\n    set: function (value) {\n      this.showValue(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ClockHand.prototype, \"axis\", {\n    /**\r\n     * @return Axis\r\n     */\n    get: function () {\n      return this._axis.get();\n    },\n\n    /**\r\n     * An Axis clock hand is associated with.\r\n     *\r\n     * Hand's `value` relates to values on the Axis.\r\n     *\r\n     * @param axis  Axis\r\n     */\n    set: function (axis) {\n      if (this.axis != axis) {\n        this._axis.set(axis, new MultiDisposer([axis.events.on(\"datavalidated\", this.updateValue, this, false), axis.events.on(\"datarangechanged\", this.updateValue, this, false), axis.events.on(\"dataitemsvalidated\", this.updateValue, this, false), axis.events.on(\"propertychanged\", this.invalidate, this, false)]));\n      }\n\n      if (axis) {\n        var chart = axis.chart;\n\n        if (chart) {\n          this.rotation = chart.startAngle;\n        }\n      }\n\n      this.parent = axis.renderer;\n      this.zIndex = 5;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Triggers `value` accessor, so that Hand animates to new position, in case\r\n   * value has changed.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  ClockHand.prototype.updateValue = function () {\n    this.value = this.value;\n  };\n  /**\r\n  * Processes JSON-based config before it is applied to the object.\r\n  *\r\n  * @ignore Exclude from docs\r\n  * @param config  Config\r\n  */\n\n\n  ClockHand.prototype.processConfig = function (config) {\n    if (config) {\n      // Connect clock hands with axes\n      if ($type.hasValue(config.axis) && $type.isString(config.axis) && this.map.hasKey(config.axis)) {\n        config.axis = this.map.getKey(config.axis);\n      }\n    }\n\n    _super.prototype.processConfig.call(this, config);\n  };\n\n  return ClockHand;\n}(Container);\n\nexport { ClockHand };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"ClockHand\"] = ClockHand;","map":null,"metadata":{},"sourceType":"module"}