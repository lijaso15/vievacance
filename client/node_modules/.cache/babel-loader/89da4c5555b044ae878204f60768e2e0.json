{"ast":null,"code":"/**\r\n * Module for a multi-part arched line.\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Polyline } from \"./Polyline\";\nimport { registry } from \"../Registry\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $path from \"../../core/rendering/Path\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Draws a multi-part arched line.\r\n *\r\n * @see {@link IPolyarcEvents} for a list of available events\r\n * @see {@link IPolyarcAdapters} for a list of available Adapters\r\n */\n\nvar Polyarc =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Polyarc, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function Polyarc() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"Polyarc\";\n    _this.controlPointDistance = 0.5;\n    _this.controlPointPosition = 0.5;\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Creats and adds an SVG path for the arc.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Polyarc.prototype.makePath = function () {\n    this._distance = 0;\n    var segments = this.segments;\n\n    if (segments && segments.length > 0) {\n      var path = \"\";\n      this._realSegments = [];\n\n      for (var i = 0, len = segments.length; i < len; i++) {\n        var points = segments[i];\n        var realPoints = [];\n\n        this._realSegments.push(realPoints);\n\n        if (points.length > 0) {\n          path += $path.moveTo(points[0]);\n\n          for (var p = 1; p < points.length; p++) {\n            var pointA = points[p - 1];\n            var pointB = points[p];\n            var distanceAB = $math.getDistance(pointB, pointA);\n            var cpDistance = distanceAB * this.controlPointDistance;\n            var controlPointPosition = this.controlPointPosition;\n            var angle = -$math.getAngle(pointA, pointB);\n            var cpx = pointA.x + (pointB.x - pointA.x) * controlPointPosition * 0.5 - cpDistance * $math.sin(angle);\n            var cpy = pointA.y + (pointB.y - pointA.y) * controlPointPosition * 0.5 - cpDistance * $math.cos(angle);\n            var controlPoint1 = {\n              x: cpx,\n              y: cpy\n            };\n            var cpx2 = pointA.x + (pointB.x - pointA.x) * controlPointPosition * 1.5 - cpDistance * $math.sin(angle);\n            var cpy2 = pointA.y + (pointB.y - pointA.y) * controlPointPosition * 1.5 - cpDistance * $math.cos(angle);\n            var controlPoint2 = {\n              x: cpx2,\n              y: cpy2\n            };\n            path += $path.cubicCurveTo(pointB, controlPoint1, controlPoint2); // we add a lot of points in order to get the position/angle later\n\n            var stepCount = Math.ceil(distanceAB);\n            var prevPoint = pointA;\n\n            if (stepCount > 0) {\n              for (var i_1 = 0; i_1 <= stepCount; i_1++) {\n                var point = $math.getPointOnCubicCurve(pointA, pointB, controlPoint1, controlPoint2, i_1 / stepCount);\n                realPoints.push(point);\n                this._distance += $math.getDistance(prevPoint, point);\n                prevPoint = point;\n              }\n            } else {\n              realPoints.push(pointA);\n            }\n          }\n        }\n      }\n\n      this.path = path;\n    }\n  };\n\n  Object.defineProperty(Polyarc.prototype, \"controlPointPosition\", {\n    /**\r\n     * @return Position (0-1)\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"controlPointPosition\");\n    },\n\n    /**\r\n     * Relative position along the line the control point is. (0-1)\r\n     *\r\n     * @default 0.5\r\n     * @param value  Position (0-1)\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"controlPointPosition\", value);\n      this.makePath();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Polyarc.prototype, \"controlPointDistance\", {\n    /**\r\n     * @return Distance (0-1)\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"controlPointDistance\");\n    },\n\n    /**\r\n     * Relative distance of the control point. (0-1)\r\n     *\r\n     * Default is half the length of the line. (0.5)\r\n     *\r\n     * @default 0.5\r\n     * @param value  Distance (0-1)\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"controlPointDistance\", value);\n      this.makePath();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Polyarc;\n}(Polyline);\n\nexport { Polyarc };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"Polyarc\"] = Polyarc;","map":null,"metadata":{},"sourceType":"module"}