{"ast":null,"code":"/**\r\n * XY Chart module.\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { SerialChart, SerialChartDataItem } from \"./SerialChart\";\nimport { Container } from \"../../core/Container\";\nimport { List } from \"../../core/utils/List\";\nimport { DateAxis } from \"../axes/DateAxis\";\nimport { AxisRendererX } from \"../axes/AxisRendererX\";\nimport { AxisRendererY } from \"../axes/AxisRendererY\";\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\nimport { XYSeries } from \"../series/XYSeries\";\nimport { XYCursor } from \"../cursors/XYCursor\";\nimport { Disposer } from \"../../core/utils/Disposer\";\nimport { ZoomOutButton } from \"../../core/elements/ZoomOutButton\";\nimport { percent } from \"../../core/utils/Percent\";\nimport { registry } from \"../../core/Registry\";\nimport { XYChartScrollbar } from \"../elements/XYChartScrollbar\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport * as $array from \"../../core/utils/Array\";\nimport { defaultRules, ResponsiveBreakpoints } from \"../../core/utils/Responsive\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines a [[DataItem]] for [[XYChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\n\nvar XYChartDataItem =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(XYChartDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function XYChartDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"XYChartDataItem\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  return XYChartDataItem;\n}(SerialChartDataItem);\n\nexport { XYChartDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Creates an XY chart, and any derivative chart, like Serial, Date-based, etc.\r\n *\r\n * Basically this is a chart type, that is used to display any chart\r\n * information in a square plot area.\r\n *\r\n * The horizontal and vertical scale is determined by the type of Axis.\r\n *\r\n * The plot types are determined by type of Series.\r\n *\r\n * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.XYChart);\r\n *\r\n * // Add Data\r\n * chart.data = [{\r\n * \"country\": \"USA\",\r\n * \"visits\": 3025\r\n * }, {\r\n * \t\"country\": \"China\",\r\n * \t\"visits\": 1882\r\n * }, {\r\n * \t\"country\": \"Japan\",\r\n * \t\"visits\": 1809\r\n * }];\r\n *\r\n * // Add category axis\r\n * let categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n * categoryAxis.dataFields.category = \"country\";\r\n *\r\n * // Add value axis\r\n * let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Add series\r\n * let series = chart.series.push(new am4charts.ColumnSeries());\r\n * series.name = \"Web Traffic\";\r\n * series.dataFields.categoryX = \"country\";\r\n * series.dataFields.valueY = \"visits\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.XYChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"XYChart\");\r\n *\r\n * // Add Data\r\n * chart.data = [{\r\n * \"country\": \"USA\",\r\n * \"visits\": 3025\r\n * }, {\r\n * \t\"country\": \"China\",\r\n * \t\"visits\": 1882\r\n * }, {\r\n * \t\"country\": \"Japan\",\r\n * \t\"visits\": 1809\r\n * }];\r\n *\r\n * // Add category axis\r\n * var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n * categoryAxis.dataFields.category = \"country\";\r\n *\r\n * // Add value axis\r\n * var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Add series\r\n * var series = chart.series.push(new am4charts.ColumnSeries());\r\n * series.name = \"Web Traffic\";\r\n * series.dataFields.categoryX = \"country\";\r\n * series.dataFields.valueY = \"visits\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Category axis\r\n * \t\"xAxes\": [{\r\n * \t\t\"type\": \"CategoryAxis\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Value axis\r\n * \t\"yAxes\": [{\r\n * \t\t\"type\": \"ValueAxis\"\r\n * \t}],\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"ColumnSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"categoryX\": \"country\",\r\n * \t\t\t\"valueY\": \"visits\"\r\n * \t\t},\r\n * \t\t\"name\": \"Web Traffic\"\r\n * \t}],\r\n *\r\n * \t// Cursor\r\n * \t\"cursor\": {},\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"USA\",\r\n * \t\t\"visits\": 3025\r\n * \t}, {\r\n * \t\t\"country\": \"China\",\r\n * \t\t\"visits\": 1882\r\n * \t}, {\r\n * \t\t\"country\": \"Japan\",\r\n * \t\t\"visits\": 1809\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"XYChart\");\r\n * ```\r\n *\r\n *\r\n * @see {@link IXYChartEvents} for a list of available Events\r\n * @see {@link IXYChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/} for documentation\r\n * @important\r\n */\n\nvar XYChart =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(XYChart, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function XYChart() {\n    var _this = // Init\n    _super.call(this) || this;\n    /**\r\n     * Defines the type of horizontal axis rederer.\r\n     */\n\n\n    _this._axisRendererX = AxisRendererX;\n    /**\r\n     * Defines the type of vertical axis rederer.\r\n     */\n\n    _this._axisRendererY = AxisRendererY;\n    /**\r\n     * @ignore\r\n     */\n\n    _this._seriesPoints = [];\n    _this.className = \"XYChart\"; // Set defaults\n    //this.margin(10, 10, 10, 10);\n\n    _this.maskBullets = true;\n    _this.arrangeTooltips = true; // Create main chart container\n\n    var chartContainer = _this.chartContainer;\n    chartContainer.layout = \"vertical\";\n\n    _this.padding(15, 15, 15, 15); // Create top axes container\n\n\n    var topAxesCont = chartContainer.createChild(Container);\n    topAxesCont.shouldClone = false;\n    topAxesCont.layout = \"vertical\";\n    topAxesCont.width = percent(100);\n    topAxesCont.zIndex = 1;\n    _this.topAxesContainer = topAxesCont; // Create vertical axes and plot area container\n    // Plot area and vertical axes share the whole width of the chart,\n    // so we need to put then into a separate container so that layouting\n    // engine takes care of the positioning\n\n    var yAxesAndPlotCont = chartContainer.createChild(Container);\n    yAxesAndPlotCont.shouldClone = false;\n    yAxesAndPlotCont.layout = \"horizontal\";\n    yAxesAndPlotCont.width = percent(100);\n    yAxesAndPlotCont.height = percent(100);\n    yAxesAndPlotCont.zIndex = 0;\n    _this.yAxesAndPlotContainer = yAxesAndPlotCont; // Create a container for bottom axes\n\n    var bottomAxesCont = chartContainer.createChild(Container);\n    bottomAxesCont.shouldClone = false;\n    bottomAxesCont.width = percent(100);\n    bottomAxesCont.layout = \"vertical\";\n    bottomAxesCont.zIndex = 1;\n    _this.bottomAxesContainer = bottomAxesCont; // Create a container for left-side axes\n\n    var leftAxesCont = yAxesAndPlotCont.createChild(Container);\n    leftAxesCont.shouldClone = false;\n    leftAxesCont.layout = \"horizontal\";\n    leftAxesCont.height = percent(100);\n    leftAxesCont.contentAlign = \"right\";\n    leftAxesCont.events.on(\"transformed\", _this.updateXAxesMargins, _this, false);\n    leftAxesCont.zIndex = 1;\n    _this.leftAxesContainer = leftAxesCont; // Create a container for plot area\n\n    var plotCont = yAxesAndPlotCont.createChild(Container);\n    plotCont.shouldClone = false;\n    plotCont.height = percent(100);\n    plotCont.width = percent(100); // Create transparend background for plot container so that hover works\n    // on all of it\n\n    plotCont.background.fillOpacity = 0;\n    _this.plotContainer = plotCont; // must go below plot container\n\n    _this.mouseWheelBehavior = \"none\";\n    _this._cursorContainer = plotCont; // Create a container for right-side axes\n\n    var rightAxesCont = yAxesAndPlotCont.createChild(Container);\n    rightAxesCont.shouldClone = false;\n    rightAxesCont.layout = \"horizontal\";\n    rightAxesCont.height = percent(100);\n    rightAxesCont.zIndex = 1;\n    rightAxesCont.events.on(\"transformed\", _this.updateXAxesMargins, _this, false);\n    _this.rightAxesContainer = rightAxesCont;\n    _this.seriesContainer.parent = plotCont;\n    _this.bulletsContainer.parent = plotCont;\n    var zoomOutButton = plotCont.createChild(ZoomOutButton);\n    zoomOutButton.shouldClone = false;\n    zoomOutButton.align = \"right\";\n    zoomOutButton.valign = \"top\";\n    zoomOutButton.zIndex = Number.MAX_SAFE_INTEGER;\n    zoomOutButton.marginTop = 5;\n    zoomOutButton.marginRight = 5;\n    zoomOutButton.hide(0);\n    _this.zoomOutButton = zoomOutButton;\n    _this._bulletMask = _this.plotContainer; // Apply theme\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Sets defaults that instantiate some objects that rely on parent, so they\r\n   * cannot be set in constructor.\r\n   */\n\n\n  XYChart.prototype.applyInternalDefaults = function () {\n    _super.prototype.applyInternalDefaults.call(this);\n\n    this.zoomOutButton.exportable = false; // Add a default screen reader title for accessibility\n    // This will be overridden in screen reader if there are any `titles` set\n\n    if (!$type.hasValue(this.readerTitle)) {\n      this.readerTitle = this.language.translate(\"X/Y chart\");\n    }\n  };\n  /**\r\n   * Draws the chart.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  XYChart.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n\n    this.seriesContainer.toFront();\n    this.bulletsContainer.toFront();\n\n    if (this.maskBullets) {\n      this.bulletsContainer.mask = this._bulletMask;\n    }\n\n    this.updateSeriesLegend();\n  };\n  /**\r\n   * Triggers a redrawing of all chart's series.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  XYChart.prototype.updatePlotElements = function () {\n    $iter.each(this.series.iterator(), function (series) {\n      series.invalidate();\n    });\n  };\n  /**\r\n   * Triggers data (re)validation which in turn can cause a redraw of the\r\n   * whole chart or just aprticular series / elements.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  XYChart.prototype.validateData = function () {\n    // tell axes that data changed\n    if (this._parseDataFrom == 0) {\n      $iter.each(this.xAxes.iterator(), function (axis) {\n        axis.dataChangeUpdate();\n      });\n      $iter.each(this.yAxes.iterator(), function (axis) {\n        axis.dataChangeUpdate();\n      });\n      $iter.each(this.series.iterator(), function (series) {\n        series.dataChangeUpdate();\n      });\n    }\n\n    _super.prototype.validateData.call(this);\n  };\n  /**\r\n   * Updates margins for horizontal axes based on settings and available space.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  XYChart.prototype.updateXAxesMargins = function () {\n    var leftAxesWidth = this.leftAxesContainer.measuredWidth;\n    var rightAxesWidth = this.rightAxesContainer.measuredWidth;\n    var bottomAxesCont = this.bottomAxesContainer;\n\n    if (bottomAxesCont.paddingLeft != leftAxesWidth || bottomAxesCont.paddingRight != rightAxesWidth) {\n      bottomAxesCont.paddingLeft = leftAxesWidth;\n      bottomAxesCont.paddingRight = rightAxesWidth;\n    }\n\n    var topAxesCont = this.topAxesContainer;\n\n    if (topAxesCont.paddingLeft != leftAxesWidth || topAxesCont.paddingRight != rightAxesWidth) {\n      topAxesCont.paddingLeft = leftAxesWidth;\n      topAxesCont.paddingRight = rightAxesWidth;\n    }\n  };\n  /**\r\n   * Triggers an update on the horizontal axis when one of its properties\r\n   * change.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event An event object\r\n   */\n\n\n  XYChart.prototype.handleXAxisChange = function (event) {\n    this.updateXAxis(event.target);\n  };\n  /**\r\n   * Triggers an update on the vertical axis when one of its properties\r\n   * change.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event An event object\r\n   */\n\n\n  XYChart.prototype.handleYAxisChange = function (event) {\n    this.updateYAxis(event.target);\n  };\n  /**\r\n   * Sets up a new horizontal (X) axis when it is added to the chart.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event  Axis insert event\r\n   */\n\n\n  XYChart.prototype.processXAxis = function (event) {\n    var axis = event.newValue;\n    axis.chart = this;\n\n    if (!axis.renderer) {\n      axis.renderer = new this._axisRendererX();\n      axis.renderer.observe([\"opposite\", \"inside\", \"inversed\", \"minGridDistance\"], this.handleXAxisChange, this, false);\n    }\n\n    axis.axisLetter = \"X\";\n    axis.events.on(\"startendchanged\", this.handleXAxisRangeChange, this, false); //axis.events.on(\"endchanged\", this.handleXAxisRangeChange, this, false);\n    // Although axis does not use data directly, we set dataProvider here\n    // (but not add to chart data users) to hold up rendering before data\n    // is parsed (system handles this)\n\n    axis.dataProvider = this;\n    this.updateXAxis(axis.renderer);\n    this.processAxis(axis);\n  };\n  /**\r\n   * Sets up a new vertical (Y) axis when it is added to the chart.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event Axis insert event\r\n   */\n\n\n  XYChart.prototype.processYAxis = function (event) {\n    var axis = event.newValue;\n    axis.chart = this;\n\n    if (!axis.renderer) {\n      axis.renderer = new this._axisRendererY();\n      axis.renderer.observe([\"opposite\", \"inside\", \"inversed\", \"minGridDistance\"], this.handleYAxisChange, this, false);\n    }\n\n    axis.axisLetter = \"Y\";\n    axis.events.on(\"startendchanged\", this.handleYAxisRangeChange, this, false); //axis.events.on(\"endchanged\", this.handleYAxisRangeChange, this, false);\n    // Although axis does not use data directly, we set dataProvider here\n    // (but not add to chart data users) to hold up rendering before data\n    // is parsed (system handles this)\n\n    axis.dataProvider = this;\n    this.updateYAxis(axis.renderer);\n    this.processAxis(axis);\n  };\n  /**\r\n   * Updates horizontal (X) scrollbar and other horizontal axis whenever axis'\r\n   * value range changes.\r\n   */\n\n\n  XYChart.prototype.handleXAxisRangeChange = function () {\n    var range = this.getCommonAxisRange(this.xAxes);\n\n    if (this.scrollbarX) {\n      this.zoomAxes(this.xAxes, range, true);\n    }\n\n    this.toggleZoomOutButton();\n    this.updateScrollbar(this.scrollbarX, range);\n  };\n  /**\r\n   * Shows or hides the Zoom Out button depending on whether the chart is fully\r\n   * zoomed out or not.\r\n   */\n\n\n  XYChart.prototype.toggleZoomOutButton = function () {\n    if (this.zoomOutButton) {\n      var show_1 = false;\n      $iter.eachContinue(this.xAxes.iterator(), function (axis) {\n        if ($math.round(axis.start, 3) != 0 || $math.round(axis.end, 3) != 1) {\n          show_1 = true;\n          return false;\n        }\n\n        return true;\n      });\n      $iter.eachContinue(this.yAxes.iterator(), function (axis) {\n        if ($math.round(axis.start, 3) != 0 || $math.round(axis.end, 3) != 1) {\n          show_1 = true;\n          return false;\n        }\n\n        return true;\n      });\n\n      if (!this.seriesAppeared) {\n        show_1 = false;\n      }\n\n      if (show_1) {\n        this.zoomOutButton.show();\n      } else {\n        this.zoomOutButton.hide();\n      }\n    }\n  };\n  /**\r\n   * @ignore\r\n   * moved this check to a separate method so that we could override it in TreeMapSeries\r\n   */\n\n\n  XYChart.prototype.seriesAppeared = function () {\n    var appeared = false;\n    $iter.each(this.series.iterator(), function (series) {\n      if (!series.appeared) {\n        appeared = false;\n        return false;\n      }\n    });\n    return appeared;\n  };\n  /**\r\n   * Updates vertical (Y) scrollbar and other horizontal axis whenever axis'\r\n   * value range changes.\r\n   */\n\n\n  XYChart.prototype.handleYAxisRangeChange = function () {\n    var range = this.getCommonAxisRange(this.yAxes);\n\n    if (this.scrollbarY) {\n      this.zoomAxes(this.yAxes, range, true);\n    }\n\n    this.toggleZoomOutButton();\n    this.updateScrollbar(this.scrollbarY, range);\n  };\n  /**\r\n   * Updates a relative scrollbar whenever data range of the axis changes.\r\n   *\r\n   * @param scrollbar  Scrollbar instance\r\n   * @param range      New data (values) range of the axis\r\n   */\n\n\n  XYChart.prototype.updateScrollbar = function (scrollbar, range) {\n    if (scrollbar) {\n      scrollbar.skipRangeEvents();\n      scrollbar.start = range.start;\n      scrollbar.end = range.end;\n    }\n  };\n  /**\r\n   * Returns a common range of values between a list of axes.\r\n   *\r\n   * This is used to synchronize the zoom between multiple axes.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param axes  A list of axes\r\n   * @return Common value range\r\n   */\n\n\n  XYChart.prototype.getCommonAxisRange = function (axes) {\n    var start;\n    var end;\n    $iter.each(axes.iterator(), function (axis) {\n      var axisStart = axis.start;\n      var axisEnd = axis.end;\n\n      if (axis.renderer.inversed) {\n        axisStart = 1 - axis.end;\n        axisEnd = 1 - axis.start;\n      }\n\n      if (!$type.isNumber(start) || axisStart < start) {\n        start = axisStart;\n      }\n\n      if (!$type.isNumber(end) || axisEnd > end) {\n        end = axisEnd;\n      }\n    });\n    return {\n      start: start,\n      end: end\n    };\n  };\n  /**\r\n   * Triggers (re)rendering of the horizontal (X) axis.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param axis  Axis\r\n   */\n\n\n  XYChart.prototype.updateXAxis = function (renderer) {\n    var axis = renderer.axis;\n\n    if (renderer.opposite) {\n      axis.parent = this.topAxesContainer;\n      axis.toFront();\n    } else {\n      axis.parent = this.bottomAxesContainer;\n      axis.toBack();\n    }\n\n    if (axis.renderer) {\n      axis.renderer.processRenderer();\n    }\n  };\n  /**\r\n   * Triggers (re)rendering of the vertical (Y) axis.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param axis  Axis\r\n   */\n\n\n  XYChart.prototype.updateYAxis = function (renderer) {\n    var axis = renderer.axis;\n\n    if (renderer.opposite) {\n      axis.parent = this.rightAxesContainer;\n      axis.toBack();\n    } else {\n      axis.parent = this.leftAxesContainer;\n      axis.toFront();\n    }\n\n    if (axis.renderer) {\n      axis.renderer.processRenderer();\n    }\n  };\n  /**\r\n   * Decorates an Axis for use with this chart, e.g. sets proper renderer\r\n   * and containers for placement.\r\n   *\r\n   * @param axis  Axis\r\n   */\n\n\n  XYChart.prototype.processAxis = function (axis) {\n    var _this = this; // Value axis does not use data directly, only category axis does\n\n\n    if (axis instanceof CategoryAxis) {\n      this._dataUsers.moveValue(axis);\n    }\n\n    var renderer = axis.renderer;\n    renderer.gridContainer.parent = this.plotContainer;\n    renderer.gridContainer.toBack();\n    renderer.breakContainer.parent = this.plotContainer;\n    renderer.breakContainer.toFront();\n    renderer.breakContainer.zIndex = 10;\n    axis.addDisposer(new Disposer(function () {\n      _this.dataUsers.removeValue(axis);\n    }));\n    this.plotContainer.events.on(\"maxsizechanged\", function () {\n      if (_this.inited) {\n        axis.invalidateDataItems();\n\n        _this.updateSeriesMasks();\n      }\n    }, axis, false);\n  };\n  /**\r\n   * This is done because for some reason IE doesn't change mask if path of a\r\n   * mask changes.\r\n   */\n\n\n  XYChart.prototype.updateSeriesMasks = function () {\n    if ($utils.isIE()) {\n      this.series.each(function (series) {\n        var mask = series.mainContainer.mask;\n        series.mainContainer.mask = undefined;\n        series.mainContainer.mask = mask;\n      });\n    }\n  };\n\n  Object.defineProperty(XYChart.prototype, \"xAxes\", {\n    /**\r\n     * A list of horizontal (X) axes.\r\n     *\r\n     * @return List of axes\r\n     */\n    get: function () {\n      if (!this._xAxes) {\n        this._xAxes = new List();\n\n        this._xAxes.events.on(\"inserted\", this.processXAxis, this, false);\n\n        this._xAxes.events.on(\"removed\", this.handleAxisRemoval, this, false);\n      }\n\n      return this._xAxes;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  XYChart.prototype.handleAxisRemoval = function (event) {\n    var axis = event.oldValue;\n    this.dataUsers.removeValue(axis); // need to remove, as it might not be disposed\n\n    if (axis.autoDispose) {\n      axis.dispose();\n    }\n  };\n\n  Object.defineProperty(XYChart.prototype, \"yAxes\", {\n    /**\r\n     * A list of vertical (Y) axes.\r\n     *\r\n     * @return List of axes\r\n     */\n    get: function () {\n      if (!this._yAxes) {\n        this._yAxes = new List();\n\n        this._yAxes.events.on(\"inserted\", this.processYAxis, this, false);\n\n        this._yAxes.events.on(\"removed\", this.handleAxisRemoval, this, false);\n      }\n\n      return this._yAxes;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Decorates a new [[XYSeries]] object with required parameters when it is\r\n   * added to the chart.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event  Event\r\n   */\n\n  XYChart.prototype.handleSeriesAdded = function (event) {\n    try {\n      _super.prototype.handleSeriesAdded.call(this, event);\n\n      var series = event.newValue;\n\n      if (this.xAxes.length == 0 || this.yAxes.length == 0) {\n        registry.removeFromInvalidComponents(series);\n        series.dataInvalid = false;\n      }\n\n      $utils.used(series.xAxis); // this is enough to get axis, handled in getter\n\n      $utils.used(series.yAxis); // this is enough to get axis, handled in getter\n\n      if (series.fill == undefined) {\n        series.fill = this.colors.next();\n      }\n\n      if (series.stroke == undefined) {\n        series.stroke = series.fill;\n      }\n    } catch (e) {\n      this.raiseCriticalError(e);\n    }\n  };\n\n  Object.defineProperty(XYChart.prototype, \"cursor\", {\n    /**\r\n     * @return Cursor\r\n     */\n    get: function () {\n      return this._cursor;\n    },\n\n    /**\r\n     * Chart's [[Cursor]].\r\n     *\r\n     * @param cursor  Cursor\r\n     */\n    set: function (cursor) {\n      if (this._cursor != cursor) {\n        if (this._cursor) {\n          this.removeDispose(this._cursor);\n        }\n\n        this._cursor = cursor;\n\n        if (cursor) {\n          // TODO this is wrong, fix it\n          this._disposers.push(cursor);\n\n          cursor.chart = this;\n          cursor.shouldClone = false;\n          cursor.parent = this._cursorContainer;\n          cursor.events.on(\"cursorpositionchanged\", this.handleCursorPositionChange, this, false);\n          cursor.events.on(\"zoomstarted\", this.handleCursorZoomStart, this, false);\n          cursor.events.on(\"zoomended\", this.handleCursorZoomEnd, this, false);\n          cursor.events.on(\"panstarted\", this.handleCursorPanStart, this, false);\n          cursor.events.on(\"panning\", this.handleCursorPanning, this, false);\n          cursor.events.on(\"panended\", this.handleCursorPanEnd, this, false);\n          cursor.events.on(\"behaviorcanceled\", this.handleCursorCanceled, this, false);\n          cursor.events.on(\"hidden\", this.handleHideCursor, this, false);\n          cursor.zIndex = Number.MAX_SAFE_INTEGER - 1;\n\n          if (this.tapToActivate) {\n            // We need this in order to setup cursor properly\n            this.setTapToActivate(this.tapToActivate);\n          }\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Creates and returns a new [[Cursor]] suitable for this chart type.\r\n   *\r\n   * @return New cursor\r\n   */\n\n  XYChart.prototype.createCursor = function () {\n    return new XYCursor();\n  };\n  /**\r\n   * Performs tasks when the cursor's position changes, e.g. shows proper\r\n   * tooltips on axes and series.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  XYChart.prototype.handleCursorPositionChange = function () {\n    var cursor = this.cursor;\n\n    if (cursor.visible && !cursor.isHiding) {\n      var xPosition = this.cursor.xPosition;\n      var yPosition = this.cursor.yPosition;\n      this.showSeriesTooltip({\n        x: xPosition,\n        y: yPosition\n      });\n      var exceptAxis = void 0;\n      var snapToSeries = cursor.snapToSeries;\n\n      if (snapToSeries) {\n        if (snapToSeries.baseAxis == snapToSeries.xAxis) {\n          exceptAxis = snapToSeries.yAxis;\n        }\n\n        if (snapToSeries.baseAxis == snapToSeries.yAxis) {\n          exceptAxis = snapToSeries.xAxis;\n        }\n      }\n\n      this._seriesPoints = [];\n      this.showAxisTooltip(this.xAxes, xPosition, exceptAxis);\n      this.showAxisTooltip(this.yAxes, yPosition, exceptAxis);\n      this.sortSeriesTooltips(this._seriesPoints);\n    }\n  };\n  /**\r\n   * Hides all cursor-related tooltips when the cursor itself is hidden.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  XYChart.prototype.handleHideCursor = function () {\n    this.hideObjectTooltip(this.xAxes);\n    this.hideObjectTooltip(this.yAxes);\n    this.hideObjectTooltip(this.series);\n    this.updateSeriesLegend();\n  };\n  /**\r\n   * Updates values for each series' legend item.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  XYChart.prototype.updateSeriesLegend = function () {\n    $iter.each(this.series.iterator(), function (series) {\n      series.updateLegendValue();\n    });\n  };\n  /**\r\n   * Hides a tooltip for a list of objects.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param sprites  A list of sprites to hide tooltip for\r\n   */\n\n\n  XYChart.prototype.hideObjectTooltip = function (sprites) {\n    $iter.each(sprites.iterator(), function (sprite) {\n      sprite.hideTooltip(0);\n    });\n  };\n  /**\r\n   * Shows a tooltip for all chart's series, using specific coordinates as a\r\n   * reference point.\r\n   *\r\n   * The tooltip might be shown at different coordinates depending on the\r\n   * actual data point's position, overlapping with other tooltips, etc.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param position  Reference point\r\n   */\n\n\n  XYChart.prototype.showSeriesTooltip = function (position) {\n    var _this = this;\n\n    if (!position) {\n      this.series.each(function (series) {\n        series.hideTooltip();\n      });\n      return;\n    }\n\n    var seriesPoints = [];\n    this.series.each(function (series) {\n      //if (series.tooltipText || series.tooltipHTML) { // not good, bullets are not hovered then\n      if (series.xAxis instanceof DateAxis && series.xAxis.snapTooltip || series.yAxis instanceof DateAxis && series.yAxis.snapTooltip) {// void\n      } else {\n        var point = series.showTooltipAtPosition(position.x, position.y);\n\n        if (point) {\n          series.tooltip.setBounds({\n            x: 0,\n            y: 0,\n            width: _this.pixelWidth,\n            height: _this.pixelHeight\n          });\n          seriesPoints.push({\n            series: series,\n            point: point\n          });\n        }\n      } //}\n\n    });\n\n    if (this.arrangeTooltips) {\n      this.sortSeriesTooltips(seriesPoints);\n    }\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  XYChart.prototype.sortSeriesTooltips = function (seriesPoints) {\n    var topLeft = $utils.spritePointToSvg({\n      x: -0.5,\n      y: -0.5\n    }, this.plotContainer);\n    var bottomRight = $utils.spritePointToSvg({\n      x: this.plotContainer.pixelWidth + 0.5,\n      y: this.plotContainer.pixelHeight + 0.5\n    }, this.plotContainer);\n    var sum = 0;\n    var filteredSeriesPoints = [];\n    $array.each(seriesPoints, function (seriesPoint) {\n      var point = seriesPoint.point;\n\n      if (point && $math.isInRectangle(point, {\n        x: topLeft.x,\n        y: topLeft.y,\n        width: bottomRight.x - topLeft.x,\n        height: bottomRight.y - topLeft.y\n      })) {\n        filteredSeriesPoints.push({\n          point: point,\n          series: seriesPoint.series\n        });\n        sum += point.y;\n      }\n    });\n    seriesPoints = filteredSeriesPoints;\n    seriesPoints.sort(function (a, b) {\n      if (a.point.y > b.point.y) {\n        return 1;\n      } else if (a.point.y < b.point.y) {\n        return -1;\n      } else {\n        return 0;\n      }\n    });\n    var averageY = sum / seriesPoints.length;\n    var maxY = $utils.svgPointToDocument({\n      x: 0,\n      y: 0\n    }, this.svgContainer.SVGContainer).y;\n\n    if (seriesPoints.length > 0) {\n      var top_1 = topLeft.y;\n      var bottom = bottomRight.y; // TODO is this needed ?\n\n      $utils.spritePointToDocument({\n        x: 0,\n        y: top_1\n      }, this);\n      var dropped = false;\n\n      if (averageY > top_1 + (bottom - top_1) / 2) {\n        var nextHeight = bottom;\n\n        for (var i = seriesPoints.length - 1; i >= 0; i--) {\n          var series = seriesPoints[i].series;\n          var tooltip = series.tooltip;\n          var pointY = seriesPoints[i].point.y;\n          tooltip.setBounds({\n            x: 0,\n            y: -maxY,\n            width: this.pixelWidth,\n            height: nextHeight + maxY\n          });\n\n          if (tooltip.invalid) {\n            tooltip.validate();\n          }\n\n          tooltip.toBack();\n          nextHeight = $utils.spritePointToSvg({\n            x: 0,\n            y: tooltip.label.pixelY - tooltip.pixelY + pointY - tooltip.pixelMarginTop\n          }, tooltip).y;\n\n          if (nextHeight < -maxY) {\n            dropped = true;\n            break;\n          }\n        }\n      }\n\n      if (averageY <= top_1 + (bottom - top_1) / 2 || dropped) {\n        var nextY = top_1;\n\n        for (var i = 0, len = seriesPoints.length; i < len; i++) {\n          var series = seriesPoints[i].series;\n          var pointY = seriesPoints[i].point.y;\n          var tooltip = series.tooltip;\n          tooltip.setBounds({\n            x: 0,\n            y: nextY,\n            width: this.pixelWidth,\n            height: bottom\n          });\n\n          if (tooltip.invalid) {\n            tooltip.validate();\n          }\n\n          tooltip.toBack();\n          nextY = $utils.spritePointToSvg({\n            x: 0,\n            y: tooltip.label.pixelY + tooltip.label.measuredHeight - tooltip.pixelY + pointY + tooltip.pixelMarginBottom\n          }, tooltip).y;\n        }\n      }\n    }\n  };\n  /**\r\n   * Shows tooltips for a list of axes at specific position.\r\n   *\r\n   * Position might be X coordinate for horizontal axes, and Y coordinate for\r\n   * vertical axes.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param axes      List of axes to show tooltip on\r\n   * @param position  Position (px)\r\n   */\n\n\n  XYChart.prototype.showAxisTooltip = function (axes, position, except) {\n    var _this = this;\n\n    $iter.each(axes.iterator(), function (axis) {\n      if (axis != except) {\n        if (_this.dataItems.length > 0 || axis.dataItems.length > 0) {\n          axis.showTooltipAtPosition(position);\n        }\n      }\n    });\n  };\n  /**\r\n   * Recalculates the value range for the axis taking into account zoom level & inversed.\r\n   *\r\n   * @param axis   Axis\r\n   * @param range  Range\r\n   * @return Modified range\r\n   */\n\n\n  XYChart.prototype.getUpdatedRange = function (axis, range) {\n    if (!axis) {\n      return;\n    }\n\n    var start;\n    var end;\n    var inversed = axis.renderer.inversed;\n\n    if (axis.renderer instanceof AxisRendererY) {\n      range = $math.invertRange(range);\n    }\n\n    if (inversed) {\n      $math.invertRange(range);\n      start = 1 - axis.end;\n      end = 1 - axis.start;\n    } else {\n      start = axis.start;\n      end = axis.end;\n    }\n\n    var difference = end - start;\n    return {\n      start: start + range.start * difference,\n      end: start + range.end * difference\n    };\n  };\n  /**\r\n   * Performs zoom and other operations when user finishes zooming using chart\r\n   * cursor, e.g. zooms axes.\r\n   *\r\n   * @param event Cursor's event\r\n   */\n\n\n  XYChart.prototype.handleCursorZoomEnd = function (event) {\n    var cursor = this.cursor;\n    var behavior = cursor.behavior;\n\n    if (behavior == \"zoomX\" || behavior == \"zoomXY\") {\n      var xRange = cursor.xRange;\n\n      if (xRange && this.xAxes.length > 0) {\n        xRange = this.getUpdatedRange(this.xAxes.getIndex(0), xRange);\n        xRange.priority = \"start\";\n        this.zoomAxes(this.xAxes, xRange);\n      }\n    }\n\n    if (behavior == \"zoomY\" || behavior == \"zoomXY\") {\n      var yRange = cursor.yRange;\n\n      if (yRange && this.yAxes.length > 0) {\n        yRange = this.getUpdatedRange(this.yAxes.getIndex(0), yRange);\n        yRange.priority = \"start\";\n        this.zoomAxes(this.yAxes, yRange);\n      }\n    }\n\n    this.handleHideCursor();\n  };\n  /**\r\n   * Performs zoom and other operations when user is panning chart plot using chart cursor.\r\n   *\r\n   * @param event Cursor's event\r\n   */\n\n\n  XYChart.prototype.handleCursorPanStart = function (event) {\n    var xAxis = this.xAxes.getIndex(0);\n\n    if (xAxis) {\n      this._panStartXRange = {\n        start: xAxis.start,\n        end: xAxis.end\n      };\n    }\n\n    var yAxis = this.yAxes.getIndex(0);\n\n    if (yAxis) {\n      this._panStartYRange = {\n        start: yAxis.start,\n        end: yAxis.end\n      };\n    }\n  };\n  /**\r\n   * Performs zoom and other operations when user ends panning\r\n   *\r\n   * @param event Cursor's event\r\n   */\n\n\n  XYChart.prototype.handleCursorPanEnd = function (event) {\n    var cursor = this.cursor;\n    var behavior = cursor.behavior;\n\n    if (this._panEndXRange && (behavior == \"panX\" || behavior == \"panXY\")) {\n      var panEndRange = this._panEndXRange;\n      var delta = 0;\n\n      if (panEndRange.start < 0) {\n        delta = panEndRange.start;\n      }\n\n      if (panEndRange.end > 1) {\n        delta = panEndRange.end - 1;\n      }\n\n      this.zoomAxes(this.xAxes, {\n        start: panEndRange.start - delta,\n        end: panEndRange.end - delta\n      }, false, true);\n      this._panEndXRange = undefined;\n      this._panStartXRange = undefined;\n    }\n\n    if (this._panEndYRange && (behavior == \"panY\" || behavior == \"panXY\")) {\n      var panEndRange = this._panEndYRange;\n      var delta = 0;\n\n      if (panEndRange.start < 0) {\n        delta = panEndRange.start;\n      }\n\n      if (panEndRange.end > 1) {\n        delta = panEndRange.end - 1;\n      }\n\n      this.zoomAxes(this.yAxes, {\n        start: panEndRange.start - delta,\n        end: panEndRange.end - delta\n      }, false, true);\n      this._panEndYRange = undefined;\n      this._panStartYRange = undefined;\n    }\n  };\n\n  XYChart.prototype.handleCursorCanceled = function () {\n    this._panEndXRange = undefined;\n    this._panStartXRange = undefined;\n  };\n  /**\r\n   * Performs zoom and other operations when user is panning chart plot using chart cursor.\r\n   *\r\n   * @param event Cursor's event\r\n   */\n\n\n  XYChart.prototype.handleCursorPanning = function (event) {\n    var cursor = this.cursor;\n    var behavior = cursor.behavior;\n    var maxPanOut = cursor.maxPanOut;\n\n    if (this._panStartXRange && (behavior == \"panX\" || behavior == \"panXY\")) {\n      var panStartRange = this._panStartXRange;\n      var range = cursor.xRange;\n      var axisRange = this.getCommonAxisRange(this.xAxes);\n      var difference = panStartRange.end - panStartRange.start;\n      var delta = range.start * (axisRange.end - axisRange.start);\n      var newStart = Math.max(-maxPanOut, delta + panStartRange.start);\n      var newEnd = Math.min(delta + panStartRange.end, 1 + maxPanOut);\n\n      if (newStart <= 0) {\n        newEnd = newStart + difference;\n      }\n\n      if (newEnd >= 1) {\n        newStart = newEnd - difference;\n      }\n\n      var newRange = {\n        start: newStart,\n        end: newEnd\n      };\n      this._panEndXRange = newRange;\n      this.zoomAxes(this.xAxes, newRange, false, false, cursor.maxPanOut);\n    }\n\n    if (this._panStartYRange && (behavior == \"panY\" || behavior == \"panXY\")) {\n      var panStartRange = this._panStartYRange;\n      var range = cursor.yRange;\n      var axisRange = this.getCommonAxisRange(this.yAxes);\n      var difference = panStartRange.end - panStartRange.start;\n      var delta = range.start * (axisRange.end - axisRange.start);\n      var newStart = Math.max(-maxPanOut, delta + panStartRange.start);\n      var newEnd = Math.min(delta + panStartRange.end, 1 + maxPanOut);\n\n      if (newStart <= 0) {\n        newEnd = newStart + difference;\n      }\n\n      if (newEnd >= 1) {\n        newStart = newEnd - difference;\n      }\n\n      var newRange = {\n        start: newStart,\n        end: newEnd\n      };\n      this._panEndYRange = newRange;\n      this.zoomAxes(this.yAxes, newRange, false, false, cursor.maxPanOut);\n    }\n\n    this.handleHideCursor();\n  };\n  /**\r\n   * Performs zoom and other operations when user starts zooming using chart\r\n   * cursor, e.g. zooms axes.\r\n   *\r\n   * @param event Cursor's event\r\n   */\n\n\n  XYChart.prototype.handleCursorZoomStart = function (event) {// Nothing here\n    // This method is here only as a \"placeholder\" for extending classes to\n    // override if necessary\n  };\n\n  Object.defineProperty(XYChart.prototype, \"scrollbarX\", {\n    /**\r\n     * @return Scrollbar\r\n     */\n    get: function () {\n      return this._scrollbarX;\n    },\n\n    /**\r\n     * Horizontal (X) scrollbar.\r\n     *\r\n     * @param scrollbar Scrollbar\r\n     */\n    set: function (scrollbar) {\n      var _this = this;\n\n      if (this._scrollbarX) {\n        this.removeDispose(this._scrollbarX);\n      }\n\n      this._scrollbarX = scrollbar;\n\n      if (scrollbar) {\n        this._disposers.push(scrollbar);\n\n        scrollbar.parent = this.topAxesContainer;\n        scrollbar.shouldClone = false;\n        scrollbar.startGrip.exportable = false;\n        scrollbar.endGrip.exportable = false;\n        scrollbar.toBack();\n        scrollbar.orientation = \"horizontal\";\n        scrollbar.events.on(\"rangechanged\", this.handleXScrollbarChange, this, false); // accessibility related\n\n        scrollbar.adapter.add(\"positionValue\", function (arg) {\n          var xAxis = _this.xAxes.getIndex(0);\n\n          if (xAxis) {\n            arg.value = xAxis.getPositionLabel(arg.position);\n          }\n\n          return arg;\n        });\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYChart.prototype, \"scrollbarY\", {\n    /**\r\n     * @return Scrollbar\r\n     */\n    get: function () {\n      return this._scrollbarY;\n    },\n\n    /**\r\n     * Vertical (Y) scrollbar.\r\n     *\r\n     * @param scrollbar Scrollbar\r\n     */\n    set: function (scrollbar) {\n      var _this = this;\n\n      if (this._scrollbarY) {\n        this.removeDispose(this._scrollbarY);\n      }\n\n      this._scrollbarY = scrollbar;\n\n      if (scrollbar) {\n        this._disposers.push(scrollbar);\n\n        scrollbar.parent = this.rightAxesContainer;\n        scrollbar.startGrip.exportable = false;\n        scrollbar.shouldClone = false;\n        scrollbar.endGrip.exportable = false;\n        scrollbar.toFront();\n        scrollbar.orientation = \"vertical\";\n        scrollbar.events.on(\"rangechanged\", this.handleYScrollbarChange, this, false); // accessibility related\n\n        scrollbar.adapter.add(\"positionValue\", function (arg) {\n          var yAxis = _this.yAxes.getIndex(0);\n\n          if (yAxis) {\n            arg.value = yAxis.getPositionLabel(arg.position);\n          }\n\n          return arg;\n        });\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Zooms axes affected by the horizontal (X) scrollbar when the selection\r\n   * on it changes.\r\n   *\r\n   * @param event Scrollbar range change event\r\n   */\n\n  XYChart.prototype.handleXScrollbarChange = function (event) {\n    if (this.inited) {\n      var scrollbar = event.target;\n      var range = scrollbar.range;\n\n      if (range.end == 1) {\n        range.priority = \"end\";\n      }\n\n      if (range.start == 0) {\n        range.priority = \"start\";\n      }\n\n      range = this.zoomAxes(this.xAxes, range);\n      scrollbar.fixRange(range);\n    }\n  };\n  /**\r\n   * Zooms axes affected by the vertical (Y) scrollbar when the selection\r\n   * on it changes.\r\n   *\r\n   * @param event Scrollbar range change event\r\n   */\n\n\n  XYChart.prototype.handleYScrollbarChange = function (event) {\n    if (this.inited) {\n      var scrollbar = event.target;\n      var range = scrollbar.range;\n\n      if (range.end == 1) {\n        range.priority = \"end\";\n      }\n\n      if (range.start == 0) {\n        range.priority = \"start\";\n      }\n\n      range = this.zoomAxes(this.yAxes, range);\n      scrollbar.fixRange(range);\n    }\n  };\n  /**\r\n   * Zooms axes that are affected by to specific relative range.\r\n   *\r\n   * @param axes       List of axes to zoom\r\n   * @param range      Range of values to zoom to (0-1)\r\n   * @param instantly  If set to `true` will skip zooming animation\r\n   * @return Recalculated range that is common to all involved axes\r\n   */\n\n\n  XYChart.prototype.zoomAxes = function (axes, range, instantly, round, declination) {\n    var realRange = {\n      start: 0,\n      end: 1\n    };\n    this.showSeriesTooltip(); // hides\n\n    if (!this.dataInvalid) {\n      $iter.each(axes.iterator(), function (axis) {\n        if (axis.renderer.inversed) {\n          range = $math.invertRange(range);\n        }\n\n        axis.hideTooltip(0);\n\n        if (round) {\n          //let diff = range.end - range.start;\n          range.start = axis.roundPosition(range.start + 0.0001, 0);\n          range.end = axis.roundPosition(range.end + 0.0001, 0);\n        }\n\n        var axisRange = axis.zoom(range, instantly, instantly, declination);\n\n        if (axis.renderer.inversed) {\n          axisRange = $math.invertRange(axisRange);\n        }\n\n        realRange = axisRange;\n      });\n    }\n\n    return realRange;\n  };\n\n  Object.defineProperty(XYChart.prototype, \"maskBullets\", {\n    /**\r\n     * @return Mask bullet container?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"maskBullets\");\n    },\n\n    /**\r\n     * Indicates if bullet container is masked.\r\n     *\r\n     * If it is set to `true`, any bullets that do not fit into bullet container\r\n     * will be clipped off. Settting to `false` will allow bullets to \"spill out\"\r\n     * of the plot area so they are not cut off.\r\n     *\r\n     * @param value Mask bullet container?\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"maskBullets\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYChart.prototype, \"arrangeTooltips\", {\n    /**\r\n     * @return Arrange tooltips?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"arrangeTooltips\");\n    },\n\n    /**\r\n     * Indicates if chart should arrange series tooltips so that they would not\r\n     * overlap.\r\n     *\r\n     * If set to `true` (default), the chart will adjust vertical positions of\r\n     * all simultaneously shown tooltips to avoid overlapping.\r\n     *\r\n     * However, if you have a vertically-arranged chart, it might not make sense,\r\n     * because tooltips would most probably not be aligned horizontally. In this\r\n     * case it would probably be a good idea to set this setting to `false`.\r\n     *\r\n     * @default true\r\n     * @param value Arrange tooltips?\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"arrangeTooltips\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Handles mouse wheel event.\r\n   *\r\n   * @param event  Original event\r\n   */\n\n  XYChart.prototype.handleWheel = function (event) {\n    var plotContainer = this.plotContainer;\n    var svgPoint = $utils.documentPointToSvg(event.point, this.htmlContainer, this.svgContainer.cssScale);\n    var plotPoint = $utils.svgPointToSprite(svgPoint, plotContainer);\n    var shift = event.shift.y;\n    var rangeX = this.getCommonAxisRange(this.xAxes);\n    var rangeY = this.getCommonAxisRange(this.yAxes);\n    var shiftStep = 0.05;\n    var maxPanOut = 0;\n    var mouseWheelBehavior = this.mouseWheelBehavior;\n\n    if (mouseWheelBehavior == \"panX\" || mouseWheelBehavior == \"panXY\") {\n      var differenceX = rangeX.end - rangeX.start;\n      var newStartX = Math.max(-maxPanOut, rangeX.start + shiftStep * shift / 100);\n      var newEndX = Math.min(rangeX.end + shiftStep * shift / 100, 1 + maxPanOut);\n\n      if (newStartX <= 0) {\n        newEndX = newStartX + differenceX;\n      }\n\n      if (newEndX >= 1) {\n        newStartX = newEndX - differenceX;\n      }\n\n      this.zoomAxes(this.xAxes, {\n        start: newStartX,\n        end: newEndX\n      });\n    }\n\n    if (mouseWheelBehavior == \"panY\" || mouseWheelBehavior == \"panXY\") {\n      shift *= -1;\n      var differenceY = rangeY.end - rangeY.start;\n      var newStartY = Math.max(-maxPanOut, rangeY.start + shiftStep * shift / 100);\n      var newEndY = Math.min(rangeY.end + shiftStep * shift / 100, 1 + maxPanOut);\n\n      if (newStartY <= 0) {\n        newEndY = newStartY + differenceY;\n      }\n\n      if (newEndY >= 1) {\n        newStartY = newEndY - differenceY;\n      }\n\n      this.zoomAxes(this.yAxes, {\n        start: newStartY,\n        end: newEndY\n      });\n    }\n\n    if (mouseWheelBehavior == \"zoomX\" || mouseWheelBehavior == \"zoomXY\") {\n      var locationX = plotPoint.x / plotContainer.maxWidth;\n      var newStartX = Math.max(-maxPanOut, rangeX.start - shiftStep * shift / 100 * locationX);\n      newStartX = Math.min(newStartX, rangeX.start + (rangeX.end - rangeX.start) * locationX - shiftStep * 0.05);\n      var newEndX = Math.min(rangeX.end + shiftStep * shift / 100 * (1 - locationX), 1 + maxPanOut);\n      newEndX = Math.max(newEndX, rangeX.start + (rangeX.end - rangeX.start) * locationX + shiftStep * 0.05);\n      this.zoomAxes(this.xAxes, {\n        start: newStartX,\n        end: newEndX\n      });\n    }\n\n    if (mouseWheelBehavior == \"zoomY\" || mouseWheelBehavior == \"zoomXY\") {\n      var locationY = plotPoint.y / plotContainer.maxHeight;\n      var newStartY = Math.max(-maxPanOut, rangeY.start - shiftStep * shift / 100 * (1 - locationY));\n      newStartY = Math.min(newStartY, rangeY.start + (rangeY.end - rangeY.start) * locationY - shiftStep * 0.05);\n      var newEndY = Math.min(rangeY.end + shiftStep * shift / 100 * locationY, 1 + maxPanOut);\n      newEndY = Math.max(newEndY, rangeY.start + (rangeY.end - rangeY.start) * locationY + shiftStep * 0.05);\n      this.zoomAxes(this.yAxes, {\n        start: newStartY,\n        end: newEndY\n      });\n    }\n  };\n\n  Object.defineProperty(XYChart.prototype, \"mouseWheelBehavior\", {\n    /**\r\n     * @return Mouse wheel behavior\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"mouseWheelBehavior\");\n    },\n\n    /**\r\n     * Specifies action for when mouse wheel is used when over the chart.\r\n     *\r\n     * Options: Options: `\"zoomX\"`, `\"zoomY\"`, `\"zoomXY\"`, `\"panX\"`, `\"panY\"`, `\"panXY\"`, `\"none\"` (default).\r\n     *\r\n     * @default \"none\"\r\n     * @param mouse wheel behavior\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"mouseWheelBehavior\", value)) {\n        if (value != \"none\") {\n          this._mouseWheelDisposer = this.plotContainer.events.on(\"wheel\", this.handleWheel, this, false);\n\n          this._disposers.push(this._mouseWheelDisposer);\n        } else {\n          if (this._mouseWheelDisposer) {\n            this.plotContainer.wheelable = false;\n            this.plotContainer.hoverable = false;\n\n            this._mouseWheelDisposer.dispose();\n          }\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * This function is called by the [[DataSource]]'s `dateFields` adapater\r\n   * so that particular chart types can popuplate this setting with their\r\n   * own type-specific data fields so they are parsed properly.\r\n   *\r\n   * @param fields  Array of date fields\r\n   * @return Array of date fields populated with chart's date fields\r\n   */\n\n  XYChart.prototype.dataSourceDateFields = function (fields) {\n    var _this = this; // Process parent\n\n\n    fields = _super.prototype.dataSourceDateFields.call(this, fields); // Check if we have any series with date-fields\n\n    $iter.each(this.series.iterator(), function (series) {\n      fields = _this.populateDataSourceFields(fields, series.dataFields, [\"dateX\", \"dateY\", \"openDateX\", \"openDateY\"]);\n    });\n    return fields;\n  };\n  /**\r\n   * This function is called by the [[DataSource]]'s `numberFields` adapater\r\n   * so that particular chart types can popuplate this setting with their\r\n   * own type-specific data fields so they are parsed properly.\r\n   *\r\n   * @param value  Array of number fields\r\n   * @return Array of number fields populated with chart's number fields\r\n   */\n\n\n  XYChart.prototype.dataSourceNumberFields = function (fields) {\n    var _this = this;\n\n    fields = _super.prototype.dataSourceDateFields.call(this, fields); // Check if we have any series with date-fields\n\n    $iter.each(this.series.iterator(), function (series) {\n      fields = _this.populateDataSourceFields(fields, series.dataFields, [\"valueX\", \"valueY\", \"openValueX\", \"openValueY\"]);\n    });\n    return fields;\n  };\n  /**\r\n   * Processes JSON-based config before it is applied to the object.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param config  Config\r\n   */\n\n\n  XYChart.prototype.processConfig = function (config) {\n    if (config) {\n      // Save axis ranges for later processing\n      var xAxes = [];\n      var yAxes = []; // Set up axes\n\n      if ($type.hasValue(config.xAxes) && $type.isArray(config.xAxes)) {\n        for (var i = 0, len = config.xAxes.length; i < len; i++) {\n          if (!config.xAxes[i].type) {\n            throw Error(\"[XYChart error] No type set for xAxes[\" + i + \"].\");\n          } else if ($type.hasValue(config.xAxes[i][\"axisRanges\"])) {\n            xAxes.push({\n              axisRanges: config.xAxes[i][\"axisRanges\"],\n              index: i\n            });\n            delete config.xAxes[i][\"axisRanges\"];\n          }\n        }\n      }\n\n      if ($type.hasValue(config.yAxes) && $type.isArray(config.yAxes)) {\n        for (var i = 0, len = config.yAxes.length; i < len; i++) {\n          if (!config.yAxes[i].type) {\n            throw Error(\"[XYChart error] No type set for yAxes[\" + i + \"].\");\n          } else if ($type.hasValue(config.yAxes[i][\"axisRanges\"])) {\n            yAxes.push({\n              axisRanges: config.yAxes[i][\"axisRanges\"],\n              index: i\n            });\n            delete config.yAxes[i][\"axisRanges\"];\n          }\n        }\n      } // Set up series\n\n\n      if ($type.hasValue(config.series) && $type.isArray(config.series)) {\n        for (var i = 0, len = config.series.length; i < len; i++) {\n          config.series[i].type = config.series[i].type || \"LineSeries\";\n        }\n      } // Set up cursor\n\n\n      if ($type.hasValue(config.cursor) && !$type.hasValue(config.cursor.type)) {\n        config.cursor.type = \"XYCursor\";\n      } // Set up scrollbars\n\n\n      if ($type.hasValue(config.scrollbarX) && !$type.hasValue(config.scrollbarX.type)) {\n        config.scrollbarX.type = \"Scrollbar\";\n      }\n\n      if ($type.hasValue(config.scrollbarY) && !$type.hasValue(config.scrollbarY.type)) {\n        config.scrollbarY.type = \"Scrollbar\";\n      }\n\n      _super.prototype.processConfig.call(this, config); // Finish up with ranges.\n      // We need to do this here because series are processed last in JSON\n      // config. Therefore their respective objects are not yet are available\n      // when axis (and respectively their ranges) are being processed.\n\n\n      if (yAxes.length) {\n        for (var i = 0, len = yAxes.length; i < len; i++) {\n          this.yAxes.getIndex(yAxes[i].index).config = {\n            axisRanges: yAxes[i].axisRanges\n          };\n        }\n      }\n\n      if (xAxes.length) {\n        for (var i = 0, len = xAxes.length; i < len; i++) {\n          this.xAxes.getIndex(xAxes[i].index).config = {\n            axisRanges: xAxes[i].axisRanges\n          };\n        }\n      }\n    }\n  };\n  /**\r\n   * This function is used to sort element's JSON config properties, so that\r\n   * some properties that absolutely need to be processed last, can be put at\r\n   * the end.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param a  Element 1\r\n   * @param b  Element 2\r\n   * @return Sorting number\r\n   */\n\n\n  XYChart.prototype.configOrder = function (a, b) {\n    if (a == b) {\n      return 0;\n    } // Must come last\n    else if (a == \"scrollbarX\") {\n        return 1;\n      } else if (b == \"scrollbarX\") {\n        return -1;\n      } else if (a == \"scrollbarY\") {\n        return 1;\n      } else if (b == \"scrollbarY\") {\n        return -1;\n      } else if (a == \"cursor\") {\n        return 1;\n      } else if (b == \"cursor\") {\n        return -1;\n      } else if (a == \"series\") {\n        return 1;\n      } else if (b == \"series\") {\n        return -1;\n      } else {\n        return _super.prototype.configOrder.call(this, a, b);\n      }\n  };\n  /**\r\n   * Creates a new Series of type suitable for this chart.\r\n   *\r\n   * @return New series\r\n   */\n\n\n  XYChart.prototype.createSeries = function () {\n    return new XYSeries();\n  };\n\n  Object.defineProperty(XYChart.prototype, \"zoomOutButton\", {\n    /**\r\n     * @return Zoom out button\r\n     */\n    get: function () {\n      return this._zoomOutButton;\n    },\n\n    /**\r\n     * A [[Button]] element that is used for zooming out the chart.\r\n     *\r\n     * This button appears only when chart is zoomed in, and disappears\r\n     * autoamatically when it is zoome dout.\r\n     *\r\n     * @param button  Zoom out button\r\n     */\n    set: function (button) {\n      var _this = this;\n\n      this._zoomOutButton = button;\n\n      if (button) {\n        button.events.on(\"hit\", function () {\n          _this.zoomAxes(_this.xAxes, {\n            start: 0,\n            end: 1\n          });\n\n          _this.zoomAxes(_this.yAxes, {\n            start: 0,\n            end: 1\n          });\n        }, undefined, false);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Copies all parameters from another [[XYChart]].\r\n   *\r\n   * @param source Source XYChart\r\n   */\n\n  XYChart.prototype.copyFrom = function (source) {\n    var _this = this;\n\n    source.xAxes.each(function (axis) {\n      _this.xAxes.push(axis.clone());\n    });\n    source.yAxes.each(function (axis) {\n      _this.yAxes.push(axis.clone());\n    }); //this.xAxes.copyFrom(source.xAxes);\n    //this.yAxes.copyFrom(source.yAxes);\n\n    _super.prototype.copyFrom.call(this, source); //this.zoomOutButton.copyFrom(source.zoomOutButton);\n\n\n    if (source.cursor) {\n      this.cursor = source.cursor.clone();\n    }\n\n    if (source.scrollbarX) {\n      this.scrollbarX = source.scrollbarX.clone();\n    }\n\n    if (source.scrollbarY) {\n      this.scrollbarY = source.scrollbarY.clone();\n    } //@todo copy all container properties\n\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  XYChart.prototype.disposeData = function () {\n    _super.prototype.disposeData.call(this);\n\n    var scrollbarX = this.scrollbarX;\n\n    if (scrollbarX && scrollbarX instanceof XYChartScrollbar) {\n      scrollbarX.scrollbarChart.disposeData();\n    }\n\n    var scrollbarY = this.scrollbarY;\n\n    if (scrollbarY && scrollbarY instanceof XYChartScrollbar) {\n      scrollbarY.scrollbarChart.disposeData();\n    }\n\n    this.xAxes.each(function (axis) {\n      axis.disposeData();\n    });\n    this.yAxes.each(function (axis) {\n      axis.disposeData();\n    });\n  };\n  /**\r\n   * Adds one or several (array) of data items to the existing data.\r\n   *\r\n   * @param rawDataItem One or many raw data item objects\r\n   */\n\n\n  XYChart.prototype.addData = function (rawDataItem, removeCount) {\n    _super.prototype.addData.call(this, rawDataItem, removeCount);\n\n    this.invalidateScrollbarData();\n  };\n\n  XYChart.prototype.invalidateScrollbarData = function () {\n    if (this.scrollbarX instanceof XYChartScrollbar) {\n      this.scrollbarX.scrollbarChart.invalidateData();\n    }\n\n    if (this.scrollbarY instanceof XYChartScrollbar) {\n      this.scrollbarY.scrollbarChart.invalidateData();\n    }\n  };\n  /**\r\n   * Removes elements from the beginning of data\r\n   *\r\n   * @param count number of elements to remove\r\n   */\n\n\n  XYChart.prototype.removeData = function (count) {\n    _super.prototype.removeData.call(this, count);\n\n    this.invalidateScrollbarData();\n  };\n  /**\r\n   * @param  value  Tap to activate?\r\n   */\n\n\n  XYChart.prototype.setTapToActivate = function (value) {\n    _super.prototype.setTapToActivate.call(this, value);\n\n    if (this.cursor) {\n      this.cursor.interactions.isTouchProtected = value;\n      this.plotContainer.interactions.isTouchProtected = value;\n    }\n  };\n\n  XYChart.prototype.handleTapToActivate = function () {\n    _super.prototype.handleTapToActivate.call(this);\n\n    if (this.cursor) {\n      this.cursor.interactions.isTouchProtected = false;\n      this.plotContainer.interactions.isTouchProtected = false;\n    }\n  };\n\n  XYChart.prototype.handleTapToActivateDeactivation = function () {\n    _super.prototype.handleTapToActivateDeactivation.call(this);\n\n    if (this.cursor) {\n      this.cursor.interactions.isTouchProtected = true;\n      this.plotContainer.interactions.isTouchProtected = true;\n    }\n  };\n\n  return XYChart;\n}(SerialChart);\n\nexport { XYChart };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"XYChart\"] = XYChart;\n/**\r\n * Add default responsive rules\r\n */\n\n/**\r\n * Remove horizontal scrollbar on narrow charts.\r\n */\n\ndefaultRules.push({\n  relevant: ResponsiveBreakpoints.maybeXS,\n  state: function (target, stateId) {\n    if (target instanceof XYChart && target.scrollbarX) {\n      var state = target.states.create(stateId);\n      var sbstate = target.scrollbarX.states.create(stateId);\n      sbstate.properties.disabled = true;\n      return state;\n    }\n\n    return null;\n  }\n});\n/**\r\n * Remove vertical scrollbar on short charts.\r\n */\n\ndefaultRules.push({\n  relevant: ResponsiveBreakpoints.maybeXS,\n  state: function (target, stateId) {\n    if (target instanceof XYChart && target.scrollbarY) {\n      var state = target.states.create(stateId);\n      var sbstate = target.scrollbarY.states.create(stateId);\n      sbstate.properties.disabled = true;\n      return state;\n    }\n\n    return null;\n  }\n});","map":null,"metadata":{},"sourceType":"module"}