{"ast":null,"code":"/**\r\n * This module defines a [[Validatable]] class which can be used by all\r\n * non-[[Sprite]] classes to use system beats to revalidate themselves.\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { BaseObjectEvents } from \"../Base\";\nimport { registry } from \"../Registry\";\n/**\r\n * This module defines a [[Validatable]] class which can be used by all\r\n * non-[[Sprite]] classes to use system update cycle to revalidate themselves.\r\n *\r\n * @ignore Exclude from docs\r\n */\n\nvar Validatable =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Validatable, _super);\n\n  function Validatable() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\r\n     * Is invalid and should be revalidated?\r\n     */\n\n\n    _this._invalid = false;\n    return _this;\n  }\n  /**\r\n   * Invalidates the element, so that it can re-validate/redraw itself in the\r\n   * next cycle.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Validatable.prototype.invalidate = function () {\n    if (this._invalid === false) {\n      this._invalid = true;\n      registry.events.on(\"exitframe\", this.validate, this);\n    }\n  };\n  /**\r\n   * Validates itself.\r\n   *\r\n   * Most probably the extending class will have an overriding `validate()`\r\n   * method which will do actual work, as well as call this method using\r\n   * `super.validate()`.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Validatable.prototype.validate = function () {\n    if (this._invalid === true) {\n      this._invalid = false;\n      registry.events.off(\"exitframe\", this.validate, this);\n    }\n  };\n\n  return Validatable;\n}(BaseObjectEvents);\n\nexport { Validatable };","map":null,"metadata":{},"sourceType":"module"}