{"ast":null,"code":"/**\r\n * This module contains a version of ColorSet that can (and should) be used for\r\n * coloring UI elements.\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { BaseObject } from \"../Base\";\nimport { registry } from \"../Registry\";\nimport { color } from \"./Color\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * This module contains a version of ColorSet that can (and should) be used for\r\n * coloring UI elements.\r\n *\r\n * The main difference from the basic [[ColorSet]] is that instead of sequenced\r\n * colors, it uses a concept of named colors.\r\n *\r\n * This way, every element in the UI can extract an exact color theme author\r\n * meant for the specific purpose, like strokes, backgrounds, etc.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/colors/} for color-related info\r\n */\n\nvar InterfaceColorSet =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(InterfaceColorSet, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function InterfaceColorSet() {\n    var _this = _super.call(this) || this;\n    /**\r\n     * Maps the list of purposes (like \"stroke\") to an index of color of the\r\n     * color set.\r\n     */\n\n\n    _this._purposes = {\n      stroke: color(\"#e5e5e5\"),\n      fill: color(\"#f3f3f3\"),\n      primaryButton: color(\"#6794dc\"),\n      primaryButtonHover: color(\"#6771dc\"),\n      primaryButtonDown: color(\"#68dc75\"),\n      primaryButtonActive: color(\"#68dc75\"),\n      primaryButtonText: color(\"#FFFFFF\"),\n      primaryButtonStroke: color(\"#FFFFFF\"),\n      secondaryButton: color(\"#d9d9d9\"),\n      secondaryButtonHover: color(\"#d9d9d9\").brighten(-0.25),\n      secondaryButtonDown: color(\"#d9d9d9\").brighten(-0.35),\n      secondaryButtonActive: color(\"#d9d9d9\").brighten(0.35),\n      secondaryButtonText: color(\"#000000\"),\n      secondaryButtonStroke: color(\"#FFFFFF\"),\n      grid: color(\"#000000\"),\n      background: color(\"#ffffff\"),\n      alternativeBackground: color(\"#000000\"),\n      text: color(\"#000000\"),\n      alternativeText: color(\"#FFFFFF\"),\n      disabledBackground: color(\"#999999\"),\n      positive: color(\"#67dc75\"),\n      negative: color(\"#dc6788\")\n    };\n    _this.className = \"InterfaceColorSet\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  InterfaceColorSet.prototype.debug = function () {};\n  /**\r\n   * Returns a color to be used for the specific purpose.\r\n   *\r\n   * ```TypeScript\r\n   * let uicolors = new am4core.InterfaceColorSet();\r\n   * console.log(uicolors.getFor(\"stroke\"));\r\n   * ```\r\n   * ```JavaScript\r\n   * var uicolors = new am4core.InterfaceColorSet();\r\n   * console.log(uicolors.getFor(\"stroke\"));\r\n   * ```\r\n   *\r\n   * @param purpose  Color use purpuse\r\n   * @return Color\r\n   */\n\n\n  InterfaceColorSet.prototype.getFor = function (purpose) {\n    return this._purposes[purpose];\n  };\n  /**\r\n   * Sets color to be used for the specific purpose.\r\n   *\r\n   * @param purpose  Color use purpose\r\n   * @param color    Color\r\n   */\n\n\n  InterfaceColorSet.prototype.setFor = function (purpose, color) {\n    this._purposes[purpose] = color;\n  };\n\n  return InterfaceColorSet;\n}(BaseObject);\n\nexport { InterfaceColorSet };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"InterfaceColorSet\"] = InterfaceColorSet;","map":null,"metadata":{},"sourceType":"module"}