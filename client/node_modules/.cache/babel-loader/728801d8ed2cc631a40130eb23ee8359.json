{"ast":null,"code":"/**\r\n * Map line series module\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { MapSeries, MapSeriesDataItem } from \"./MapSeries\";\nimport { MapLine } from \"./MapLine\";\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\nimport { registry } from \"../../core/Registry\";\nimport * as $mapUtils from \"./MapUtils\";\nimport * as $array from \"../../core/utils/Array\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport { Disposer } from \"../../core/utils/Disposer\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines a [[DataItem]] for [[MapLineSeries]]\r\n * @see {@link DataItem}\r\n */\n\nvar MapLineSeriesDataItem =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MapLineSeriesDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function MapLineSeriesDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"MapLineSeriesDataItem\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  MapLineSeriesDataItem.prototype.getFeature = function () {\n    if (this.multiLine && this.multiLine.length > 0) {\n      return {\n        \"type\": \"Feature\",\n        geometry: {\n          type: \"MultiLineString\",\n          coordinates: this.multiLine\n        }\n      };\n    }\n  };\n\n  Object.defineProperty(MapLineSeriesDataItem.prototype, \"mapLine\", {\n    /**\r\n     * A [[MapLine]] element related to this data item.\r\n     *\r\n     * @readonly\r\n     * @return Element\r\n     */\n    get: function () {\n      var _this = this;\n\n      if (!this._mapLine) {\n        var mapLine_1 = this.component.mapLines.create();\n        this._mapLine = mapLine_1;\n        this.addSprite(mapLine_1);\n\n        this._disposers.push(mapLine_1);\n\n        this._disposers.push(new Disposer(function () {\n          if (_this.component) {\n            _this.component.mapLines.removeValue(mapLine_1);\n          }\n        }));\n\n        this.mapObject = mapLine_1;\n      }\n\n      return this._mapLine;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapLineSeriesDataItem.prototype, \"line\", {\n    /**\r\n     * @return Coordinates\r\n     */\n    get: function () {\n      return this._line;\n    },\n\n    /**\r\n     * A collection of X/Y coordinates for a single-segment line. E.g.:\r\n     *\r\n     * ```JSON\r\n     * [\r\n     *   [ 100, 150 ],\r\n     *   [ 120, 200 ]\r\n     * ]\r\n     * ```\r\n     *\r\n     * @param line  Coordinates\r\n     */\n    set: function (line) {\n      this._line = line;\n      this.multiLine = [line];\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapLineSeriesDataItem.prototype, \"multiLine\", {\n    /**\r\n     * @return Coordinates\r\n     */\n    get: function () {\n      return this._multiLine;\n    },\n\n    /**\r\n     * A collection of X/Y coordinates for a multi-segment line. E.g.:\r\n     *\r\n     * ```JSON\r\n     * [\r\n     *   // Segment 1\r\n     *   [\r\n     *     [ 100, 150 ],\r\n     *     [ 120, 200 ]\r\n     *   ],\r\n     *\r\n     *   // Segment 2\r\n     *   [\r\n     *     [ 120, 200 ],\r\n     *     [ 150, 100 ]\r\n     *   ]\r\n     * ]\r\n     * ```\r\n     *\r\n     * @param multiLine  Coordinates\r\n     */\n    set: function (multiLine) {\n      this._multiLine = multiLine;\n      this._multiGeoLine = $mapUtils.multiLineToGeo(multiLine);\n      this.updateExtremes();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapLineSeriesDataItem.prototype, \"geoLine\", {\n    /**\r\n     * @return Coordinates\r\n     */\n    get: function () {\n      return this._geoLine;\n    },\n\n    /**\r\n     * A collection of lat/long coordinates for a single-segment line. E.g.:\r\n     *\r\n     * ```JSON\r\n     * [\r\n     *   { longitude: 3.121, latitude: 0.58 },\r\n     *   { longitude: -5.199, latitude: 21.223 }\r\n     * ]\r\n     * ```\r\n     *\r\n     * @see {@link https://tools.ietf.org/html/rfc7946#section-3.1.4} GeoJSON LineString reference\r\n     * @param geoLine  Coordinates\r\n     */\n    set: function (geoLine) {\n      this._geoLine = geoLine;\n      this.multiLine = $mapUtils.multiGeoLineToMultiLine([geoLine]);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapLineSeriesDataItem.prototype, \"multiGeoLine\", {\n    /**\r\n     * @return Coordinates\r\n     */\n    get: function () {\n      return this._multiGeoLine;\n    },\n\n    /**\r\n     * A collection of X/Y coordinates for a multi-segment line. E.g.:\r\n     *\r\n     * ```JSON\r\n     * [\r\n     *   // Segment 1\r\n     *   [\r\n     *     { longitude: 3.121, latitude: 0.58 },\r\n     *     { longitude: -5.199, latitude: 21.223 }\r\n     *   ],\r\n     *\r\n     *   // Segment 2\r\n     *   [\r\n     *     { longitude: -5.199, latitude: 21.223 },\r\n     *     { longitude: -12.9, latitude: 25.85 }\r\n     *   ]\r\n     * ]\r\n     * ```\r\n     *\r\n     * @see {@link https://tools.ietf.org/html/rfc7946#section-3.1.5} GeoJSON MultiLineString reference\r\n     * @param multiGeoLine  Coordinates\r\n     */\n    set: function (multiGeoLine) {\n      this._multiGeoLine = multiGeoLine;\n      this.multiLine = $mapUtils.multiGeoLineToMultiLine(multiGeoLine);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return MapLineSeriesDataItem;\n}(MapSeriesDataItem);\n\nexport { MapLineSeriesDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * A series of map line series.\r\n *\r\n * @see {@link IMapLineSeriesEvents} for a list of available Events\r\n * @see {@link IMapLineSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\n\nvar MapLineSeries =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MapLineSeries, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function MapLineSeries() {\n    var _this = // Init\n    _super.call(this) || this;\n\n    _this.className = \"MapLineSeries\"; // Set data fields\n\n    _this.dataFields.multiLine = \"multiLine\";\n    _this.dataFields.line = \"line\";\n    _this.dataFields.geoLine = \"geoLine\";\n    _this.dataFields.multiGeoLine = \"multiGeoLine\";\n    _this.ignoreBounds = true; // Apply theme\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Returns a new/empty DataItem of the type appropriate for this object.\r\n   *\r\n   * @see {@link DataItem}\r\n   * @return Data Item\r\n   */\n\n\n  MapLineSeries.prototype.createDataItem = function () {\n    return new MapLineSeriesDataItem();\n  };\n  /**\r\n   * (Re)validates series data, effectively causing the whole series to be\r\n   * redrawn.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  MapLineSeries.prototype.validateData = function () {\n    // process geoJSON and created map objects\n    if (this.useGeodata || this.geodata) {\n      var geoJSON = this.chart.geodata;\n\n      if (geoJSON) {\n        var features = void 0;\n\n        if (geoJSON.type == \"FeatureCollection\") {\n          features = geoJSON.features;\n        } else if (geoJSON.type == \"Feature\") {\n          features = [geoJSON];\n        } else if ([\"Point\", \"LineString\", \"Polygon\", \"MultiPoint\", \"MultiLineString\", \"MultiPolygon\"].indexOf(geoJSON.type) != -1) {\n          features = [{\n            geometry: geoJSON\n          }];\n        } else {\n          console.log(\"nothing found in geoJSON\");\n        }\n\n        if (features) {\n          var _loop_1 = function (i, len) {\n            var feature = features[i];\n            var geometry = feature.geometry;\n\n            if (geometry) {\n              var type = geometry.type;\n              var id_1 = feature.id;\n\n              if (type == \"LineString\" || type == \"MultiLineString\") {\n                if (!this_1.checkInclude(this_1.include, this_1.exclude, id_1)) {\n                  return \"continue\";\n                }\n\n                var coordinates = geometry.coordinates;\n                var dataObject = $array.find(this_1.data, function (value, i) {\n                  return value.id == id_1;\n                });\n\n                if (type == \"LineString\") {\n                  coordinates = [coordinates];\n                }\n\n                if (!dataObject) {\n                  dataObject = {\n                    multiLine: coordinates,\n                    id: id_1,\n                    madeFromGeoData: true\n                  };\n                  this_1.data.push(dataObject);\n                } else {\n                  if (!dataObject.multiLine) {\n                    dataObject.multiLine = coordinates;\n                  }\n                } // copy properties data to datacontext\n\n\n                $utils.softCopyProperties(feature.properties, dataObject);\n              }\n            }\n          };\n\n          var this_1 = this;\n\n          for (var i = 0, len = features.length; i < len; i++) {\n            _loop_1(i, len);\n          }\n        }\n      }\n    }\n\n    _super.prototype.validateData.call(this);\n  };\n\n  Object.defineProperty(MapLineSeries.prototype, \"mapLines\", {\n    /**\r\n     * A list of lines in the series.\r\n     *\r\n     * @return Lines\r\n     */\n    get: function () {\n      if (!this._mapLines) {\n        var lineTemplate = this.createLine();\n        var mapLines = new ListTemplate(lineTemplate);\n\n        this._disposers.push(new ListDisposer(mapLines));\n\n        this._disposers.push(mapLines.template);\n\n        mapLines.events.on(\"inserted\", this.handleObjectAdded, this, false);\n        this._mapLines = mapLines;\n        this._mapObjects = mapLines;\n      }\n\n      return this._mapLines;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns a new line instance of suitable type.\r\n   *\r\n   * @return New line\r\n   */\n\n  MapLineSeries.prototype.createLine = function () {\n    return new MapLine();\n  };\n  /**\r\n   * (Re)validates the series\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  MapLineSeries.prototype.validate = function () {\n    this.dataItems.each(function (dataItem) {\n      $utils.used(dataItem.mapLine);\n    });\n\n    _super.prototype.validate.call(this);\n\n    this.mapLines.each(function (mapLine) {\n      mapLine.validate();\n    });\n  };\n  /**\r\n   * Copies all properties from another instance of [[Series]].\r\n   *\r\n   * @param source  Source series\r\n   */\n\n\n  MapLineSeries.prototype.copyFrom = function (source) {\n    this.mapLines.template.copyFrom(source.mapLines.template);\n\n    _super.prototype.copyFrom.call(this, source);\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  MapLineSeries.prototype.getFeatures = function () {\n    var _this = this;\n\n    var features = [];\n    this.dataItems.each(function (dataItem) {\n      var feature = dataItem.getFeature();\n\n      if (feature) {\n        features.push(feature);\n      }\n    });\n    this.mapLines.each(function (mapLine) {\n      if (_this.dataItems.indexOf(mapLine._dataItem) == -1) {\n        var feature = mapLine.getFeature();\n\n        if (feature) {\n          features.push(feature);\n        }\n      }\n    });\n    return features;\n  };\n  /**\r\n   * returns MapLine by id\r\n   * @param line id\r\n   * @return {MapLine}\r\n   */\n\n\n  MapLineSeries.prototype.getLineById = function (id) {\n    return $iter.find(this.mapLines.iterator(), function (mapLine) {\n      var dataContext = mapLine.dataItem.dataContext;\n      return dataContext.id == id;\n    });\n  };\n\n  return MapLineSeries;\n}(MapSeries);\n\nexport { MapLineSeries };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"MapLineSeries\"] = MapLineSeries;\nregistry.registeredClasses[\"MapLineSeriesDataItem\"] = MapLineSeriesDataItem;","map":null,"metadata":{},"sourceType":"module"}