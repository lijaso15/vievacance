{"ast":null,"code":"import * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { AxisFill } from \"./AxisFill\";\nimport { percent } from \"../../core/utils/Percent\";\nimport { registry } from \"../../core/Registry\";\nimport * as $type from \"../../core/utils/Type\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Provides fill element functionality for circular Axes.\r\n *\r\n * @see {@link IAxisFillCircularEvents} for a list of available events\r\n * @see {@link IAxisFillCircularAdapters} for a list of available Adapters\r\n * @todo Needs description\r\n */\n\nvar AxisFillCircular =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(AxisFillCircular, _super);\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param axis Axis\r\n   */\n\n\n  function AxisFillCircular(axis) {\n    var _this = _super.call(this, axis) || this;\n\n    _this.className = \"AxisFillCircular\";\n    _this.element = _this.paper.add(\"path\");\n    _this.radius = percent(100);\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Draws the fill element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  AxisFillCircular.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n\n    if (this.axis) {\n      var renderer = this.axis.renderer;\n      this.fillPath = renderer.getPositionRangePath(this.startPosition, this.endPosition, this.radius, $type.hasValue(this.innerRadius) ? this.innerRadius : renderer.innerRadius, this.cornerRadius);\n      this.path = this.fillPath;\n    }\n  };\n\n  Object.defineProperty(AxisFillCircular.prototype, \"innerRadius\", {\n    /**\r\n     * @return Inner radius\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"innerRadius\");\n    },\n\n    /**\r\n     * Inner radius of the fill. Relative ([[Percent]]) or absolute (pixels).\r\n     *\r\n     * @param value  Inner radius\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisFillCircular.prototype, \"radius\", {\n    /**\r\n     * @return Outer radius\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"radius\");\n    },\n\n    /**\r\n     * Outer radius of the fill. Relative ([[Percent]]) or absolute (pixels).\r\n     *\r\n     * @param value  Outer radius\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"radius\", value, true, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisFillCircular.prototype, \"cornerRadius\", {\n    /**\r\n     * @return Corner radius (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"cornerRadius\");\n    },\n\n    /**\r\n     * Corner radius for the fill. In pixels.\r\n     *\r\n     * @param value  Corner radius (px)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"cornerRadius\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return AxisFillCircular;\n}(AxisFill);\n\nexport { AxisFillCircular };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"AxisFillCircular\"] = AxisFillCircular;","map":null,"metadata":{},"sourceType":"module"}