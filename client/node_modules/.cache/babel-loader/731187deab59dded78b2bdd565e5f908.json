{"ast":null,"code":"/**\r\n * Functionality for drawing waved lines.\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Line } from \"./Line\";\nimport { color } from \"../utils/Color\";\nimport { wavedLine } from \"../rendering/Smoothing\";\nimport * as $path from \"../rendering/Path\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Draws a waved line.\r\n *\r\n * @see {@link IWavedLineEvents} for a list of available events\r\n * @see {@link IWavedLineAdapters} for a list of available Adapters\r\n */\n\nvar WavedLine =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(WavedLine, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function WavedLine() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"WavedLine\";\n    _this.element = _this.paper.add(\"path\");\n    _this.waveLength = 16;\n    _this.waveHeight = 4;\n    _this.tension = 0.8;\n    _this.pixelPerfect = false;\n    _this.fill = color();\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Draws the waved line.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  WavedLine.prototype.draw = function () {\n    //super.draw();\n    var p1 = {\n      x: this.x1,\n      y: this.y1\n    };\n    var p2 = {\n      x: this.x2,\n      y: this.y2\n    };\n    this.path = $path.moveTo(p1) + wavedLine(p1, p2, this.waveLength, this.waveHeight, this.tension, true);\n  };\n\n  Object.defineProperty(WavedLine.prototype, \"waveLength\", {\n    /**\r\n     * @return Wave length (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"waveLength\");\n    },\n\n    /**\r\n     * Wave length in pixels.\r\n     *\r\n     * @default 16\r\n     * @param value  Wave length (px)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"waveLength\", value);\n      this.invalidate();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(WavedLine.prototype, \"waveHeight\", {\n    /**\r\n     * @return Wave height (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"waveHeight\");\n    },\n\n    /**\r\n     * Wave height in pixels.\r\n     *\r\n     * @default 4\r\n     * @param value  Wave height (px)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"waveHeight\", value);\n      this.invalidate();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(WavedLine.prototype, \"tension\", {\n    /**\r\n     * @return Tension\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"tension\");\n    },\n\n    /**\r\n     * Tension of the wave.\r\n     *\r\n     * @default 0.8\r\n     * @param value  Tension\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"tension\", value);\n      this.invalidate();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return WavedLine;\n}(Line);\n\nexport { WavedLine };","map":null,"metadata":{},"sourceType":"module"}