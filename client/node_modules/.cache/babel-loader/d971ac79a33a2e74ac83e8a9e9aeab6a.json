{"ast":null,"code":"/**\r\n * Percent chart module.\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { SerialChart, SerialChartDataItem } from \"./SerialChart\";\nimport { PercentSeries } from \"../series/PercentSeries\";\nimport { registry } from \"../../core/Registry\";\nimport * as $iter from \"../../core/utils/Iterator\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines a [[DataItem]] for [[PercentChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\n\nvar PercentChartDataItem =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(PercentChartDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function PercentChartDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"PercentChartDataItem\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  return PercentChartDataItem;\n}(SerialChartDataItem);\n\nexport { PercentChartDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * This is a base class for \"percent-based\" chart types like Pie and Funnel.\r\n *\r\n * @see {@link IPercentChartEvents} for a list of available Events\r\n * @see {@link IPercentChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/pie-chart/} for Pie chart documentation\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for Sliced chart documentation\r\n */\n\nvar PercentChart =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(PercentChart, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function PercentChart() {\n    var _this = // Init\n    _super.call(this) || this;\n\n    _this.className = \"PercentChart\";\n    _this.align = \"none\";\n    _this.valign = \"none\"; // so that the chart is always drawn, even the legend wants all the space\n\n    _this.chartContainer.minHeight = 50;\n    _this.chartContainer.minWidth = 50; // Apply theme\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * (Re)validates chart data.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  PercentChart.prototype.validateData = function () {\n    _super.prototype.validateData.call(this);\n\n    this.feedLegend();\n  };\n  /**\r\n   * Setups the legend to use the chart's data.\r\n   * @ignore\r\n   */\n\n\n  PercentChart.prototype.feedLegend = function () {\n    var legend = this.legend;\n\n    if (legend) {\n      var legendData_1 = [];\n      $iter.each(this.series.iterator(), function (series) {\n        if (!series.hiddenInLegend) {\n          $iter.each(series.dataItems.iterator(), function (dataItem) {\n            if (!dataItem.hiddenInLegend) {\n              legendData_1.push(dataItem);\n              var legendSettings = series.legendSettings;\n\n              if (legendSettings) {\n                if (legendSettings.labelText) {\n                  legend.labels.template.text = legendSettings.labelText;\n                }\n\n                if (legendSettings.itemLabelText) {\n                  legend.labels.template.text = legendSettings.itemLabelText;\n                }\n\n                if (legendSettings.valueText) {\n                  legend.valueLabels.template.text = legendSettings.valueText;\n                }\n\n                if (legendSettings.itemValueText) {\n                  legend.valueLabels.template.text = legendSettings.itemValueText;\n                }\n              }\n            }\n          });\n        }\n      });\n      legend.data = legendData_1;\n      legend.dataFields.name = \"category\";\n    }\n  };\n  /**\r\n   * Creates a new [[PercentSeries]].\r\n   *\r\n   * @return New series\r\n   */\n\n\n  PercentChart.prototype.createSeries = function () {\n    return new PercentSeries();\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  PercentChart.prototype.setLegend = function (legend) {\n    _super.prototype.setLegend.call(this, legend);\n\n    if (legend) {\n      legend.labels.template.text = \"{category}\";\n      legend.valueLabels.template.text = \"{value.percent.formatNumber('#.0')}%\";\n      legend.itemContainers.template.events.on(\"over\", function (event) {\n        var PercentSeriesDataItem = event.target.dataItem.dataContext;\n\n        if (PercentSeriesDataItem.visible && !PercentSeriesDataItem.isHiding) {\n          PercentSeriesDataItem.slice.isHover = true;\n        }\n      });\n      legend.itemContainers.template.events.on(\"out\", function (event) {\n        var PercentSeriesDataItem = event.target.dataItem.dataContext;\n        PercentSeriesDataItem.slice.isHover = false;\n      });\n    }\n  };\n\n  return PercentChart;\n}(SerialChart);\n\nexport { PercentChart };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @hidden\r\n */\n\nregistry.registeredClasses[\"PercentChart\"] = PercentChart;\nregistry.registeredClasses[\"PercentChartDataItem\"] = PercentChartDataItem;","map":null,"metadata":{},"sourceType":"module"}