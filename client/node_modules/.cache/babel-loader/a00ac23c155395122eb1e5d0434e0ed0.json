{"ast":null,"code":"import * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { ColorModifier } from \"./ColorModifier\";\nimport { registry } from \"../../Registry\";\nimport * as $math from \"../../utils/Math\";\nimport * as $type from \"../../utils/Type\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * This class can be used to modify linear gradient steps, changing visual\r\n * properties like lightness, brightness, opacity of each set.\r\n *\r\n * It can also set offsets for each gradient step.\r\n *\r\n * E.g. if I want to fill a columns in a column series to be a solid fill from\r\n * top to 80% of height, then gradually fades out, I can use the following\r\n * gradient modifier as a `fillModifier`:\r\n *\r\n * ```TypeScript\r\n * let fillModifier = new am4core.GradientModifier();\r\n * fillModifier.opacities = [1, 1, 0];\r\n * fillModifier.offsets = [0, 0.8, 1];\r\n * columnSeries.columns.template.fillModifier = fillModifier;\r\n * ```\r\n * ```JavaScript\r\n * var fillModifier = new am4core.GradientModifier();\r\n * fillModifier.opacities = [1, 1, 0];\r\n * fillModifier.offsets = [0, 0.8, 1];\r\n * columnSeries.columns.template.fillModifier = fillModifier;\r\n * ```\r\n * ```JSON\r\n * \"series\": [{\r\n *   \"type\": \"ColumnSeries\",\r\n *   \"columns\": {\r\n *     \"fillModifier\": {\r\n *       \"type\": \"GradientModifier\",\r\n *       \"opacities\": [1, 1, 0],\r\n *       \"offsets\": [0, 0.8, 1]\r\n *     }\r\n *   }\r\n * }]\r\n * ```\r\n */\n\nvar GradientModifier =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(GradientModifier, _super);\n  /**\r\n   * Constructor.\r\n   */\n\n\n  function GradientModifier() {\n    var _this = _super.call(this) || this;\n\n    _this.lightnesses = [];\n    _this.brightnesses = [];\n    _this.opacities = [];\n    _this.offsets = [];\n    _this.className = \"GradientModifier\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  Object.defineProperty(GradientModifier.prototype, \"lightnesses\", {\n    /**\r\n     * @return Lightness values\r\n     */\n    get: function () {\n      return this._lightnesses;\n    },\n\n    /**\r\n     * An array of lightness values for each step.\r\n     *\r\n     * @param value  Lightness values\r\n     */\n    set: function (value) {\n      this._lightnesses = value;\n      this._brightnesses = [];\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(GradientModifier.prototype, \"brightnesses\", {\n    /**\r\n     * @return Brightness values\r\n     */\n    get: function () {\n      return this._brightnesses;\n    },\n\n    /**\r\n     * An array of brightness values for each step.\r\n     *\r\n     * @param value  Brightness values\r\n     */\n    set: function (value) {\n      this._brightnesses = value;\n      this._lightnesses = [];\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(GradientModifier.prototype, \"opacities\", {\n    /**\r\n     * @return Opacity values\r\n     */\n    get: function () {\n      return this._opacities;\n    },\n\n    /**\r\n     * An array of opacity values for each step.\r\n     *\r\n     * @param value  Opacity values\r\n     */\n    set: function (value) {\n      this._opacities = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(GradientModifier.prototype, \"offsets\", {\n    /**\r\n     * @return Offsets\r\n     */\n    get: function () {\n      return this._offsets;\n    },\n\n    /**\r\n     * An array of relative position (0-1) for each step.\r\n     *\r\n     * If not set, all steps will be of equal relative length.\r\n     *\r\n     * @param value  Offsets\r\n     */\n    set: function (value) {\n      this._offsets = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Modifies the color based on step setting.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param value  Source color\r\n   * @return A gradient that matches set modification rules\r\n   */\n\n  GradientModifier.prototype.modify = function (value) {\n    // Clear current gradient\n    this.gradient.clear(); // Get step count\n\n    var count = 0;\n\n    if (this.opacities) {\n      count = $math.max(count, this.opacities.length);\n    }\n\n    if (this.lightnesses) {\n      count = $math.max(count, this.lightnesses.length);\n    }\n\n    if (this.brightnesses) {\n      count = $math.max(count, this.brightnesses.length);\n    } // Init step values\n\n\n    var opacity = 1,\n        lightness,\n        brightness; // Apply steps\n\n    for (var i = 0; i < count; i++) {\n      // Take base color\n      var color = value; // Check if there are any parameters for this step\n\n      if (this.opacities && $type.isNumber(this.opacities[i])) {\n        opacity = this.opacities[i];\n      }\n\n      if (this.lightnesses && $type.isNumber(this.lightnesses[i])) {\n        lightness = this.lightnesses[i];\n        brightness = undefined;\n      }\n\n      if (this.brightnesses && $type.isNumber(this.brightnesses[i])) {\n        brightness = this.brightnesses[i];\n        lightness = undefined;\n      } // Check if we need to brighten/lighten color\n\n\n      if ($type.isNumber(brightness)) {\n        color = value.brighten(this.brightnesses[i]);\n      } else if ($type.isNumber(lightness)) {\n        color = value.lighten(this.lightnesses[i]);\n      } // Get offset (it's OK if it's undefined)\n\n\n      var offset = this.offsets[i]; // Apply step\n\n      this.gradient.addColor(color, opacity, offset);\n    }\n\n    return this.gradient;\n  };\n\n  GradientModifier.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n\n    this._offsets = source.offsets;\n    this._brightnesses = source.brightnesses;\n    this._lightnesses = source.lightnesses;\n    this._opacities = source.opacities;\n  };\n\n  return GradientModifier;\n}(ColorModifier);\n\nexport { GradientModifier };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"GradientModifier\"] = GradientModifier;","map":null,"metadata":{},"sourceType":"module"}