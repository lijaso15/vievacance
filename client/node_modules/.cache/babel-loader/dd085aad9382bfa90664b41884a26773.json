{"ast":null,"code":"import _objectSpread from \"/Users/Overseer/Desktop/fullstack_app/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/Overseer/Desktop/fullstack_app/client/src/components/Globe/Globe-view.js\";\nimport React, { Component } from 'react';\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\nimport * as am4maps from \"@amcharts/amcharts4/maps\";\nimport worldHigh from '@amcharts/amcharts4-geodata/worldHigh';\nimport axios from 'axios';\nam4core.useTheme(am4themes_animated);\n\nclass Globe extends Component {\n  componentDidMount() {\n    am4core.useTheme(am4themes_animated); // create map instance\n\n    const chart = am4core.create(\"chartdiv\", am4maps.MapChart); // Set map definition\n\n    chart.geodata = worldHigh; // setting projection\n\n    chart.projection = new am4maps.projections.Orthographic(); // Create map polygon series\n    // represents map areas\n\n    var polygonSeries = chart.series.push(new am4maps.MapPolygonSeries());\n    polygonSeries.useGeodata = true; // configure appearance and behavior of its items by accessing templates\n\n    var polygonTemplate = polygonSeries.mapPolygons.template;\n    polygonTemplate.tooltipText = \"{name}\";\n    polygonTemplate.fill = chart.colors.getIndex(0).lighten(0.5);\n    var hs = polygonTemplate.states.create(\"hover\");\n    hs.properties.fill = chart.colors.getIndex(0);\n    polygonTemplate.fill = am4core.color(\"#363636\");\n    polygonTemplate.propertyFields.fill = 'color';\n    let imageSeries = chart.series.push(new am4maps.MapImageSeries());\n    let imageSeriesTemplate = imageSeries.mapImages.template;\n    let circle = imageSeriesTemplate.createChild(am4core.Circle);\n    circle.radius = 4;\n    circle.strokeWidth = 2;\n    circle.tooltipText = '{title}';\n    circle.interactions.hoverable = true;\n    circle.url = '{url}';\n    imageSeriesTemplate.propertyFields.latitude = \"latitude\";\n    imageSeriesTemplate.propertyFields.longitude = \"longitude\";\n    circle.propertyFields.fill = 'fill'; // imageSeries.data = [{\n    //     title: 'Nice, France',\n    //     latitude: 43.7034,\n    //     longitude: 7.2663,\n    //     url: '/citypage/Nice',\n    //     fill: am4core.color(\"#ff3860\")\n    // }]\n    // chart.backgroundSeries.mapPolygons.template.polygon.fill = am4core.color(\"#f5f5f5\");\n    // chart.backgroundSeries.mapPolygons.template.polygon.fillOpacity = 1;\n\n    let grid = chart.series.push(new am4maps.GraticuleSeries());\n    grid.toBack(); // grid.mapLines.template.line.stroke = am4core.color(\"#e33\");\n    // grid.mapLines.template.line.strokeOpacity = 0.2;\n\n    chart.panBehavior = \"rotateLongLat\";\n    this.chart = chart;\n    axios.get('http://localhost:3000/globeData').then(res => {\n      console.log(res);\n\n      if (res.status === 200) {\n        imageSeries.data = JSON.parse(res.data).map(city => {\n          console.log(_objectSpread({}, city, {\n            fill: am4core.color(city.fill)\n          }));\n          return _objectSpread({}, city, {\n            fill: am4core.color(city.popularity)\n          });\n        });\n      }\n    }).catch(err => alert(err));\n  }\n\n  componentWillUnmount() {\n    if (this.chart) {\n      this.chart.dispose();\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"chartdiv\",\n      style: {\n        width: \"100%\",\n        height: \"500px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default Globe;","map":{"version":3,"sources":["/Users/Overseer/Desktop/fullstack_app/client/src/components/Globe/Globe-view.js"],"names":["React","Component","am4core","am4themes_animated","am4maps","worldHigh","axios","useTheme","Globe","componentDidMount","chart","create","MapChart","geodata","projection","projections","Orthographic","polygonSeries","series","push","MapPolygonSeries","useGeodata","polygonTemplate","mapPolygons","template","tooltipText","fill","colors","getIndex","lighten","hs","states","properties","color","propertyFields","imageSeries","MapImageSeries","imageSeriesTemplate","mapImages","circle","createChild","Circle","radius","strokeWidth","interactions","hoverable","url","latitude","longitude","grid","GraticuleSeries","toBack","panBehavior","get","then","res","console","log","status","data","JSON","parse","map","city","popularity","catch","err","alert","componentWillUnmount","dispose","render","width","height"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\nimport * as am4maps from \"@amcharts/amcharts4/maps\";\nimport worldHigh from '@amcharts/amcharts4-geodata/worldHigh'\nimport axios from 'axios'\n\n\nam4core.useTheme(am4themes_animated);\n\nclass Globe extends Component {\n    componentDidMount() {\n\n        am4core.useTheme(am4themes_animated);\n        // create map instance\n        const chart = am4core.create(\"chartdiv\", am4maps.MapChart);\n        // Set map definition\n        chart.geodata = worldHigh\n        // setting projection\n        chart.projection = new am4maps.projections.Orthographic();\n        // Create map polygon series\n        // represents map areas\n        var polygonSeries = chart.series.push(new am4maps.MapPolygonSeries());\n        polygonSeries.useGeodata = true;\n        // configure appearance and behavior of its items by accessing templates\n        var polygonTemplate = polygonSeries.mapPolygons.template;\n        polygonTemplate.tooltipText = \"{name}\";\n        polygonTemplate.fill = chart.colors.getIndex(0).lighten(0.5);\n        var hs = polygonTemplate.states.create(\"hover\");\n        hs.properties.fill = chart.colors.getIndex(0);\n        polygonTemplate.fill = am4core.color(\"#363636\");\n        polygonTemplate.propertyFields.fill = 'color'\n\n        let imageSeries = chart.series.push(new am4maps.MapImageSeries());\n        let imageSeriesTemplate = imageSeries.mapImages.template;\n        let circle = imageSeriesTemplate.createChild(am4core.Circle);\n        circle.radius = 4;\n        circle.strokeWidth = 2;\n        circle.tooltipText = '{title}'\n        circle.interactions.hoverable = true\n        circle.url = '{url}'\n        imageSeriesTemplate.propertyFields.latitude = \"latitude\";\n        imageSeriesTemplate.propertyFields.longitude = \"longitude\";\n        circle.propertyFields.fill = 'fill'\n\n\n        // imageSeries.data = [{\n        //     title: 'Nice, France',\n        //     latitude: 43.7034,\n        //     longitude: 7.2663,\n        //     url: '/citypage/Nice',\n        //     fill: am4core.color(\"#ff3860\")\n        // }]\n\n\n        // chart.backgroundSeries.mapPolygons.template.polygon.fill = am4core.color(\"#f5f5f5\");\n        // chart.backgroundSeries.mapPolygons.template.polygon.fillOpacity = 1;\n\n        let grid = chart.series.push(new am4maps.GraticuleSeries());\n        grid.toBack();\n        // grid.mapLines.template.line.stroke = am4core.color(\"#e33\");\n        // grid.mapLines.template.line.strokeOpacity = 0.2;\n        chart.panBehavior = \"rotateLongLat\";\n        this.chart = chart;\n        axios.get('http://localhost:3000/globeData').then(res => {\n            console.log(res)\n            if (res.status === 200) {\n                imageSeries.data = JSON.parse(res.data).map(city => {\n                    console.log({ ...city, fill: am4core.color(city.fill) })\n                    return { ...city, fill: am4core.color(city.popularity) }\n                })\n            }\n        }).catch(err => alert(err))\n\n    }\n\n    componentWillUnmount() {\n        if (this.chart) {\n            this.chart.dispose();\n        }\n    }\n\n    render() {\n        return (\n            <div id=\"chartdiv\" style={{ width: \"100%\", height: \"500px\" }}></div>\n        );\n    }\n}\n\nexport default Globe;"]},"metadata":{},"sourceType":"module"}