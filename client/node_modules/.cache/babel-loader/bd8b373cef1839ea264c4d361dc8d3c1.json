{"ast":null,"code":"/**\r\n * 3D column series module.\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { ColumnSeries, ColumnSeriesDataItem } from \"../series/ColumnSeries\";\nimport { Column3D } from \"../elements/Column3D\";\nimport { registry } from \"../../core/Registry\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n\nvar ColumnSeries3DDataItem =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(ColumnSeries3DDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function ColumnSeries3DDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"ColumnSeries3DDataItem\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  return ColumnSeries3DDataItem;\n}(ColumnSeriesDataItem);\n\nexport { ColumnSeries3DDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines [[Series]] for a 3D column graph.\r\n *\r\n * @see {@link IColumnSeries3DEvents} for a list of available Events\r\n * @see {@link IColumnSeries3DAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\n\nvar ColumnSeries3D =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(ColumnSeries3D, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function ColumnSeries3D() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"ColumnSeries3D\";\n    _this.columns.template.column3D.applyOnClones = true;\n    _this.columns.template.hiddenState.properties.visible = true;\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  Object.defineProperty(ColumnSeries3D.prototype, \"columnsContainer\", {\n    /**\r\n     * @ignore\r\n     */\n    get: function () {\n      if (this.chart && this.chart.columnsContainer) {\n        return this.chart.columnsContainer;\n      } else {\n        return this._columnsContainer;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Validates data item's elements.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param dataItem  Data item\r\n   */\n\n  ColumnSeries3D.prototype.validateDataElementReal = function (dataItem) {\n    _super.prototype.validateDataElementReal.call(this, dataItem);\n\n    if (dataItem.column) {\n      dataItem.column.dx = this.dx;\n      dataItem.column.dy = this.dy;\n    }\n  };\n  /**\r\n   * Validates data item's elements.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  ColumnSeries3D.prototype.validateDataElements = function () {\n    _super.prototype.validateDataElements.call(this);\n\n    if (this.chart) {\n      this.chart.invalidateLayout();\n    }\n  };\n  /**\r\n   * Returns an element to use for 3D bar.\r\n   * @ignore\r\n   * @return Element.\r\n   */\n\n\n  ColumnSeries3D.prototype.createColumnTemplate = function () {\n    return new Column3D();\n  };\n\n  Object.defineProperty(ColumnSeries3D.prototype, \"depth\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Depth (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"depth\");\n    },\n\n    /**\r\n     * Depth (height) of the slices in the series in pixels.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value  Depth (px)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"depth\", value, true);\n      var template = this.columns.template; // todo: Cone is not Rectangle3D, maybe we should do some I3DShape?\n\n      template.column3D.depth = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ColumnSeries3D.prototype, \"angle\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Angle (0-360)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"angle\");\n    },\n\n    /**\r\n     * Angle of view for the slices in series. (0-360)\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value  Angle (0-360)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"angle\", value);\n      var template = this.columns.template;\n      template.column3D.angle = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return ColumnSeries3D;\n}(ColumnSeries);\n\nexport { ColumnSeries3D };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"ColumnSeries3D\"] = ColumnSeries3D;\nregistry.registeredClasses[\"ColumnSeries3DDataItem\"] = ColumnSeries3DDataItem;","map":null,"metadata":{},"sourceType":"module"}