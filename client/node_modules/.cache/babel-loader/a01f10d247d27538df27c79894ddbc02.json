{"ast":null,"code":"/**\r\n * Funnel tick module.\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Tick } from \"../elements/Tick\";\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\nimport { registry } from \"../../core/Registry\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport * as $path from \"../../core/rendering/Path\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Draws an tick line for a funnel slice connecting it to a related label.\r\n *\r\n * @see {@link IFunnelTickEvents} for a list of available events\r\n * @see {@link IFunnelTickAdapters} for a list of available Adapters\r\n */\n\nvar FunnelTick =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(FunnelTick, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function FunnelTick() {\n    var _this = _super.call(this) || this;\n    /**\r\n     * A label element this tick is attached to.\r\n     */\n\n\n    _this._label = new MutableValueDisposer();\n    /**\r\n     * A slice element this tick is attached to.\r\n     */\n\n    _this._slice = new MutableValueDisposer();\n    _this.className = \"FunnelTick\";\n    _this.element = _this.paper.add(\"path\");\n\n    _this._disposers.push(_this._label);\n\n    _this._disposers.push(_this._slice);\n\n    _this.setPropertyValue(\"locationX\", 0);\n\n    _this.setPropertyValue(\"locationY\", 0);\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Draws the tick element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  FunnelTick.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n\n    var slice = this.slice;\n    var point = slice.getPoint(this.locationX, this.locationY);\n\n    if (point) {\n      var label = this.label;\n      var series = slice.dataItem.component;\n\n      if (series.orientation == \"vertical\") {\n        var x1 = label.pixelX;\n        var y1 = label.pixelY;\n\n        if (!series.labelsOpposite) {\n          x1 += label.maxRight;\n        }\n\n        var p0 = $utils.spritePointToSprite(point, slice, this.parent);\n        var p1 = $utils.spritePointToSprite({\n          x: x1,\n          y: y1\n        }, label.parent, this.parent);\n        this.path = $path.moveTo(p0) + $path.lineTo(p1);\n      } else {\n        var x1 = label.pixelX;\n        var y1 = label.pixelY;\n\n        if (!series.labelsOpposite) {\n          y1 += label.maxBottom;\n        }\n\n        var p0 = $utils.spritePointToSprite(point, slice, this.parent);\n        var p1 = $utils.spritePointToSprite({\n          x: x1,\n          y: y1\n        }, label.parent, this.parent);\n        this.path = $path.moveTo(p0) + $path.lineTo(p1);\n      }\n    }\n  };\n\n  Object.defineProperty(FunnelTick.prototype, \"slice\", {\n    /**\r\n     * @return FunnelSlice\r\n     */\n    get: function () {\n      return this._slice.get();\n    },\n\n    /**\r\n     * [[FunnelSlice]] element tick is attached to.\r\n     *\r\n     * @param slice  Slice\r\n     */\n    set: function (slice) {\n      this._slice.set(slice, new MultiDisposer([slice.events.on(\"transformed\", this.invalidate, this, false), slice.events.on(\"validated\", this.invalidate, this, false)]));\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FunnelTick.prototype, \"label\", {\n    /**\r\n     * @return Label\r\n     */\n    get: function () {\n      return this._label.get();\n    },\n\n    /**\r\n     * [[Label]] element tick is attached to.\r\n     *\r\n     * @param label  Label\r\n     */\n    set: function (label) {\n      this._label.set(label, label.events.on(\"transformed\", this.invalidate, this, false));\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FunnelTick.prototype, \"locationX\", {\n    /**\r\n     * @return Location (0-1)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"locationX\");\n    },\n\n    /**\r\n     * A relative horizontal position within target element a tick is pointing\r\n     * to.\r\n     *\r\n     * A scale is from 0 to 1, where 0 means left edge, and 1 right edge.\r\n     *\r\n     * You can also set any value in-between (e.g. 0.5 will point to the middle\r\n     * of the slice), or outside 0-1 range, which will put tick anchor position\r\n     * outside target element.\r\n     *\r\n     * @param value  Location (0-1)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"locationX\", value, false, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FunnelTick.prototype, \"locationY\", {\n    /**\r\n     * @return Location (0-1)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"locationY\");\n    },\n\n    /**\r\n     * A relative vertical position within target element a tick is pointing\r\n     * to.\r\n     *\r\n     * A scale is from 0 to 1, where 0 means top edge, and 1 bottom edge.\r\n     *\r\n     * You can also set any value in-between (e.g. 0.5 will point to the middle\r\n     * of the slice), or outside 0-1 range, which will put tick anchor position\r\n     * outside target element.\r\n     *\r\n     * @param value  Location (0-1)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"locationY\", value, false, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return FunnelTick;\n}(Tick);\n\nexport { FunnelTick };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"FunnelTick\"] = FunnelTick;","map":null,"metadata":{},"sourceType":"module"}