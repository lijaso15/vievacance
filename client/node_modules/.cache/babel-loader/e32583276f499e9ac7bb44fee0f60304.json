{"ast":null,"code":"import * as $math from \"./Math\";\nimport * as $type from \"./Type\";\n/**\r\n * ============================================================================\r\n * UTILITY FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Searches `array` for `value`.\r\n *\r\n * Returns -1 if not found.\r\n *\r\n * @param array  Source array\r\n * @param value  Value to search\r\n * @returns Index\r\n */\n\nexport function indexOf(array, value) {\n  var length = array.length;\n\n  for (var i = 0; i < length; ++i) {\n    // TODO handle NaN\n    if (array[i] === value) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n/**\r\n * Calls `test` for each element in `array`.\r\n *\r\n * If `test` returns `true` then it immediately returns `true`.\r\n *\r\n * If `test` returns `false` for all of the elements in `array` then it returns `false`.\r\n *\r\n * @param array  Source array\r\n * @param test   Function which is called on each element\r\n * @returns Whether `test` returned true or not\r\n */\n\nexport function any(array, test) {\n  var length = array.length;\n\n  for (var i = 0; i < length; ++i) {\n    if (test(array[i])) {\n      return true;\n    }\n  }\n\n  return false;\n}\n/**\r\n * Calls `fn` function for every member of array and returns a new array out\r\n * of all outputs.\r\n *\r\n * @param array  Source array\r\n * @param fn     Callback function\r\n * @returns New array\r\n */\n\nexport function map(array, fn) {\n  var length = array.length;\n  var output = new Array(length);\n\n  for (var i = 0; i < length; ++i) {\n    output[i] = fn(array[i], i);\n  }\n\n  return output;\n}\n/**\r\n * Iterates through all items in array and calls `fn` function for each of\r\n * them.\r\n *\r\n * @param array  Source array\r\n * @param fn     Callback function\r\n */\n\nexport function each(array, fn) {\n  var length = array.length;\n\n  for (var i = 0; i < length; ++i) {\n    fn(array[i], i);\n  }\n}\n/**\r\n * Iterates through all items in array in reverse order and calls `fn` function for each of\r\n * them.\r\n *\r\n * @param array  Source array\r\n * @param fn     Callback function\r\n */\n\nexport function eachReverse(array, fn) {\n  var i = array.length;\n\n  while (i--) {\n    fn(array[i], i);\n  }\n}\n/**\r\n * Iterates through all items in array and calls `fn` function for each of\r\n * them.\r\n *\r\n * If `fn` call evaluates to `false`, further iteration is cancelled.\r\n *\r\n * @param array  Source array\r\n * @param fn     Callback function\r\n */\n\nexport function eachContinue(array, fn) {\n  var length = array.length;\n\n  for (var i = 0; i < length; ++i) {\n    if (!fn(array[i], i)) {\n      break;\n    }\n  }\n}\n/**\r\n * Shifts an item at `index` towards beginning of the array.\r\n *\r\n * @param array  Source array\r\n * @param index  Target element index\r\n */\n\nexport function shiftLeft(array, index) {\n  var length = array.length;\n\n  for (var i = index; i < length; ++i) {\n    array[i - index] = array[i];\n  }\n\n  array.length = length - index;\n}\n/**\r\n * Returns the last item of the array.\r\n *\r\n * @param array  Source array\r\n * @returns Last item\r\n */\n\nexport function last(array) {\n  var length = array.length;\n  return length ? array[length - 1] : undefined;\n}\n/**\r\n * Returns the first item of the array.\r\n *\r\n * @param array  Source array\r\n * @returns Last item\r\n */\n\nexport function first(array) {\n  return array[0];\n}\n/**\r\n * Inserts `element` into `array` at `index`.\r\n *\r\n * Caps `index` to be between `0` and `array.length`\r\n *\r\n * @param array    Source array\r\n * @param element  Item to insert\r\n * @param array    Index to insert item at\r\n */\n\nexport function insert(array, element, index) {\n  //if (array) {\n  index = $math.fitToRange(index, 0, array.length);\n  array.splice(index, 0, element); //}\n}\n/**\r\n * Removes all copies of `element` from `array` (if they exist) and then\r\n * inserts `element` at `index`.\r\n *\r\n * @param array    Source array\r\n * @param element  Item\r\n * @param array    Index to move item to\r\n */\n\nexport function setIndex(array, element, index) {\n  remove(array, element);\n  insert(array, element, index);\n}\n/**\r\n * Pushes all of the elements from `input` into `array`.\r\n *\r\n * @param array  Output array\r\n * @param input  Input array\r\n */\n\nexport function pushAll(array, input) {\n  var length = input.length;\n\n  for (var i = 0; i < length; ++i) {\n    array.push(input[i]);\n  }\n}\n/**\r\n * Removes `element` from `array`.\r\n *\r\n * If there are multiple copies of `element`, they are all removed.\r\n *\r\n * @param array    Source array\r\n * @param element  Item to remove\r\n */\n\nexport function remove(array, element) {\n  var found = false;\n  var index = array.indexOf(element);\n\n  if (index !== -1) {\n    found = true;\n    array.splice(index, 1);\n    var length_1 = array.length;\n\n    while (index < length_1) {\n      // TODO handle NaN\n      if (array[index] === element) {\n        array.splice(index, 1);\n        --length_1;\n      } else {\n        ++index;\n      }\n    }\n  }\n\n  return found;\n}\n/**\r\n * Adds an `element` to `array`.\r\n *\r\n * If array already contains and item like this, it is removed before adding\r\n * it again.\r\n *\r\n * Optionally `toIndex` can be specified to add element at specific index.\r\n *\r\n * @param array    Source array\r\n * @param element  Item to add\r\n * @param array    Index to move item to\r\n */\n\nexport function move(array, element, toIndex) {\n  // @todo this implementation must be the same as the List.moveValue method\n  // @todo don't do anything if the desired index is the same as the current index\n  var index = indexOf(array, element); // @todo remove all old values rather than only the first ?\n\n  if (index !== -1) {\n    removeIndex(array, index);\n  }\n\n  if (toIndex == null) {\n    array.push(element);\n  } else {\n    insertIndex(array, toIndex, element);\n  }\n}\n/**\r\n * Inserts `element` into `array` at `index`.\r\n *\r\n * If `index` is not provided, it will insert `element` at the end of `array`.\r\n *\r\n * @param array    Source array\r\n * @param element  Item to add\r\n * @param array    Index to add item at\r\n */\n\nexport function add(array, element, index) {\n  // Append to the end if index is not set\n  if (!$type.isNumber(index)) {\n    array.push(element);\n  } // Add to the beginning of array if index is 0\n  else if (index === 0) {\n      array.unshift(element);\n    } // Add to indicated place if index is set\n    else {\n        array.splice(index, 0, element);\n      }\n}\n/**\r\n * Removes `element` from `array` (if it exists) and then inserts `element` at\r\n * `index`.\r\n *\r\n * If `index` is not provided, it will insert `element` at the end of `array`.\r\n *\r\n * @param array    Source array\r\n * @param element  Item to remove\r\n * @param array    Index to move item to\r\n */\n\nexport function replace(array, element, index) {\n  // check if exists\n  var ind = array.indexOf(element); // remove if exists\n\n  if (ind !== -1) {\n    array.splice(ind, 1);\n  } // add to end if index is not set\n\n\n  if (!$type.isNumber(index)) {\n    array.push(element);\n  } // add to indicated place if index is set\n  else {\n      array.splice(index, 0, element);\n    }\n}\n/**\r\n * Wraps `input` in an array, if it isn't already an array.\r\n *\r\n * @param input  Source value\r\n * @return An array\r\n */\n\nexport function toArray(input) {\n  if (Array.isArray(input)) {\n    return input;\n  } else {\n    return [input];\n  }\n}\n/**\r\n * Returns `true` if `element` exists in `array`.\r\n *\r\n * @param array    Source array\r\n * @param element  Item to search for\r\n * @returns Item in array?\r\n */\n\nexport function has(array, element) {\n  return indexOf(array, element) !== -1;\n}\n/**\r\n * Returns a shallow copy of `array`.\r\n *\r\n * @param array  Source array\r\n * @returns Copy of the array\r\n */\n\nexport function copy(array) {\n  var length = array.length; // It's faster to create the array with a pre-defined length\n\n  var output = new Array(length);\n\n  for (var i = 0; i < length; ++i) {\n    // Because the array has a pre-defined length, we have to assign rather than push\n    // This is also faster than pushing\n    output[i] = array[i];\n  }\n\n  return output;\n}\n/**\r\n * Returns a copy of `array` which contains all the elements between `start`\r\n * and `end`. (including `start` and excluding `end`)\r\n *\r\n * If `end` is not provided, it defaults to `array.length`.\r\n *\r\n * @param array  Source array\r\n * @param start  Start index\r\n * @param end    End index\r\n * @returns Part of the array\r\n */\n\nexport function slice(array, start, end) {\n  if (end === void 0) {\n    end = array.length;\n  }\n\n  var output = new Array(end - start);\n\n  for (var i = start; i < end; ++i) {\n    output[i - start] = array[i];\n  }\n\n  return output;\n}\n/**\r\n * Inserts a value into array at specific index.\r\n *\r\n * @param array  Source array\r\n * @param index  Index\r\n * @param value  Value to insert\r\n */\n\nexport function insertIndex(array, index, value) {\n  array.splice(index, 0, value);\n}\n/**\r\n * Removes a value from array at specific index.\r\n *\r\n * @param array  Source array\r\n * @param index  Index\r\n */\n\nexport function removeIndex(array, index) {\n  array.splice(index, 1);\n}\n/**\r\n * Orders an array using specific `ordering` function and returns index of\r\n * the `value`.\r\n *\r\n * @ignore Exclude from docs\r\n * @param array     Source array\r\n * @param ordering  An ordering function\r\n * @param value     Value to search for\r\n * @returns Result of the search\r\n */\n\nexport function getSortedIndex(array, ordering, value) {\n  var start = 0;\n  var end = array.length;\n  var found = false;\n\n  while (start < end) {\n    // TODO is this faster/slower than using Math.floor ?\n    var pivot = start + end >> 1;\n    var order = ordering(value, array[pivot]); // less\n\n    if (order < 0) {\n      end = pivot; // equal\n    } else if (order === 0) {\n      found = true;\n      start = pivot + 1; // more\n    } else {\n      start = pivot + 1;\n    }\n  }\n\n  return {\n    found: found,\n    index: found ? start - 1 : start\n  };\n}\n/**\r\n * Searches the array using custom function and returns index of the item if\r\n * found.\r\n *\r\n * Will call `matches` function on all items of the array. If return value\r\n * evaluates to `true`, index is returned.\r\n *\r\n * Otherwise returns -1.\r\n *\r\n * @param array    Source array\r\n * @param matches  Search function\r\n * @returns Index of the item if found\r\n */\n\nexport function findIndex(array, matches) {\n  var length = array.length;\n\n  for (var i = 0; i < length; ++i) {\n    if (matches(array[i], i)) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n/**\r\n * Searches the array using custom function and returns item if found.\r\n *\r\n * Will call `matches` function on all items of the array. If return value\r\n * evaluates to `true`, index is returned.\r\n *\r\n * Otherwise returns `undefined`.\r\n *\r\n * @param array    Source array\r\n * @param matches  Search function\r\n * @returns Item if found\r\n */\n\nexport function find(array, matches) {\n  var index = findIndex(array, matches);\n\n  if (index !== -1) {\n    return array[index];\n  }\n}\n/**\r\n * Iterates through all items in array and calls `fn` function for each of\r\n * them.\r\n *\r\n * @param array  Source array\r\n * @param fn     Callback function\r\n */\n\nexport function shuffle(array) {\n  // https://stackoverflow.com/a/2450976/449477\n  var currentIndex = array.length,\n      temporaryValue,\n      randomIndex; // While there remain elements to shuffle...\n\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1; // And swap it with the current element.\n\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}