{"ast":null,"code":"var _jsxFileName = \"/Users/Overseer/Desktop/fullstack_app/client/src/components/Forms/Signup.js\";\n// Render Prop\nimport React from 'react';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport 'bulma/css/bulma.css';\nimport { FormikConsumer } from 'formik';\nimport Debug from '../../utils/Debug';\nimport * as Yup from \"yup\";\nimport axios from \"axios\";\nimport Input from './Input';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nconst SignupSchema = Yup.object().shape({\n  username: Yup.string().min(6, 'username must be at least 6 characters').max(24, 'username cannot be greater than 20 characters').required('username is required'),\n  email: Yup.string().email('Invalid email').required('Required'),\n  password: Yup.string().min(6, 'password must be at least 6 characters').max(20, 'password cannot be greater than 20 characters').matches(/^(?=.*[a-z])/g, 'The password must contain at least 1 lowercase alphabetical character').matches(/^(?=.*[A-Z])/g, 'The password must contain at least 1 uppercase alphabetical character').matches(/^(?=.*[0-9])/g, 'The password must contain at least 1 numeric character').required('Required')\n});\n\nconst Signup = () => {\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    className: \"title is-4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, \"Sign in\"), React.createElement(Formik, {\n    initialValues: {\n      username: 'Jasonli',\n      email: 'jasonli@mail.com',\n      password: 'Password1'\n    },\n    validationSchema: SignupSchema,\n    onSubmit: (values, actions) => {\n      console.log(values); // console.log(actions)\n\n      axios.post('http://localhost:3001/api/users', values).then(res => {\n        if (res.status === 200) {}\n      }).catch(err => {\n        console.log(err);\n      });\n      actions.setSubmitting(false);\n    },\n    render: ({\n      isSubmitting\n    }) => React.createElement(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(Field, {\n      name: \"username\",\n      component: Input,\n      type: \"text\",\n      placeholder: \"username\",\n      icons: {\n        left: 'faUser',\n        right: 'faCheck'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }), React.createElement(Field, {\n      className: \"input\",\n      type: \"email\",\n      name: \"email\",\n      placeholder: \"email\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }), React.createElement(ErrorMessage, {\n      name: \"email\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }), React.createElement(Field, {\n      className: \"input\",\n      type: \"password\",\n      name: \"password\",\n      placeholder: \"password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }), React.createElement(ErrorMessage, {\n      name: \"password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"button is-link\",\n      type: \"submit\",\n      disabled: isSubmitting,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, \"Submit\"), React.createElement(Debug, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }));\n};\n\nexport default Signup;","map":{"version":3,"sources":["/Users/Overseer/Desktop/fullstack_app/client/src/components/Forms/Signup.js"],"names":["React","Formik","Form","Field","ErrorMessage","FormikConsumer","Debug","Yup","axios","Input","FontAwesomeIcon","SignupSchema","object","shape","username","string","min","max","required","email","password","matches","Signup","values","actions","console","log","post","then","res","status","catch","err","setSubmitting","isSubmitting","left","right"],"mappings":"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","sourcesContent":["// Render Prop\nimport React from 'react';\nimport { Formik, Form, Field, ErrorMessage } from 'formik'\nimport 'bulma/css/bulma.css'\nimport { FormikConsumer } from 'formik'\nimport Debug from '../../utils/Debug'\nimport * as Yup from \"yup\"\nimport axios from \"axios\"\nimport Input from './Input'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\n\n\nconst SignupSchema = Yup.object().shape({\n    username: Yup.string()\n        .min(6, 'username must be at least 6 characters')\n        .max(24, 'username cannot be greater than 20 characters')\n        .required('username is required'),\n    email: Yup.string()\n        .email('Invalid email')\n        .required('Required'),\n    password: Yup.string()\n        .min(6, 'password must be at least 6 characters')\n        .max(20, 'password cannot be greater than 20 characters')\n        .matches(/^(?=.*[a-z])/g, 'The password must contain at least 1 lowercase alphabetical character')\n        .matches(/^(?=.*[A-Z])/g, 'The password must contain at least 1 uppercase alphabetical character')\n        .matches(/^(?=.*[0-9])/g, 'The password must contain at least 1 numeric character')\n        .required('Required')\n});\n\n\nconst Signup = () => {\n    return <div>\n        <h1 className=\"title is-4\">Sign in</h1>\n        <Formik\n            initialValues={{\n                username: 'Jasonli',\n                email: 'jasonli@mail.com',\n                password: 'Password1',\n            }}\n            validationSchema={SignupSchema}\n            onSubmit={(values, actions) => {\n                console.log(values)\n                // console.log(actions)\n\n                axios.post('http://localhost:3001/api/users', values).then((res) => {\n                    if (res.status === 200) {\n\n                    }\n                }).catch((err) => {\n                    console.log(err)\n                })\n                actions.setSubmitting(false)\n            }\n            }\n            render={({ isSubmitting }) => (\n                <Form>\n                    <Field name=\"username\" component={Input} type=\"text\" placeholder=\"username\" icons={{ left: 'faUser', right: 'faCheck' }} />\n                    {/* <Field className=\"input\" name=\"username\" placeholder=\"username\" /> */}\n                    {/* <ErrorMessage name=\"username\" /> */}\n                    <Field className=\"input\" type=\"email\" name=\"email\" placeholder=\"email\" />\n                    <ErrorMessage name=\"email\" />\n                    <Field className=\"input\" type=\"password\" name=\"password\" placeholder=\"password\" />\n                    <ErrorMessage name=\"password\" />\n                    <button className=\"button is-link\" type=\"submit\" disabled={isSubmitting}>Submit</button>\n                    <Debug />\n                </Form>\n            )}\n\n        />\n    </div>\n}\n\nexport default Signup"]},"metadata":{},"sourceType":"module"}