{"ast":null,"code":"/**\r\n * Functionality for drawing triangles.\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Sprite } from \"../Sprite\";\nimport { registry } from \"../Registry\";\nimport * as $path from \"../rendering/Path\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Used to draw a triangle.\r\n *\r\n * @see {@link ITriangleEvents} for a list of available events\r\n * @see {@link ITriangleAdapters} for a list of available Adapters\r\n */\n\nvar Triangle =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Triangle, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function Triangle() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"Triangle\";\n    _this.element = _this.paper.add(\"path\");\n    _this.direction = \"top\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Draws the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Triangle.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n\n    var w = this.pixelWidth;\n    var h = this.pixelHeight;\n    var path;\n\n    switch (this.direction) {\n      case \"right\":\n        path = $path.moveTo({\n          x: 0,\n          y: 0\n        }) + $path.lineTo({\n          x: w,\n          y: h / 2\n        }) + $path.lineTo({\n          x: 0,\n          y: h\n        }) + $path.closePath();\n        break;\n\n      case \"left\":\n        path = $path.moveTo({\n          x: w,\n          y: 0\n        }) + $path.lineTo({\n          x: 0,\n          y: h / 2\n        }) + $path.lineTo({\n          x: w,\n          y: h\n        }) + $path.closePath();\n        break;\n\n      case \"bottom\":\n        path = $path.moveTo({\n          x: 0,\n          y: 0\n        }) + $path.lineTo({\n          x: w,\n          y: 0\n        }) + $path.lineTo({\n          x: w / 2,\n          y: h\n        }) + $path.closePath();\n        break;\n\n      case \"top\":\n        path = $path.moveTo({\n          x: w / 2,\n          y: 0\n        }) + $path.lineTo({\n          x: w,\n          y: h\n        }) + $path.lineTo({\n          x: 0,\n          y: h\n        }) + $path.closePath();\n        break;\n    }\n\n    this.path = path;\n  };\n\n  Object.defineProperty(Triangle.prototype, \"direction\", {\n    /**\r\n     * Returns direction of a triangle\r\n     *\r\n     * @return value\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"direction\");\n    },\n\n    /**\r\n     * Sets direction of a triangle\r\n     *\r\n     * @param value\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"direction\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Triangle;\n}(Sprite);\n\nexport { Triangle };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"Triangle\"] = Triangle;","map":null,"metadata":{},"sourceType":"module"}