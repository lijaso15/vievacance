{"ast":null,"code":"/**\r\n * Contains code and logic for generating radial gradients.\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { BaseObject } from \"../../Base\";\nimport { List } from \"../../utils/List\";\nimport { getGhostPaper } from \"../Paper\";\nimport { registry } from \"../../Registry\";\nimport * as $iter from \"../../utils/Iterator\";\nimport * as $type from \"../../utils/Type\";\nimport { Percent } from \"../../utils/Percent\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Radial gradient class.\r\n */\n\nvar RadialGradient =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(RadialGradient, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function RadialGradient() {\n    var _this = _super.call(this) || this;\n    /**\r\n     * List of colors switch definitions in a gradient.\r\n     */\n\n\n    _this._stops = new List();\n    _this.element = _this.paper.addGroup(\"radialGradient\");\n    _this.id = \"gradient-\" + registry.getUniqueId();\n\n    _this.element.attr({\n      \"id\": _this.id\n    });\n\n    _this._disposers.push(_this.element);\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Draws gradient.\r\n   */\n\n\n  RadialGradient.prototype.draw = function () {\n    var _this = this;\n\n    var gradientElement = this.element;\n\n    if ($type.isNumber(this.cx)) {\n      var value = this.cx;\n\n      if (value instanceof Percent) {\n        value = value.percent + \"%\";\n      }\n\n      gradientElement.attr({\n        \"cx\": value\n      });\n    }\n\n    if ($type.isNumber(this.cy)) {\n      var value = this.cy;\n\n      if (value instanceof Percent) {\n        value = value.percent + \"%\";\n      }\n\n      gradientElement.attr({\n        \"cy\": value\n      });\n    }\n\n    if (this.fx) {\n      var value = this.fx;\n\n      if (value instanceof Percent) {\n        value = value.percent + \"%\";\n      }\n\n      gradientElement.attr({\n        \"fx\": value\n      });\n    }\n\n    if (this.fy) {\n      var value = this.fy;\n\n      if (value instanceof Percent) {\n        value = value.percent + \"%\";\n      }\n\n      gradientElement.attr({\n        \"fy\": value\n      });\n    }\n\n    gradientElement.removeChildNodes();\n    $iter.each($iter.indexed(this._stops.iterator()), function (a) {\n      var i = a[0];\n      var stop = a[1];\n      var offset = stop.offset;\n\n      if (!$type.isNumber(offset)) {\n        offset = i / (_this._stops.length - 1);\n      }\n\n      var gradientStop = _this.paper.add(\"stop\");\n\n      if ($type.hasValue(stop.color)) {\n        gradientStop.attr({\n          \"stop-color\": stop.color.toString()\n        });\n      }\n\n      if ($type.isNumber(stop.opacity)) {\n        gradientStop.attr({\n          \"stop-opacity\": stop.opacity\n        });\n      }\n\n      if ($type.isNumber(offset)) {\n        gradientStop.attr({\n          \"offset\": offset\n        });\n      }\n\n      gradientElement.add(gradientStop);\n    });\n  };\n  /**\r\n   * Adds a color step to the gradient.\r\n   *\r\n   * @param color    Color (hex code or named color)\r\n   * @param opacity  Opacity (value from 0 to 1; 0 completely transaprent, 1 fully opaque)\r\n   * @param offset   Position of color in the gradient (value 0 to 1; 0 meaning start of the gradient and 1 end)\r\n   */\n\n\n  RadialGradient.prototype.addColor = function (color, opacity, offset) {\n    this._stops.push({\n      color: color,\n      opacity: opacity,\n      offset: offset\n    });\n\n    this.draw();\n  };\n\n  Object.defineProperty(RadialGradient.prototype, \"paper\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Paper\r\n     */\n    get: function get() {\n      if (this._paper) {\n        return this._paper;\n      }\n\n      return getGhostPaper();\n    },\n\n    /**\r\n     * A [[Paper]] instace to use for the gradient.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param paper  Paper\r\n     */\n    set: function set(paper) {\n      if (this._paper != paper) {\n        this._paper = paper;\n        this.draw();\n        paper.appendDef(this.element);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(RadialGradient.prototype, \"cx\", {\n    get: function get() {\n      return this._cx;\n    },\n\n    /**\r\n     * Center x coordinate of the gradient, can be set as number or Percent\r\n     *\r\n     * @param point  Center point\r\n     */\n    set: function set(value) {\n      this._cx = value;\n      this.draw();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(RadialGradient.prototype, \"cy\", {\n    get: function get() {\n      return this._cy;\n    },\n\n    /**\r\n     * Center y coordinate of the gradient, can be set as number or Percent\r\n     *\r\n     * @param point  Center point\r\n     */\n    set: function set(value) {\n      this._cy = value;\n      this.draw();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(RadialGradient.prototype, \"fx\", {\n    get: function get() {\n      return this._fx;\n    },\n\n    /**\r\n     * y coordinate of the focal point of a gradient, can be set in pixels or as Percent\r\n     *\r\n     * @param point  Center point\r\n     */\n    set: function set(value) {\n      this._fx = value;\n      this.draw();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(RadialGradient.prototype, \"fy\", {\n    get: function get() {\n      return this._fy;\n    },\n\n    /**\r\n     * y coordinate of the focal point of a gradient, can be set in pixels or as Percent\r\n     *\r\n     * @param point  Center point\r\n     */\n    set: function set(value) {\n      this._fy = value;\n      this.draw();\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  RadialGradient.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n\n    this.stops.copyFrom(source.stops);\n    this.cx = source.cx;\n    this.cy = source.cy;\n    this.fx = source.fx;\n    this.fy = source.fy;\n  };\n\n  Object.defineProperty(RadialGradient.prototype, \"stops\", {\n    /**\r\n     * A list of color stops in the gradient.\r\n     *\r\n     * @return Stops\r\n     */\n    get: function get() {\n      return this._stops;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Clears the gradient.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  RadialGradient.prototype.clear = function () {\n    this._stops.clear();\n  };\n\n  return RadialGradient;\n}(BaseObject);\n\nexport { RadialGradient };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"RadialGradient\"] = RadialGradient;","map":null,"metadata":{},"sourceType":"module"}