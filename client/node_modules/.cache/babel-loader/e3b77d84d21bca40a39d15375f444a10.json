{"ast":null,"code":"/**\r\n * A plugin base class.\r\n */\n\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * This is a base class that provides core functionality for plugins.\r\n *\r\n * The easiest way to start off with a new plugin is to extend this class.\r\n *\r\n * It will provide all the mandatory functionality, such as disposers.\r\n *\r\n * @since 4.2.2\r\n */\nvar Plugin =\n/** @class */\nfunction () {\n  /**\r\n   * Constructor\r\n   */\n  function Plugin() {\n    /**\r\n     * Is this object disposed?\r\n     */\n    this._disposed = false;\n    /**\r\n     * List of IDisposer which will be disposed when the BaseObject is disposed.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n    this._disposers = []; // Nothing to do here\n  }\n  /**\r\n   * Decorates series with required events and adapters used to hijack its\r\n   * data.\r\n   */\n\n\n  Plugin.prototype.init = function () {// Does nothing\n    // Override it\n  };\n  /**\r\n   * Returns if this element is already disposed.\r\n   *\r\n   * @return Is disposed?\r\n   */\n\n\n  Plugin.prototype.isDisposed = function () {\n    return this._disposed;\n  };\n  /**\r\n   * Disposes this object and related stuff.\r\n   */\n\n\n  Plugin.prototype.dispose = function () {\n    if (!this._disposed) {\n      this._disposed = true;\n      var a = this._disposers;\n      this._disposers = null;\n\n      while (a.length !== 0) {\n        var disposer = a.shift();\n        disposer.dispose();\n      }\n    }\n  };\n\n  return Plugin;\n}();\n\nexport { Plugin };","map":null,"metadata":{},"sourceType":"module"}