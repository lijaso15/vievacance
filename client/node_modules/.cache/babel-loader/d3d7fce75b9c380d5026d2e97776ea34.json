{"ast":null,"code":"/**\r\n * Zoom control module\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Container } from \"../../core/Container\";\nimport { Button } from \"../../core/elements/Button\";\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\nimport { keyboard } from \"../../core/utils/Keyboard\";\nimport { getInteraction } from \"../../core/interaction/Interaction\";\nimport { percent } from \"../../core/utils/Percent\";\nimport { registry } from \"../../core/Registry\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Creates a control for zooming the map.\r\n *\r\n * @see {@link IZoomControlEvents} for a list of available events\r\n * @see {@link IZoomControlAdapters} for a list of available Adapters\r\n * @important\r\n */\n\nvar ZoomControl =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(ZoomControl, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function ZoomControl() {\n    var _this = _super.call(this) || this;\n    /**\r\n     * A target map.\r\n     */\n\n\n    _this._chart = new MutableValueDisposer();\n    _this.className = \"ZoomControl\";\n    _this.align = \"right\";\n    _this.valign = \"bottom\";\n    _this.layout = \"vertical\";\n\n    _this.padding(5, 5, 5, 5);\n\n    var interfaceColors = new InterfaceColorSet();\n\n    var plusButton = _this.createChild(Button);\n\n    plusButton.shouldClone = false;\n    plusButton.label.text = \"+\"; //plusButton.fontFamily = \"Verdana\";\n\n    _this.plusButton = plusButton;\n\n    var slider = _this.createChild(Container);\n\n    slider.shouldClone = false;\n    slider.background.fill = interfaceColors.getFor(\"alternativeBackground\");\n    slider.background.fillOpacity = 0.05;\n    slider.background.events.on(\"hit\", _this.handleBackgroundClick, _this, false);\n    slider.events.on(\"sizechanged\", _this.updateThumbSize, _this, false);\n    _this.slider = slider;\n    var thumb = slider.createChild(Button);\n    thumb.shouldClone = false;\n    thumb.padding(0, 0, 0, 0);\n    thumb.draggable = true;\n    thumb.events.on(\"drag\", _this.handleThumbDrag, _this, false);\n    _this.thumb = thumb;\n\n    var minusButton = _this.createChild(Button);\n\n    minusButton.shouldClone = false;\n    minusButton.label.text = \"-\"; //minusButton.fontFamily = \"Verdana\";\n\n    _this.minusButton = minusButton; // Set roles\n\n    _this.thumb.role = \"slider\";\n    _this.thumb.readerLive = \"polite\"; // Set reader text\n\n    _this.thumb.readerTitle = _this.language.translate(\"Use arrow keys to zoom in and out\");\n    _this.minusButton.readerTitle = _this.language.translate(\"Press ENTER to zoom in\");\n    _this.plusButton.readerTitle = _this.language.translate(\"Press ENTER to zoom out\");\n\n    _this.applyTheme();\n\n    _this.events.on(\"propertychanged\", function (event) {\n      if (event.property == \"layout\") {\n        _this.fixLayout();\n      }\n    }, undefined, false);\n\n    _this._disposers.push(_this._chart);\n\n    _this.fixLayout();\n\n    return _this;\n  }\n  /**\r\n   * @ignore\r\n   */\n\n\n  ZoomControl.prototype.fixLayout = function () {\n    var plusButton = this.plusButton;\n    var minusButton = this.minusButton;\n    var thumb = this.thumb;\n    var slider = this.slider;\n    plusButton.x = undefined;\n    plusButton.y = undefined;\n    minusButton.x = undefined;\n    minusButton.y = undefined;\n    thumb.x = undefined;\n    thumb.y = undefined;\n    slider.x = undefined;\n    slider.y = undefined;\n    plusButton.padding(6, 10, 6, 10);\n    minusButton.padding(6, 10, 6, 10);\n    minusButton.label.align = \"center\";\n    minusButton.label.valign = \"middle\";\n    plusButton.label.align = \"center\";\n    plusButton.label.valign = \"middle\";\n\n    if (this.layout == \"vertical\") {\n      this.width = 40;\n      this.height = undefined;\n      minusButton.width = percent(100);\n      minusButton.height = undefined;\n      thumb.width = percent(100);\n      thumb.height = undefined;\n      plusButton.width = percent(100);\n      plusButton.height = undefined;\n      slider.width = percent(100);\n      minusButton.marginTop = 1;\n      plusButton.marginBottom = 2;\n      slider.height = 0;\n      minusButton.toFront();\n      plusButton.toBack();\n      thumb.minX = 0;\n      thumb.maxX = 0;\n      thumb.minY = 0;\n    } else if (this.layout == \"horizontal\") {\n      this.height = 40;\n      this.width = undefined;\n      minusButton.height = percent(100);\n      minusButton.width = undefined;\n      plusButton.height = percent(100);\n      plusButton.width = undefined;\n      thumb.height = percent(100);\n      thumb.width = undefined;\n      thumb.minX = 0;\n      thumb.minY = 0;\n      thumb.maxY = 0;\n      slider.height = percent(100);\n      slider.width = 0;\n      minusButton.toBack();\n      plusButton.toFront();\n    }\n  };\n  /**\r\n   * Handles zoom operation after clicking on the slider background.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event  Event\r\n   */\n\n\n  ZoomControl.prototype.handleBackgroundClick = function (event) {\n    var sprite = event.target;\n    var y = event.spritePoint.y;\n    var chart = this.chart;\n    var maxPower = Math.log(chart.maxZoomLevel) / Math.LN2;\n    var minPower = Math.log(chart.minZoomLevel) / Math.LN2;\n    var power = (sprite.pixelHeight - y) / sprite.pixelHeight * (minPower + (maxPower - minPower));\n    var zoomLevel = Math.pow(2, power);\n    chart.zoomToGeoPoint(chart.zoomGeoPoint, zoomLevel);\n  };\n\n  Object.defineProperty(ZoomControl.prototype, \"chart\", {\n    /**\r\n     * @return Map/chart\r\n     */\n    get: function () {\n      return this._chart.get();\n    },\n\n    /**\r\n     * A main chart/map that this zoom control is for.\r\n     *\r\n     * @param chart  Map/chart\r\n     */\n    set: function (chart) {\n      var _this = this;\n\n      this._chart.set(chart, new MultiDisposer([chart.events.on(\"maxsizechanged\", this.updateThumbSize, this, false), chart.events.on(\"zoomlevelchanged\", this.updateThumb, this, false), this.minusButton.events.on(\"hit\", function () {\n        chart.zoomOut(chart.zoomGeoPoint);\n      }, chart, false), getInteraction().body.events.on(\"keyup\", function (ev) {\n        if (_this.topParent.hasFocused) {\n          if (keyboard.isKey(ev.event, \"enter\")) {\n            if (_this.minusButton.isFocused) {\n              chart.zoomOut();\n            } else if (_this.plusButton.isFocused) {\n              chart.zoomIn();\n            }\n          } else if (keyboard.isKey(ev.event, \"plus\")) {\n            chart.zoomIn();\n          } else if (keyboard.isKey(ev.event, \"minus\")) {\n            chart.zoomOut();\n          }\n        }\n      }, chart), this.plusButton.events.on(\"hit\", function () {\n        chart.zoomIn(chart.zoomGeoPoint);\n      }, chart, false)]));\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Updates the slider's thumb size based on the available zoom space.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  ZoomControl.prototype.updateThumbSize = function () {\n    var chart = this.chart;\n\n    if (chart) {\n      var slider = this.slider;\n      var thumb = this.thumb;\n\n      if (this.layout == \"vertical\") {\n        thumb.minHeight = Math.min(this.slider.pixelHeight, 20);\n        thumb.height = slider.pixelHeight / this.stepCount;\n        thumb.maxY = slider.pixelHeight - thumb.pixelHeight;\n\n        if (thumb.pixelHeight <= 1) {\n          thumb.visible = false;\n        } else {\n          thumb.visible = true;\n        }\n      } else {\n        thumb.minWidth = Math.min(this.slider.pixelWidth, 20);\n        thumb.width = slider.pixelWidth / this.stepCount;\n        thumb.maxX = slider.pixelWidth - thumb.pixelWidth;\n\n        if (thumb.pixelWidth <= 1) {\n          thumb.visible = false;\n        } else {\n          thumb.visible = true;\n        }\n      }\n    }\n  };\n  /**\r\n   * Updates thumb according to current zoom position from map.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  ZoomControl.prototype.updateThumb = function () {\n    var slider = this.slider;\n    var chart = this.chart;\n    var thumb = this.thumb;\n\n    if (!thumb.isDown) {\n      var step = (Math.log(chart.zoomLevel) - Math.log(this.chart.minZoomLevel)) / Math.LN2;\n\n      if (this.layout == \"vertical\") {\n        thumb.y = slider.pixelHeight - (slider.pixelHeight - thumb.pixelHeight) * step / this.stepCount - thumb.pixelHeight;\n      } else {\n        thumb.x = slider.pixelWidth * step / this.stepCount;\n      }\n    }\n  };\n  /**\r\n   * Zooms the actual map when slider position changes.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  ZoomControl.prototype.handleThumbDrag = function () {\n    var slider = this.slider;\n    var chart = this.chart;\n    var thumb = this.thumb;\n    var step;\n    var minStep = Math.log(this.chart.minZoomLevel) / Math.LN2;\n\n    if (this.layout == \"vertical\") {\n      step = this.stepCount * (slider.pixelHeight - thumb.pixelY - thumb.pixelHeight) / (slider.pixelHeight - thumb.pixelHeight);\n    } else {\n      step = this.stepCount * thumb.pixelX / slider.pixelWidth;\n    }\n\n    step = minStep + step;\n    var zoomLevel = Math.pow(2, step);\n    chart.zoomToGeoPoint(undefined, zoomLevel, false, 0);\n  };\n\n  Object.defineProperty(ZoomControl.prototype, \"stepCount\", {\n    /**\r\n     * Returns the step countfor the slider grid according to map's min and max\r\n     * zoom level settings.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return Step count\r\n     */\n    get: function () {\n      return Math.log(this.chart.maxZoomLevel) / Math.LN2 - Math.log(this.chart.minZoomLevel) / Math.LN2;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Creates a background element for slider control.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @return Background\r\n   */\n\n  ZoomControl.prototype.createBackground = function () {\n    return new RoundedRectangle();\n  };\n\n  return ZoomControl;\n}(Container);\n\nexport { ZoomControl };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"ZoomControl\"] = ZoomControl;","map":null,"metadata":{},"sourceType":"module"}