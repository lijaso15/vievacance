{"ast":null,"code":"/**\r\n * Ellipse module.\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Circle } from \"./Circle\";\nimport { registry } from \"../Registry\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Draws an ellipse\r\n * @see {@link IEllipseEvents} for a list of available events\r\n * @see {@link IEllipseAdapters} for a list of available Adapters\r\n */\n\nvar Ellipse =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Ellipse, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function Ellipse() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"Ellipse\";\n    _this.element = _this.paper.add(\"ellipse\");\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Draws the ellipsis.\r\n   */\n\n\n  Ellipse.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n\n    this.element.attr({\n      \"rx\": this.radius\n    });\n    this.element.attr({\n      \"ry\": this.radiusY\n    });\n  };\n\n  Object.defineProperty(Ellipse.prototype, \"radiusY\", {\n    /**\r\n     * @return Vertical radius\r\n     */\n    get: function get() {\n      return this.innerHeight / 2;\n    },\n\n    /**\r\n     * Vertical radius.\r\n     *\r\n     * It's a relative size to the `radius`.\r\n     *\r\n     * E.g. 0.8 will mean the height of the ellipsis will be 80% of it's\r\n     * horizontal radius.\r\n     *\r\n     * @param value  Vertical radius\r\n     */\n    set: function set(value) {\n      this.height = value * 2;\n      this.invalidate();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Ellipse.prototype, \"radius\", {\n    /**\r\n     * @return Horizontal radius\r\n     */\n    get: function get() {\n      return this.innerWidth / 2;\n    },\n\n    /**\r\n     * Horizontal radius.\r\n     *\r\n     * @param value  Horizontal radius\r\n     */\n    set: function set(value) {\n      this.width = value * 2;\n      this.invalidate();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Ellipse;\n}(Circle);\n\nexport { Ellipse };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"Ellipse\"] = Ellipse;","map":null,"metadata":{},"sourceType":"module"}