{"ast":null,"code":"/**\r\n * Module, defining base Axis Renderer.\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Container } from \"../../core/Container\";\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\nimport { AxisLine } from \"./AxisLine\";\nimport { AxisFill } from \"./AxisFill\";\nimport { Grid } from \"./Grid\";\nimport { AxisLabel } from \"./AxisLabel\";\nimport { AxisTick } from \"./AxisTick\";\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\nimport { registry } from \"../../core/Registry\";\nimport { percent } from \"../../core/utils/Percent\";\nimport * as $math from \"../../core/utils/Math\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * A base class for all axis renderers.\r\n *\r\n * @see {@link IAxisRendererEvents} for a list of available events\r\n * @see {@link IAxisRendererAdapters} for a list of available Adapters\r\n */\n\nvar AxisRenderer =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(AxisRenderer, _super);\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param axis Related axis\r\n   */\n\n\n  function AxisRenderer() {\n    var _this = // Init\n    _super.call(this) || this;\n    /**\r\n     * A related chart.\r\n     */\n\n\n    _this._chart = new MutableValueDisposer();\n    _this.className = \"AxisRenderer\"; // Set defaults\n\n    _this.minGridDistance = 50;\n    _this.inside = false;\n    _this.inversed = false;\n    _this.tooltipLocation = 0.5;\n    _this.fullWidthTooltip = false;\n    _this.cellStartLocation = 0;\n    _this.cellEndLocation = 1;\n    _this.minLabelPosition = 0;\n    _this.maxLabelPosition = 1;\n    _this.shouldClone = false;\n\n    var gridContainer = _this.createChild(Container);\n\n    gridContainer.shouldClone = false;\n    gridContainer.layout = \"none\"; //\tgridContainer.isMeasured = false;\n\n    gridContainer.width = percent(100);\n    gridContainer.height = percent(100);\n    _this.gridContainer = gridContainer; // not good without this\n\n    gridContainer.events.on(\"maxsizechanged\", function () {\n      if (_this.inited) {\n        _this.invalidateAxisItems();\n      }\n    }, _this, false);\n\n    var breakContainer = _this.createChild(Container);\n\n    breakContainer.shouldClone = false;\n    breakContainer.isMeasured = false;\n    breakContainer.layout = \"none\";\n    breakContainer.width = percent(100);\n    breakContainer.height = percent(100);\n    _this.breakContainer = breakContainer;\n    _this.line = _this.createChild(AxisLine);\n    _this.line.shouldClone = false;\n    _this.line.strokeOpacity = 0;\n\n    var baseGrid = _this.createChild(Grid);\n\n    baseGrid.shouldClone = false;\n    _this.baseGrid = baseGrid; // Make elements disposable\n\n    var disposers = _this._disposers;\n    disposers.push(baseGrid);\n    disposers.push(_this.line);\n    disposers.push(gridContainer);\n    disposers.push(breakContainer);\n    disposers.push(_this._chart);\n    _this.ticks.template.disabled = true;\n    _this.axisFills.template.disabled = true;\n    _this.axisFills.template.interactionsEnabled = false; // Apply theme\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  Object.defineProperty(AxisRenderer.prototype, \"axis\", {\n    get: function get() {\n      return this._axis;\n    },\n    set: function set(axis) {\n      this.setAxis(axis);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n  * @ignore\r\n  */\n\n  AxisRenderer.prototype.setAxis = function (axis) {\n    this._axis = axis;\n    this.baseGrid.parent = axis;\n    this.line.parent = axis;\n    this.gridContainer.bind(\"opacity\", axis);\n  };\n  /**\r\n   * Called when rendered is attached to an Axis, as well as a property of\r\n   * Axis that might affect the appearance is updated.\r\n   *\r\n   * E.g. `axis.opposite`, `axis.inside`, etc.\r\n   *\r\n   * This method is called **before** draw, so that any related setting\r\n   * changed in this method can be changed.\r\n   *\r\n   * @todo Description (review)\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  AxisRenderer.prototype.processRenderer = function () {\n    this.events.on(\"sizechanged\", this.updateTooltip, this, false);\n    this.events.on(\"positionchanged\", this.updateTooltip, this, false);\n    this.labels.template.inside = this.inside;\n    this.ticks.template.inside = this.inside;\n  };\n  /**\r\n   * Updates Axis' tooltip.\r\n   *\r\n   * @todo Description (review)\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  AxisRenderer.prototype.updateTooltip = function () {// This is a placeholder method for extending classes to override.\n  };\n\n  Object.defineProperty(AxisRenderer.prototype, \"axisLength\", {\n    /**\r\n     * Returns actual length of the Axis, in pixels.\r\n     *\r\n     * @return Length (px)\r\n     */\n    get: function get() {\n      // This is a placeholder method for extending classes to override.\n      return 0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Re-positions an element to new coordinates.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param item   A target element\r\n   * @param point  New coordinates\r\n   */\n\n  AxisRenderer.prototype.positionItem = function (item, point) {\n    if (item) {\n      item.moveTo(point);\n    }\n  };\n  /**\r\n   * Converts relative position on axis to point coordinates.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param position  Position (0-1)\r\n   * @return Point\r\n   */\n\n\n  AxisRenderer.prototype.positionToPoint = function (position) {\n    // This is a placeholder method for extending classes to override.\n    return {\n      x: 0,\n      y: 0\n    };\n  };\n  /**\r\n   * Converts relative position on axis to angle.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description (review / units)\r\n   * @param position  Position (0-1)\r\n   * @return Angle\r\n   */\n\n\n  AxisRenderer.prototype.positionToAngle = function (position) {\n    // This is a placeholder method for extending classes to override.\n    return 0;\n  };\n  /**\r\n   * Converts relative position (0-1) on axis to a pixel coordinate.\r\n   *\r\n   * @param position  Position (0-1)\r\n   * @return Coordinate (px)\r\n   */\n\n\n  AxisRenderer.prototype.positionToCoordinate = function (position) {\n    var coordinate;\n    var axis = this.axis;\n    var axisFullLength = axis.axisFullLength;\n\n    if (axis.renderer.inversed) {\n      coordinate = (axis.end - position) * axisFullLength;\n    } else {\n      coordinate = (position - axis.start) * axisFullLength;\n    }\n\n    return coordinate;\n  };\n\n  AxisRenderer.prototype.updateGridContainer = function () {};\n\n  AxisRenderer.prototype.getHeight = function () {\n    var axis = this.axis;\n\n    if (axis && axis.chart) {\n      var chart = this.axis.chart;\n\n      if (chart.plotContainer) {\n        return chart.plotContainer.pixelHeight || 0;\n      }\n    }\n\n    return this.gridContainer.pixelHeight || 0;\n  };\n\n  AxisRenderer.prototype.getWidth = function () {\n    var axis = this.axis;\n\n    if (axis && axis.chart) {\n      var chart = this.axis.chart;\n\n      if (chart.plotContainer) {\n        return chart.plotContainer.pixelWidth || 0;\n      }\n    }\n\n    return this.gridContainer.pixelWidth || 0;\n  };\n  /**\r\n   * Converts a coordinate in pixels to a relative position. (0-1)\r\n   *\r\n   * @param coordinate  Coordinate (px)\r\n   * @return Position (0-1)\r\n   */\n\n\n  AxisRenderer.prototype.coordinateToPosition = function (coordinate) {\n    var position;\n    var axis = this.axis;\n    var axisFullLength = axis.axisFullLength;\n\n    if (axis.renderer.inversed) {\n      position = axis.end - coordinate / axisFullLength;\n    } else {\n      position = coordinate / axisFullLength + axis.start;\n    }\n\n    return $math.round(position, 5);\n  };\n  /**\r\n   * Converts a point at specific coordinates to a relative position (0-1)\r\n   * on the axis.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param point  Point\r\n   * @return Position (0-1)\r\n   */\n\n\n  AxisRenderer.prototype.pointToPosition = function (point) {\n    // This is a placeholder method for extending classes to override.\n    return 0;\n  };\n  /**\r\n   * [getPositionRangePath description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   * @param startPosition  Starting position\r\n   * @param endPosition    End position\r\n   * @return SVG path\r\n   */\n\n\n  AxisRenderer.prototype.getPositionRangePath = function (startPosition, endPosition) {\n    return \"\";\n  };\n  /**\r\n   * Invalidates all axis data items, effectively causing them re-evaluated.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description (review)\r\n   */\n\n\n  AxisRenderer.prototype.invalidateAxisItems = function () {\n    var axis = this.axis;\n\n    if (axis) {\n      axis.invalidateDataItems();\n    }\n  };\n  /**\r\n   * Updates and positions a grid element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param grid         Grid element\r\n   * @param position     Starting position\r\n   * @param endPosition  End position\r\n   */\n\n\n  AxisRenderer.prototype.updateGridElement = function (grid, position, endPosition) {// This is a placeholder method for extending classes to override.\n  };\n  /**\r\n   * Updates and positions a tick element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param tick         Tick element\r\n   * @param position     Starting position\r\n   * @param endPosition  End position\r\n   */\n\n\n  AxisRenderer.prototype.updateTickElement = function (tick, position, endPosition) {// This is a placeholder method for extending classes to override.\n  };\n  /**\r\n   * Updates and positions a label element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param label        Label element\r\n   * @param position     Starting position\r\n   * @param endPosition  Ending position\r\n   */\n\n\n  AxisRenderer.prototype.updateLabelElement = function (label, position, endPosition, location) {// This is a placeholder method for extending classes to override.\n  };\n  /**\r\n   * Updates and positions the axis fill element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param fill         Fill element\r\n   * @param position     Starting position\r\n   * @param endPosition  Ending position\r\n   */\n\n\n  AxisRenderer.prototype.updateFillElement = function (fill, position, endPosition) {\n    fill.startPosition = position;\n    fill.endPosition = endPosition;\n  };\n  /**\r\n   * Updates and positions the axis line element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  AxisRenderer.prototype.updateAxisLine = function () {// This is a placeholder method for extending classes to override.\n  };\n  /**\r\n   * Updates and positions the base grid element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  AxisRenderer.prototype.updateBaseGridElement = function () {// This is a placeholder method for extending classes to override.\n  };\n  /**\r\n   * Updates and positions an axis break element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param axisBreak Break element\r\n   */\n\n\n  AxisRenderer.prototype.updateBreakElement = function (axisBreak) {\n    this.positionItem(axisBreak.startLine, axisBreak.startPoint);\n    this.toggleVisibility(axisBreak.startLine, axisBreak.startPosition, 0, 1);\n    this.positionItem(axisBreak.endLine, axisBreak.endPoint);\n    this.toggleVisibility(axisBreak.endLine, axisBreak.endPosition, 0, 1);\n  };\n\n  Object.defineProperty(AxisRenderer.prototype, \"minGridDistance\", {\n    /**\r\n     * @return Min distance (px)\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"minGridDistance\");\n    },\n\n    /**\r\n     * Minimum distance in pixels between grid elements.\r\n     *\r\n     * @param value  Min distance (px)\r\n     */\n    set: function set(value) {\n      if (this.setPropertyValue(\"minGridDistance\", value)) {\n        if (this.axis) {\n          this.axis.invalidateLayout();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisRenderer.prototype, \"chart\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Chart\r\n     */\n    get: function get() {\n      return this._chart.get();\n    },\n\n    /**\r\n     * A chart, associated with the Axis.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value  Chart\r\n     */\n    set: function set(value) {\n      this._chart.set(value, null);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Toggles visibility of an element, based on its current position and\r\n   * min/max position settings.\r\n   *\r\n   * E.g. labels based on `minLabelPosition` and `maxLabelPosition`.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param sprite       An element to toggle\r\n   * @param position     Elements current position\r\n   * @param minPosition  Min position setting\r\n   * @param maxPosition  Max position setting\r\n   */\n\n  AxisRenderer.prototype.toggleVisibility = function (sprite, position, minPosition, maxPosition) {\n    var axis = this.axis;\n    var updatedStart = axis.start + (axis.end - axis.start) * (minPosition - 0.0001);\n    var updatedEnd = axis.start + (axis.end - axis.start) * (maxPosition + 0.0001);\n\n    if (!sprite.disabled) {\n      if (position < updatedStart || position > updatedEnd) {\n        sprite.__disabled = true;\n      } else {\n        sprite.__disabled = false;\n      }\n    }\n  };\n  /**\r\n   * Creates visual elements for and axis break.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param axisBreak Axis break\r\n   */\n\n\n  AxisRenderer.prototype.createBreakSprites = function (axisBreak) {// This is a placeholder method for extending classes to override.\n  };\n\n  Object.defineProperty(AxisRenderer.prototype, \"axisFills\", {\n    /**\r\n     * A list of Axis' Fill elements.\r\n     *\r\n     * Those are fill elements that cover the space between every second set\r\n     * of grid lines, and can be configured to create striped charts.\r\n     *\r\n     * Please note that these are disabled by default. To enable them, set\r\n     * template to true.\r\n     *\r\n     * ```TypeScript\r\n     * categoryAxis.renderer.axisFills.template.disabled = false;\r\n     * ```\r\n     * ```JavaScript\r\n     * categoryAxis.renderer.axisFills.template.disabled = false;\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"xAxes\": [{\r\n     *     // ...\r\n     *     \"renderer\": {\r\n     *       \"axisFills\": {\r\n     *         \"disabled\": false\r\n     *       }\r\n     *     }\r\n     *   }]\r\n     * }\r\n     * ```\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/tutorials/alternated-axis-fills/} this tutorial for more info.\r\n     * @return Fill elements\r\n     */\n    get: function get() {\n      if (!this._axisFills) {\n        var fill = this.createFill(this.axis);\n        this._axisFills = new ListTemplate(fill);\n        fill.applyOnClones = true;\n        fill.events.on(\"enabled\", this.invalidateAxisItems, this, false);\n\n        this._disposers.push(new ListDisposer(this._axisFills));\n\n        this._disposers.push(this._axisFills.template);\n      }\n\n      return this._axisFills;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns a new fill element, suitable for this Axis Renderer type.\r\n   *\r\n   * @return Fill element\r\n   */\n\n  AxisRenderer.prototype.createFill = function (axis) {\n    return new AxisFill(axis);\n  };\n\n  Object.defineProperty(AxisRenderer.prototype, \"grid\", {\n    /**\r\n     * A list of Axis' Grid elements.\r\n     *\r\n     * @return Grid elements\r\n     */\n    get: function get() {\n      if (!this._grid) {\n        var grid = this.createGrid();\n        this._grid = new ListTemplate(grid);\n        grid.applyOnClones = true;\n        grid.events.on(\"enabled\", this.invalidateAxisItems, this, false);\n\n        this._disposers.push(new ListDisposer(this._grid));\n\n        this._disposers.push(this._grid.template);\n      }\n\n      return this._grid;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns a new grid element, suitable for this Axis Renderer type.\r\n   *\r\n   * @return Grid element\r\n   */\n\n  AxisRenderer.prototype.createGrid = function () {\n    return new Grid();\n  };\n\n  Object.defineProperty(AxisRenderer.prototype, \"ticks\", {\n    /**\r\n     * A list of Axis' Tick elements.\r\n     *\r\n     * Please note that these are disabled by default. To enable them, set\r\n     * template to true.\r\n     *\r\n     * ```TypeScript\r\n     * categoryAxis.renderer.ticks.template.disabled = false;\r\n     * ```\r\n     * ```JavaScript\r\n     * categoryAxis.renderer.ticks.template.disabled = false;\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"xAxes\": [{\r\n     *     // ...\r\n     *     \"renderer\": {\r\n     *       \"ticks\": {\r\n     *         \"disabled\": false\r\n     *       }\r\n     *     }\r\n     *   }]\r\n     * }\r\n     * ```\r\n     *\r\n     * @return Tick elements\r\n     */\n    get: function get() {\n      if (!this._ticks) {\n        var tick = this.createTick();\n        tick.applyOnClones = true;\n        tick.isMeasured = false;\n        tick.events.on(\"enabled\", this.invalidateAxisItems, this, false);\n        this._ticks = new ListTemplate(tick);\n\n        this._disposers.push(new ListDisposer(this._ticks));\n\n        this._disposers.push(this._ticks.template);\n      }\n\n      return this._ticks;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns a new tick element, suitable for this Axis Renderer type.\r\n   *\r\n   * @return Tick element\r\n   */\n\n  AxisRenderer.prototype.createTick = function () {\n    return new AxisTick();\n  };\n\n  Object.defineProperty(AxisRenderer.prototype, \"labels\", {\n    /**\r\n     * A list of Axis' Label elements.\r\n     *\r\n     * @return Label elements\r\n     */\n    get: function get() {\n      if (!this._labels) {\n        var label = this.createLabel();\n        this._labels = new ListTemplate(label);\n        label.applyOnClones = true;\n        label.events.on(\"enabled\", this.invalidateAxisItems, this, false);\n\n        this._disposers.push(new ListDisposer(this._labels));\n\n        this._disposers.push(this._labels.template);\n      }\n\n      return this._labels;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns a new label element, suitable for this Axis Renderer type.\r\n   *\r\n   * @return Label element\r\n   */\n\n  AxisRenderer.prototype.createLabel = function () {\n    return new AxisLabel();\n  };\n\n  Object.defineProperty(AxisRenderer.prototype, \"inside\", {\n    /**\r\n     * @return Labels inside?\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"inside\");\n    },\n\n    /**\r\n     * Indicates whether Axis' labels and ticks should be drawn inside Plot area.\r\n     *\r\n     * Does not work with all renderers, like AxisRendererRadial.\r\n     *\r\n     * @param value  Labels inside?\r\n     */\n    set: function set(value) {\n      if (this.setPropertyValue(\"inside\", value)) {\n        if (this.axis) {\n          this.axis.invalidate();\n        }\n      }\n\n      if (value) {\n        this.width = 0;\n        this.height = 0;\n      } else {\n        this.width = undefined;\n        this.height = undefined;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisRenderer.prototype, \"opposite\", {\n    /**\r\n     * @return Draw axis on opposite side?\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"opposite\");\n    },\n\n    /**\r\n     * Indicates whether Axis should be drawn on the opposite side of the plot\r\n     * area than it would normally be drawn based on chart's settings.\r\n     *\r\n     * Does not work with all renderers, like [[AxisRendererRadial]] and\r\n     * [[AxisRenderer Circular].\r\n     *\r\n     * @param value  Draw axis on opposite side?\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"opposite\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisRenderer.prototype, \"fullWidthTooltip\", {\n    /**\r\n     * @return Full width tooltip?\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"fullWidthTooltip\");\n    },\n\n    /**\r\n     * Indicates if Axis tooltip should take the whole width of the axis cell.\r\n     * (between two grid lines)\r\n     *\r\n     * NOTE: this setting is ignored on circular axis types.\r\n     *\r\n     * @param value Full width tooltip?\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"fullWidthTooltip\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisRenderer.prototype, \"tooltipLocation\", {\n    /**\r\n     * @return Tooltip location\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"tooltipLocation\");\n    },\n\n    /**\r\n     * Location within axis cell to show tooltip on. (0-1)\r\n     *\r\n     * 0 - show at the start\r\n     * 0.5 - show right in the middle\r\n     * 1 - show at the end\r\n     *\r\n     * @param value Tooltip location\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"tooltipLocation\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisRenderer.prototype, \"cellStartLocation\", {\n    /**\r\n     * @return Cell start (0-1)\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"cellStartLocation\");\n    },\n\n    /**\r\n     * Location for the cell start.\r\n     *\r\n     * Normally a \"cell\" is the whole available width in a category.\r\n     *\r\n     * If there are several clustered column-like series available, the whole\r\n     * space is divided between each clustered column, or column stacks.\r\n     *\r\n     * `cellStartLocation` identifies where, within available space, the actual\r\n     * cell starts.\r\n     *\r\n     * This, together with column series' `width` will affect actual width of\r\n     * columns, and thus gaps between them.\r\n     *\r\n     * This will affect category-like axes only, like [[DateAxis]], or\r\n     * [[CategoryAxis]].\r\n     *\r\n     * This is used to limit a space occupied by series like column.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/positioning-axis-elements/} for more info.\r\n     * @param value Cell start (0-1)\r\n     */\n    set: function set(value) {\n      if (this.setPropertyValue(\"cellStartLocation\", value)) {\n        if (this.axis) {\n          this.axis.invalidateSeries();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisRenderer.prototype, \"cellEndLocation\", {\n    /**\r\n     * @return Cell end (0-1)\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"cellEndLocation\");\n    },\n\n    /**\r\n     * Location for the cell end.\r\n     *\r\n     * Normally a \"cell\" is the whole available width in a category.\r\n     *\r\n     * If there are several clustered column-like series available, the whole\r\n     * space is divided between each clustered column, or column stacks.\r\n     *\r\n     * `cellEndLocation` identifies where, within available space, the actual\r\n     * cell ends.\r\n     *\r\n     * This, together with column series' `width` will affect actual width of\r\n     * columns, and thus gaps between them.\r\n     *\r\n     * This will affect category-like axes only, like [[DateAxis]], or\r\n     * [[CategoryAxis]].\r\n     *\r\n     * This is used to limit a space occupied by series like column.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/positioning-axis-elements/} for more info.\r\n     * @param value Cell end (0-1)\r\n     */\n    set: function set(value) {\n      if (this.setPropertyValue(\"cellEndLocation\", value)) {\n        if (this.axis) {\n          this.axis.invalidateSeries();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisRenderer.prototype, \"inversed\", {\n    /**\r\n     * @return Flip axis?\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"inversed\");\n    },\n\n    /**\r\n     * Indicates if the scale of the axis should be flipped.\r\n     *\r\n     * @param value Flip axis?\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"inversed\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisRenderer.prototype, \"minLabelPosition\", {\n    /**\r\n     * @return Min label position (0-1)\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"minLabelPosition\");\n    },\n\n    /**\r\n     * Minimum position along the Axis, for labels.\r\n     *\r\n     * Labels, which have their position closer to the start of the Axis, will be\r\n     * automatically hidden.\r\n     *\r\n     * E.g., setting this to 0.05 (5% of total axis length) would hide labels,\r\n     * that would otherwise be drawn very near start of the Axis.\r\n     *\r\n     * This is especially usefull with `inside = true`, or if the chart hasn't\r\n     * got any extra margins.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/positioning-axis-elements/} for more info.\r\n     * @param value  Min label position (0-1)\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"minLabelPosition\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisRenderer.prototype, \"maxLabelPosition\", {\n    /**\r\n     * @return Max label position (0-1)\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"maxLabelPosition\");\n    },\n\n    /**\r\n     * Maximum position along the Axis, for labels.\r\n     *\r\n     * Labels, which have their position closer to the and of the Axis, will be\r\n     * automatically hidden.\r\n     *\r\n     * E.g., setting this to 0.95 (95% of total axis length) would hide labels,\r\n     * that would otherwise be drawn very near end of the Axis.\r\n     *\r\n     * This is especially usefull with `inside = true`, or if the chart hasn't\r\n     * got any extra margins.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/positioning-axis-elements/} for more info.\r\n     * @param value  Max label position (0-1)\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"maxLabelPosition\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Copies all settings and related items from another object of the same\r\n   * type.\r\n   *\r\n   * @param source  Source object\r\n   */\n\n  AxisRenderer.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n\n    this.grid.template.copyFrom(source.grid.template);\n    this.ticks.template.copyFrom(source.ticks.template);\n    this.labels.template.copyFrom(source.labels.template);\n    this.axisFills.template.copyFrom(source.axisFills.template);\n    this.line.copyFrom(source.line);\n    this.baseGrid.copyFrom(source.baseGrid);\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  AxisRenderer.prototype.toAxisPosition = function (value) {\n    return value;\n  };\n\n  return AxisRenderer;\n}(Container);\n\nexport { AxisRenderer };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"AxisRenderer\"] = AxisRenderer;","map":null,"metadata":{},"sourceType":"module"}