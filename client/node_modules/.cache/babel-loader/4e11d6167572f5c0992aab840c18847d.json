{"ast":null,"code":"/**\r\n * Rounded rectangle module.\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Sprite } from \"../Sprite\";\nimport { registry } from \"../Registry\";\nimport * as $math from \"../utils/Math\";\nimport * as $type from \"../utils/Type\";\nimport * as $utils from \"../utils/Utils\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Draws a rectangle with rounded corners.\r\n *\r\n * @see {@link IRoundedRectangleEvents} for a list of available events\r\n * @see {@link IRoundedRectangleAdapters} for a list of available Adapters\r\n */\n\nvar RoundedRectangle =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(RoundedRectangle, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function RoundedRectangle() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"RoundedRectangle\";\n    _this.element = _this.paper.add(\"path\"); //this.pixelPerfect = false;\n\n    _this.cornerRadius(3, 3, 3, 3);\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Draws the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  RoundedRectangle.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n\n    var w = this.innerWidth;\n    var h = this.innerHeight;\n\n    if ($type.isNumber(w) && $type.isNumber(h)) {\n      var minSide = $math.min(w, h) / 2;\n      var cornerRadiusTopLeft = $utils.relativeToValue(this.cornerRadiusTopLeft, minSide);\n      var cornerRadiusTopRight = $utils.relativeToValue(this.cornerRadiusTopRight, minSide);\n      var cornerRadiusBottomRight = $utils.relativeToValue(this.cornerRadiusBottomRight, minSide);\n      var cornerRadiusBottomLeft = $utils.relativeToValue(this.cornerRadiusBottomLeft, minSide);\n      var maxcr = $math.min(Math.abs(w / 2), Math.abs(h / 2));\n      var crtl = $math.fitToRange(cornerRadiusTopLeft, 0, maxcr);\n      var crtr = $math.fitToRange(cornerRadiusTopRight, 0, maxcr);\n      var crbr = $math.fitToRange(cornerRadiusBottomRight, 0, maxcr);\n      var crbl = $math.fitToRange(cornerRadiusBottomLeft, 0, maxcr);\n      var lineT = \"M\" + crtl + \",0 L\" + (w - crtr) + \",0\";\n      var lineB = \" L\" + crbl + \",\" + h;\n      var lineL = \" L0,\" + crtl;\n      var lineR = \" L\" + w + \",\" + (h - crbr);\n      var arcTR = \" a\" + crtr + \",\" + crtr + \" 0 0 1 \" + crtr + \",\" + crtr;\n      var arcBR = \" a\" + crbr + \",\" + crbr + \" 0 0 1 -\" + crbr + \",\" + crbr;\n      var arcBL = \" a\" + crbl + \",\" + crbl + \" 0 0 1 -\" + crbl + \",-\" + crbl;\n      var arcTL = \" a\" + crtl + \",\" + crtl + \" 0 0 1 \" + crtl + \",-\" + crtl;\n      var path = lineT + arcTR + lineR + arcBR + lineB + arcBL + lineL + arcTL + \" Z\";\n      this.path = path;\n    }\n  };\n  /**\r\n   * Sets radius for all four corners at ones.\r\n   *\r\n   * All numbers are in pixels.\r\n   *\r\n   * @param tl  Top-left corner\r\n   * @param tr  Top-right corner\r\n   * @param bl  Bottom-left corner\r\n   * @param br  Bottom-right corner\r\n   */\n\n\n  RoundedRectangle.prototype.cornerRadius = function (tl, tr, bl, br) {\n    this.cornerRadiusTopLeft = tl;\n    this.cornerRadiusTopRight = tr;\n    this.cornerRadiusBottomLeft = bl;\n    this.cornerRadiusBottomRight = br;\n  };\n\n  Object.defineProperty(RoundedRectangle.prototype, \"cornerRadiusTopLeft\", {\n    /**\r\n     * @return Radius (px or Percent)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"cornerRadiusTopLeft\");\n    },\n\n    /**\r\n     * Radius of the top-left corner in pixels.\r\n     *\r\n     * @default 3\r\n     * @param value  Radius (px or Percent)\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"cornerRadiusTopLeft\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(RoundedRectangle.prototype, \"cornerRadiusTopRight\", {\n    /**\r\n     * @return Radius (px or Percent)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"cornerRadiusTopRight\");\n    },\n\n    /**\r\n     * Radius of the top-right corner in pixels.\r\n     *\r\n     * @default 3\r\n     * @param value  Radius (px or Percent)\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"cornerRadiusTopRight\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(RoundedRectangle.prototype, \"cornerRadiusBottomRight\", {\n    /**\r\n     * @return Radius (px or Percent)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"cornerRadiusBottomRight\");\n    },\n\n    /**\r\n     * Radius of the bottom-right corner in pixels.\r\n     *\r\n     * @default 3\r\n     * @param value  Radius (px or Percent)\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"cornerRadiusBottomRight\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(RoundedRectangle.prototype, \"cornerRadiusBottomLeft\", {\n    /**\r\n     * @return Radius (px or Percent)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"cornerRadiusBottomLeft\");\n    },\n\n    /**\r\n     * Radius of the bottom-left corner in pixels.\r\n     *\r\n     * @default 3\r\n     * @param value  Radius (px or Percent)\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"cornerRadiusBottomLeft\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Measures the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  RoundedRectangle.prototype.measureElement = function () {};\n\n  Object.defineProperty(RoundedRectangle.prototype, \"bbox\", {\n    /**\r\n     * Returns bounding box (square) for this element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    get: function () {\n      if (this.definedBBox) {\n        return this.definedBBox;\n      }\n\n      if (this.isMeasured) {\n        return {\n          x: 0,\n          y: 0,\n          width: this.innerWidth,\n          height: this.innerHeight\n        };\n      } else {\n        return {\n          x: 0,\n          y: 0,\n          width: 0,\n          height: 0\n        };\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return RoundedRectangle;\n}(Sprite);\n\nexport { RoundedRectangle };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"RoundedRectangle\"] = RoundedRectangle;","map":null,"metadata":{},"sourceType":"module"}